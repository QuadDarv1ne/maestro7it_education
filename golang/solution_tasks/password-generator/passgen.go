/*
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TOML-–∫–æ–Ω—Ñ–∏–≥–æ–≤.
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤, API-–∫–ª—é—á–µ–π –∏ —Å–∏—Å—Ç–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
*/

package main

import (
	"crypto/rand"
	"flag"
	"fmt"
	"log"
	"math/big"
	"os"
	"strings"

	"github.com/BurntSushi/toml"
)

// Config ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ TOML-–∫–æ–Ω—Ñ–∏–≥–∞
type Config struct {
	Length   int    `toml:"length"`
	Upper    bool   `toml:"upper"`
	Lower    bool   `toml:"lower"`
	Numbers  bool   `toml:"numbers"`
	Symbols  bool   `toml:"symbols"`
	Exclude  string `toml:"exclude"`
	Output   string `toml:"output"`
}

const (
	upperChars  = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	lowerChars  = "abcdefghijklmnopqrstuvwxyz"
	numberChars = "0123456789"
	symbolChars = "!@#$%^&*()-_=+[]{}<>?"
)

var (
	configFile = flag.String("config", "", "–ü—É—Ç—å –∫ TOML-–∫–æ–Ω—Ñ–∏–≥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, config.toml)")
	length     = flag.Int("length", 12, "–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è")
	upper      = flag.Bool("upper", true, "–í–∫–ª—é—á–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")
	lower      = flag.Bool("lower", true, "–í–∫–ª—é—á–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã")
	numbers    = flag.Bool("numbers", true, "–í–∫–ª—é—á–∞—Ç—å —Ü–∏—Ñ—Ä—ã")
	symbols    = flag.Bool("symbols", false, "–í–∫–ª—é—á–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
	exclude    = flag.String("exclude", "0OoIl", "–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã")
	output     = flag.String("output", "", "–ö—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, secret.txt)")
)

func main() {
	flag.Parse()
	cfg := loadConfig()

	password, err := generatePassword(cfg)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: %v", err)
	}

	if cfg.Output != "" {
		if err := os.WriteFile(cfg.Output, []byte(password), 0600); err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: %v", err)
		}
		fmt.Printf("üîë –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: %s\n", cfg.Output)
	} else {
		fmt.Printf("üîí –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: %s\n", password)
	}
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ–ª–∞–≥–æ–≤
func loadConfig() Config {
	if *configFile != "" {
		var cfg Config
		data, err := os.ReadFile(*configFile)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞:", err)
		}
		if _, err := toml.Decode(string(data), &cfg); err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ TOML:", err)
		}
		return cfg
	}

	return Config{
		Length:   *length,
		Upper:    *upper,
		Lower:    *lower,
		Numbers:  *numbers,
		Symbols:  *symbols,
		Exclude:  *exclude,
		Output:   *output,
	}
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
func generatePassword(cfg Config) (string, error) {
	var builder strings.Builder

	if cfg.Upper {
		builder.WriteString(filterChars(upperChars, cfg.Exclude))
	}
	if cfg.Lower {
		builder.WriteString(filterChars(lowerChars, cfg.Exclude))
	}
	if cfg.Numbers {
		builder.WriteString(filterChars(numberChars, cfg.Exclude))
	}
	if cfg.Symbols {
		builder.WriteString(filterChars(symbolChars, cfg.Exclude))
	}

	charset := builder.String()
	if charset == "" {
		return "", fmt.Errorf("–Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤")
	}

	password := make([]byte, cfg.Length)
	max := big.NewInt(int64(len(charset)))

	for i := range password {
		num, err := rand.Int(rand.Reader, max)
		if err != nil {
			return "", err
		}
		password[i] = charset[num.Int64()]
	}

	return string(password), nil
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
func filterChars(chars, exclude string) string {
	return strings.Map(func(r rune) rune {
		if strings.ContainsRune(exclude, r) {
			return -1
		}
		return r
	}, chars)
}