class FruitManager {
    constructor() {
        // –§—Ä—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
        this.fruitTypes = [
            { type: 'cherry', points: 100, color: '#FF0000', symbol: 'üçí' },
            { type: 'strawberry', points: 300, color: '#FF00FF', symbol: 'üçì' },
            { type: 'orange', points: 500, color: '#FFA500', symbol: 'üçä' },
            { type: 'apple', points: 700, color: '#FF0000', symbol: 'üçé' },
            { type: 'melon', points: 1000, color: '#00FF00', symbol: 'üçâ' },
            { type: 'galaxian', points: 2000, color: '#FFFF00', symbol: '‚≠ê' },
            { type: 'bell', points: 3000, color: '#FFFF00', symbol: 'üîî' },
            { type: 'key', points: 5000, color: '#FFFF00', symbol: 'üîë' },
            { type: 'banana', points: 1500, color: '#FFD700', symbol: 'üçå' }, // New fruit
            { type: 'grapes', points: 2500, color: '#9370DB', symbol: 'üçá' }   // New fruit
        ];
        this.fruitTimer = 0;
        this.fruitVisible = false;
        this.currentFruit = null;
        this.spawnChance = 0.005; // Base spawn chance
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ—Ä—É–∫—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
    spawnFruit(map, foodCount, totalFood, level) {
        // Increase spawn chance based on level for more excitement
        const levelAdjustedSpawnChance = Math.min(this.spawnChance * (1 + level * 0.1), 0.02);
        
        if (!this.fruitVisible && Math.random() < levelAdjustedSpawnChance && foodCount > totalFood * 0.3) {
            // –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ñ—Ä—É–∫—Ç–∞
            let attempts = 0;
            while (attempts < 50) {
                const x = Math.floor(Math.random() * (map[0].length - 2)) + 1;
                const y = Math.floor(Math.random() * (map.length - 2)) + 1;
                
                if (map[y][x] === 1) { // –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
                    // Select fruit based on level with some randomness
                    const maxFruitIndex = Math.min(level - 1 + Math.floor(Math.random() * 3), this.fruitTypes.length - 1);
                    const fruitIndex = Math.min(maxFruitIndex, this.fruitTypes.length - 1);
                    
                    this.currentFruit = {
                        x: x,
                        y: y,
                        ...this.fruitTypes[fruitIndex],
                        spawnTime: Date.now()
                    };
                    this.fruitVisible = true;
                    break;
                }
                attempts++;
            }
        }
        
        // –£–¥–∞–ª–∏—Ç—å —Ñ—Ä—É–∫—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        if (this.fruitVisible && Date.now() - this.currentFruit.spawnTime > 10000) {
            this.fruitVisible = false;
            this.currentFruit = null;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–±–æ—Ä —Ñ—Ä—É–∫—Ç–∞
    checkFruitCollection(pacmanX, pacmanY, scoreCallback, particleCallback) {
        if (this.fruitVisible && pacmanX === this.currentFruit.x && pacmanY === this.currentFruit.y) {
            const points = this.currentFruit.points;
            particleCallback(this.currentFruit.x, this.currentFruit.y, this.currentFruit.color);
            this.fruitVisible = false;
            this.currentFruit = null;
            return points;
        }
        return 0;
    }

    // Draw fruits on the map
    drawFruits(ctx, cellSize) {
        if (this.fruitVisible && this.currentFruit) {
            const pixelX = this.currentFruit.x * cellSize + cellSize/2;
            const pixelY = this.currentFruit.y * cellSize + cellSize/2;
            
            // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏
            const pulse = Math.sin(Date.now() / 200) * 0.2 + 1;
            ctx.save();
            ctx.translate(pixelX, pixelY);
            ctx.scale(pulse, pulse);
            
            ctx.font = '20px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(this.currentFruit.symbol, 0, 0);
            
            ctx.restore();
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ—Ä—É–∫—Ç–æ–≤
    reset() {
        this.fruitVisible = false;
        this.currentFruit = null;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export { FruitManager };