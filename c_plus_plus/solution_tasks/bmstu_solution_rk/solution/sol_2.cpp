/**
 * Задание №2: sol_2.cpp
 * 
 * Автор: Дуплей Максим Игоревич
 * Студент: Кузнецов Юрий Андреевич
 * 
 * Задача:
 * Определить количество различных (уникальных) символов во введённой строке.
 * Работа должна выполняться только с использованием символьного массива (char[]),
 * без применения std::string и стандартных контейнеров.
 * Для каждого символа необходимо проверять, встречался ли он ранее, просматривая все предыдущие позиции в массиве.
 * Если символ ранее не встречался — увеличивать счётчик уникальных символов.
 * 
 * Пример ввода:
 * success
 * 
 * Вывод:
 * 4
 * 
 * А роза упала на лапу азора
 * Размер строки (без пробелов и знаков препинания): 21
 * 
 * Примечание:
 * Программа корректно работает только с однобайтовыми символами (например, ASCII).
 * Кириллица и другие многобайтовые кодировки (UTF-8) не поддерживаются,
 * так как задача предполагает посимвольную обработку на уровне char.
 * 
 * Сборка проекта:
 * g++ -std=c++17 -Wall -Wextra -O2 sol_2.cpp -o sol_2
 */

#include <iostream>
#include <cstring>
#include <windows.h> // Для работы с кодовыми страницами

int countUniqueChars(const char str[], int len) {
    int uniqueCount = 0;

    for (int i = 0; i < len; ++i) {
        bool isUnique = true;
        for (int j = 0; j < i; ++j) {
            if (str[i] == str[j]) {
                isUnique = false;
                break;
            }
        }
        if (isUnique) {
            ++uniqueCount;
        }
    }

    return uniqueCount;
}

int main() {

    // Для версий Windows 10 и выше можно использовать UTF-8 для работы с Кириллицей
    SetConsoleOutputCP(CP_UTF8);
    SetConsoleCP(CP_UTF8);

    const int MAX = 1000;
    char str[MAX];
    std::cout << "Введите строку: ";
    std::cin.getline(str, MAX);

    std::cout << "Уникальных символов: " << countUniqueChars(str, std::strlen(str)) << "\n";
    return 0;
}