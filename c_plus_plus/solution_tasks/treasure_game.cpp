/**
 * üéÆ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ ¬´–ü–æ–∏—Å–∫ —Å–æ–∫—Ä–æ–≤–∏—â–∞¬ª —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
 */

#include <iostream>
#include <limits>
#include <array>
#include <clocale>
#include <windows.h>  // Windows API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª—å—é

/**
 * @brief –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã.
 * 
 * MAP_SIZE ‚Äî —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã (10x10).
 * TREASURE_X, TREASURE_Y ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–∫—Ä–æ–≤–∏—â–∞.
 * EMPTY_CELL ‚Äî —Å–∏–º–≤–æ–ª –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–∏.
 * TREASURE_CELL ‚Äî —Å–∏–º–≤–æ–ª —Å–æ–∫—Ä–æ–≤–∏—â–∞.
 * PLAYER_SYMBOL ‚Äî —Å–∏–º–≤–æ–ª –∏–≥—Ä–æ–∫–∞.
 */
constexpr int MAP_SIZE = 10;
constexpr int TREASURE_X = 7;
constexpr int TREASURE_Y = 7;
constexpr char EMPTY_CELL = '.';
constexpr char TREASURE_CELL = '#';
constexpr char PLAYER_SYMBOL = '+';

/// –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç—ã: –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
using Map = std::array<std::array<char, MAP_SIZE>, MAP_SIZE>;

/**
 * @brief –û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç system("cls") –≤ Windows –∏ system("clear") –≤ Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö.
 * –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: system() –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤ production-–∫–æ–¥–µ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏,
 * –Ω–æ –¥–æ–ø—É—Å—Ç–∏–º –¥–ª—è —É—á–µ–±–Ω—ã—Ö –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
 */
void clearScreen() {
#ifdef _WIN32
    std::system("cls");
#else
    std::system("clear");
#endif
}

/**
 * @brief –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–∞—Ä—Ç—É.
 * 
 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å—é –∫–∞—Ä—Ç—É —Å–∏–º–≤–æ–ª–∞–º–∏ EMPTY_CELL ('.'),
 * –∑–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–∫—Ä–æ–≤–∏—â–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (TREASURE_Y, TREASURE_X).
 * 
 * @param map ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.
 */
void initMap(Map& map) {
    for (auto& row : map) {
        for (auto& cell : row) {
            cell = EMPTY_CELL;
        }
    }
    map[TREASURE_Y][TREASURE_X] = TREASURE_CELL;
}

/**
 * @brief –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏.
 * 
 * –ù–∞ –º–µ—Å—Ç–µ –∏–≥—Ä–æ–∫–∞ —Ä–∏—Å—É–µ—Ç—Å—è PLAYER_SYMBOL ('+'),
 * –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–ø—É—Å—Ç–æ –∏–ª–∏ —Å–æ–∫—Ä–æ–≤–∏—â–µ).
 * 
 * @param map ‚Äî –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É.
 * @param playerX ‚Äî —Ç–µ–∫—É—â–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ –æ—Å–∏ X (—Å—Ç–æ–ª–±–µ—Ü).
 * @param playerY ‚Äî —Ç–µ–∫—É—â–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ –æ—Å–∏ Y (—Å—Ç—Ä–æ–∫–∞).
 */
void drawMap(const Map& map, int playerX, int playerY) {
    for (int i = 0; i < MAP_SIZE; ++i) {
        for (int j = 0; j < MAP_SIZE; ++j) {
            if (i == playerY && j == playerX) {
                std::cout << ' ' << PLAYER_SYMBOL;
            } else {
                std::cout << ' ' << map[i][j];
            }
        }
        std::cout << '\n';
    }
}

/**
 * @brief –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥ –ª–∏ –∏–≥—Ä–æ–∫ —Å–æ–∫—Ä–æ–≤–∏—â–∞.
 * 
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–≥—Ä–æ–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Å–æ–∫—Ä–æ–≤–∏—â–∞.
 * 
 * @param x ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ X.
 * @param y ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ Y.
 * @return true, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞ –∫–ª–µ—Ç–∫–µ —Å —Å–æ–∫—Ä–æ–≤–∏—â–µ–º; –∏–Ω–∞—á–µ false.
 */
bool checkWin(int x, int y) {
    return (x == TREASURE_X && y == TREASURE_Y);
}

/**
 * @brief –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤–∏–µ –∏ —á–∏—Ç–∞–µ—Ç –µ–≥–æ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
 * 
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–æ–¥ –±—É–∫–≤ –≤–º–µ—Å—Ç–æ —á–∏—Å–µ–ª).
 * –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—á–∏—â–∞–µ—Ç –ø–æ—Ç–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false.
 * 
 * @param action ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ.
 * @return true, –µ—Å–ª–∏ –≤–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω; false ‚Äî –ø—Ä–∏ –æ—à–∏–±–∫–µ.
 */
bool getAction(int& action) {
    std::cout << "\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n"
              << "1 - –í–≤–µ—Ä—Ö\n"
              << "2 - –í–Ω–∏–∑\n"
              << "3 - –í–ª–µ–≤–æ\n"
              << "4 - –í–ø—Ä–∞–≤–æ\n"
              << "5 - –í—ã–π—Ç–∏\n"
              << "–í–∞—à –≤—ã–±–æ—Ä: ";
    if (std::cin >> action) {
        return true;
    } else {
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        return false;
    }
}

/**
 * @brief –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫ –Ω–µ –≤—ã—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã.
 * 
 * @param x ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –∏–≥—Ä–æ–∫–∞ –ø–æ X (–∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏).
 * @param y ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –∏–≥—Ä–æ–∫–∞ –ø–æ Y (–∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏).
 * @param action ‚Äî –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (1‚Äì4).
 */
void movePlayer(int& x, int& y, int action) {
    switch (action) {
        case 1: // –í–≤–µ—Ä—Ö
            if (y > 0) y--;
            break;
        case 2: // –í–Ω–∏–∑
            if (y < MAP_SIZE - 1) y++;
            break;
        case 3: // –í–ª–µ–≤–æ
            if (x > 0) x--;
            break;
        case 4: // –í–ø—Ä–∞–≤–æ
            if (x < MAP_SIZE - 1) x++;
            break;
        default:
            break; // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    }
}

/**
 * @brief –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã.
 * 
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–≥—Ä—É, –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª,
 * –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–±–µ–¥—ã –∏ –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥—Å—á—ë—Ç —Ö–æ–¥–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥.
 */
int main() {
#ifdef _WIN32
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
    SetConsoleOutputCP(CP_UTF8);
    SetConsoleCP(CP_UTF8);
    // std::setlocale –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ CP_UTF8
#endif

    Map map;
    initMap(map);

    int playerX = 3;
    int playerY = 5;
    int moves = 0;
    bool win = false;

    while (true) {
        clearScreen();
        drawMap(map, playerX, playerY);

        if (win) {
            std::cout << "\nüèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ —Å–æ–∫—Ä–æ–≤–∏—â–µ!\n";
            std::cout << "–°–æ–≤–µ—Ä—à–µ–Ω–æ —Ö–æ–¥–æ–≤: " << moves << "\n";
            break;
        }

        int action = -1;
        if (!getAction(action)) {
            std::cout << "\n‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.\n";
            std::cin.get();
            continue;
        }

        if (action < 1 || action > 5) {
            std::cout << "\n‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1‚Äì5.\n";
            std::cin.get();
            continue;
        }

        if (action == 5) {
            std::cout << "\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É.\n";
            break;
        }

        movePlayer(playerX, playerY, action);
        moves++;
        win = checkWin(playerX, playerY);
    }

    return 0;
}