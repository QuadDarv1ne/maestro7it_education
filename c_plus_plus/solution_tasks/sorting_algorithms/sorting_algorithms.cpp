/*
  –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞

  –û–ø–∏—Å–∞–Ω–∏–µ: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Ä—Ç–∏—Ä–æ–≤–æ–∫ - –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).

  üìÑ –ü—Ä–∏–º–µ—Ä:
  –í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞: 10 3 7 42 15
  –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: –ø—É–∑—ã—Ä—å–∫–æ–≤–∞—è, —à–µ–π–∫–µ—Ä–Ω–∞—è, —Ä–∞—Å—á—ë—Å–∫–æ–π, –≤—Å—Ç–∞–≤–∫–∞–º–∏
  –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: 3 7 10 15 42
*/

#include <iostream>
#include <vector>
#include <string>
#include <limits>

/**
 * –ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∏ –º–µ–Ω—è–µ—Ç –∏—Ö –º–µ—Å—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
 *
 * @param arr –í–µ–∫—Ç–æ—Ä —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.
 */
void bubbleSort(std::vector<int> &arr) {
    int n = arr.size();
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                std::swap(arr[j], arr[j + 1]);
            }
        }
    }
}

/**
 * –®–µ–π–∫–µ—Ä–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞.
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤ –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö.
 *
 * @param arr –í–µ–∫—Ç–æ—Ä —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.
 */
void shakerSort(std::vector<int> &arr) {
    int n = arr.size();
    bool swapped = true;
    int start = 0;
    int end = n - 1;

    while (swapped) {
        swapped = false;

        for (int i = start; i < end; ++i) {
            if (arr[i] > arr[i + 1]) {
                std::swap(arr[i], arr[i + 1]);
                swapped = true;
            }
        }

        if (!swapped)
            break;

        swapped = false;
        --end;

        for (int i = end - 1; i >= start; --i) {
            if (arr[i] > arr[i + 1]) {
                std::swap(arr[i], arr[i + 1]);
                swapped = true;
            }
        }

        ++start;
    }
}

/**
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å—á—ë—Å–∫–æ–π.
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—É–∑—ã—Ä—å–∫–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª—å—à–æ–π —à–∞–≥ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è "—á–µ—Ä–µ–ø–∞—Ö".
 *
 * @param arr –í–µ–∫—Ç–æ—Ä —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.
 */
void combSort(std::vector<int> &arr) {
    int n = arr.size();
    int gap = n;
    bool swapped = true;

    while (gap != 1 || swapped) {
        gap = (gap * 10) / 13;
        if (gap < 1)
            gap = 1;

        swapped = false;

        for (int i = 0; i < n - gap; ++i) {
            if (arr[i] > arr[i + gap]) {
                std::swap(arr[i], arr[i + gap]);
                swapped = true;
            }
        }
    }
}

/**
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏.
 * –°—Ç—Ä–æ–∏—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏.
 *
 * @param arr –í–µ–∫—Ç–æ—Ä —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å.
 */
void insertionSort(std::vector<int> &arr) {
    int n = arr.size();
    for (int i = 1; i < n; ++i) {
        int key = arr[i];
        int j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            --j;
        }
        arr[j + 1] = key;
    }
}

int main() {
    std::vector<int> array;
    int num;
    std::string sortType;

    std::cout << "–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ (–≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –Ω–µ—á–∏—Å–ª–æ–≤–æ–π —Å–∏–º–≤–æ–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞): ";
    while (std::cin >> num) {
        array.push_back(num);
    }

    std::cin.clear(); // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤

    std::cout << "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø—É–∑—ã—Ä—å–∫–æ–≤–∞—è, —à–µ–π–∫–µ—Ä–Ω–∞—è, —Ä–∞—Å—á—ë—Å–∫–æ–π, –≤—Å—Ç–∞–≤–∫–∞–º–∏): ";
    std::cin >> sortType;

    if (sortType == "–ø—É–∑—ã—Ä—å–∫–æ–≤–∞—è") {
        bubbleSort(array);
    } else if (sortType == "—à–µ–π–∫–µ—Ä–Ω–∞—è") {
        shakerSort(array);
    } else if (sortType == "—Ä–∞—Å—á—ë—Å–∫–æ–π") {
        combSort(array);
    } else if (sortType == "–≤—Å—Ç–∞–≤–∫–∞–º–∏") {
        insertionSort(array);
    } else {
        std::cout << "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∏–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏." << std::endl;
        return 1;
    }

    std::cout << "–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: ";
    for (int num : array) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}
