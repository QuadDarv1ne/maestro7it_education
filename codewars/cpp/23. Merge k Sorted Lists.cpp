/**
 * @class Solution
 * @brief –ö–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–ª–∏—è–Ω–∏—è k –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.
 */

#include <vector>
#include <queue>
using namespace std;

/**
     * @brief –û–±—ä–µ–¥–∏–Ω—è–µ—Ç k –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
     * 
     * @details –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫—É—á—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å) –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ
     * –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É–∑–ª–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏. –ê–ª–≥–æ—Ä–∏—Ç–º:
     * 1. –ü–æ–º–µ—â–∞–µ—Ç –≥–æ–ª–æ–≤—ã –≤—Å–µ—Ö –Ω–µ–ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å
     * 2. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     * 3. –î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª –∏–∑ —Ç–æ–≥–æ –∂–µ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
     * 4. –°—Ç—Ä–æ–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –ø–æ–º–æ—â—å—é —Ñ–∏–∫—Ç–∏–≤–Ω–æ–π –≥–æ–ª–æ–≤—ã
     * 
     * @note –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä:
     * [](const ListNode* a, const ListNode* b) { return a->val > b->val; }
     * 
     * @complexity –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(N log K), –≥–¥–µ:
     *   - N = –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö
     *   - K = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
     * @complexity –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(K)
     * 
     * @param lists –í–µ–∫—Ç–æ—Ä —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –≥–æ–ª–æ–≤—ã —Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤.
     *              –°–ø–∏—Å–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.
     *              –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å nullptr –¥–ª—è –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤.
     * 
     * @return –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –≥–æ–ª–æ–≤—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
     *         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç nullptr –µ—Å–ª–∏ –≤—Å–µ —Å–ø–∏—Å–∫–∏ –ø—É—Å—Ç—ã.
     * 
     * @example –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞:
     * \code
     *   ListNode* list1 = new ListNode(1, new ListNode(4, new ListNode(5)));
     *   ListNode* list2 = new ListNode(1, new ListNode(3, new ListNode(4)));
     *   ListNode* list3 = new ListNode(2, new ListNode(6));
     *   vector<ListNode*> lists = {list1, list2, list3};
     *   Solution sol;
     *   ListNode* result = sol.mergeKLists(lists);
     *   // –†–µ–∑—É–ª—å—Ç–∞—Ç: 1->1->2->3->4->4->5->6
     * \endcode
     * 
     * @see –°—Ç—Ä—É–∫—Ç—É—Ä–∞ ListNode –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫:
     * \code
     *   struct ListNode {
     *       int val;
     *       ListNode *next;
     *       ListNode() : val(0), next(nullptr) {}
     *       ListNode(int x) : val(x), next(nullptr) {}
     *       ListNode(int x, ListNode *next) : val(x), next(next) {}
     *   };
     * \endcode
     */
    
struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        // –ö–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –¥–ª—è –º–∏–Ω–∏-–∫—É—á–∏: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —É–∑–ª–æ–≤
        auto cmp = [](const ListNode* a, const ListNode* b) {
            return a->val > b->val;
        };
        priority_queue<ListNode*, vector<ListNode*>, decltype(cmp)> min_heap(cmp);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ–≤—ã –Ω–µ–ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ –∫—É—á—É
        for (ListNode* node : lists) {
            if (node != nullptr) {
                min_heap.push(node);
            }
        }
        
        // –§–∏–∫—Ç–∏–≤–Ω–∞—è –≥–æ–ª–æ–≤–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        ListNode dummy(0);
        ListNode* current = &dummy;
        
        while (!min_heap.empty()) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É–∑–µ–ª
            ListNode* min_node = min_heap.top();
            min_heap.pop();
            
            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –µ–≥–æ –∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º—É —Å–ø–∏—Å–∫—É
            current->next = min_node;
            current = current->next;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫—É—á—É
            if (min_node->next != nullptr) {
                min_heap.push(min_node->next);
            }
        }
        
        return dummy.next;
    }
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/
