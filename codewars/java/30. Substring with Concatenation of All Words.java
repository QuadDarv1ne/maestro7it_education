import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Solution {
    /**
     * –°–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ ‚Äî —ç—Ç–æ –º–µ—Ç–æ–¥, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –º—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É (–æ–∫–Ω–æ) –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º (—Å–∫–æ–ª—å–∑–∏–º) –µ–≥–æ –ø–æ —Å—Ç—Ä–æ–∫–µ, –ø—Ä–æ–≤–µ—Ä—è—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
     */
    
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø–æ–¥—Å—Ç—Ä–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ `s`, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–µ–π 
     * –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞ `words` —Ä–æ–≤–Ω–æ –ø–æ –æ–¥–Ω–æ–º—É —Ä–∞–∑—É –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ. 
     * –í—Å–µ —Å–ª–æ–≤–∞ –≤ –º–∞—Å—Å–∏–≤–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É.
     *
     * <p>–ê–ª–≥–æ—Ä–∏—Ç–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ "—Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞" —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–º–µ—â–µ–Ω–∏–π:
     * 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
     * 2. –°—Ç—Ä–æ–∏—Ç —á–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ü–µ–ª–µ–≤—ã—Ö —Å–ª–æ–≤
     * 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ö–æ–¥–æ–≤ (–ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–∑–º–æ–∂–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏–π)
     * 4. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–∫–Ω–æ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç —Å–ª–æ–≤:
     *    - –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –æ–∫–Ω–æ
     *    - –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç—ã —Å–ª–æ–≤–∞ —Å—É–∂–∞–µ—Ç –æ–∫–Ω–æ
     *    - –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–∫–Ω–æ
     * 5. –§–∏–∫—Å–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å–ª–æ–≤
     *
     * <p><b>–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</b>
     * - –í—Ä–µ–º—è: O(n * L), –≥–¥–µ:
     *      n = –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ `s`
     *      L = –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞
     * - –ü–∞–º—è—Ç—å: O(m * L), –≥–¥–µ:
     *      m = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ `words`
     *      L = –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞
     *
     * <p><b>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
     * {@code
     * Solution sol = new Solution();
     * List<Integer> indices = sol.findSubstring("barfoothefoobarman", new String[]{"foo","bar"});
     * // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [0, 9]
     * }
     *
     * @param s      –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null)
     * @param words  –ú–∞—Å—Å–∏–≤ —Å–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ (–≤—Å–µ —Å–ª–æ–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
     * @return       –°–ø–∏—Å–æ–∫ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–¥—Å—Ç—Ä–æ–∫ (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç)
     *
     * @implNote –î–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
     * 1. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è (0 –¥–æ L-1, –≥–¥–µ L = –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞):
     *    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –æ–∫–Ω–∞ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
     * 2. –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É —Å —à–∞–≥–æ–º –¥–ª–∏–Ω—ã —Å–ª–æ–≤–∞:
     *    a) –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
     *    b) –ï—Å–ª–∏ —Å–ª–æ–≤–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–º —Å–ª–æ–≤–∞—Ä–µ:
     *        - –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–ª–æ–≤–∞
     *        - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —á–∞—Å—Ç–æ—Ç—ã (—Å–¥–≤–∏–≥–∞–µ—Ç –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É)
     *        - –ü—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å –∏ —Å–¥–≤–∏–≥–∞–µ—Ç –æ–∫–Ω–æ
     *    c) –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ:
     *        - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–∫–Ω–æ (–æ—á–∏—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –æ–±–Ω—É–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫)
     *        - –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ª–µ–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É –∑–∞ —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
     */
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> result = new ArrayList<>();
        if (words == null || words.length == 0 || s == null || s.isEmpty()) {
            return result;
        }
        
        int n = s.length();
        int m = words.length;
        int wordLen = words[0].length();
        int totalLen = m * wordLen;
        
        if (n < totalLen) {
            return result;
        }
        
        Map<String, Integer> wordCount = new HashMap<>();
        for (String word : words) {
            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);
        }
        
        for (int start = 0; start < wordLen; start++) {
            Map<String, Integer> currCount = new HashMap<>();
            int left = start;
            int count = 0;
            
            for (int right = start; right <= n - wordLen; right += wordLen) {
                String word = s.substring(right, right + wordLen);
                
                if (wordCount.containsKey(word)) {
                    currCount.put(word, currCount.getOrDefault(word, 0) + 1);
                    count++;
                    
                    while (currCount.get(word) > wordCount.get(word)) {
                        String leftWord = s.substring(left, left + wordLen);
                        currCount.put(leftWord, currCount.get(leftWord) - 1);
                        count--;
                        left += wordLen;
                    }
                    
                    if (count == m) {
                        result.add(left);
                        String leftWord = s.substring(left, left + wordLen);
                        currCount.put(leftWord, currCount.get(leftWord) - 1);
                        count--;
                        left += wordLen;
                    }
                } else {
                    currCount.clear();
                    count = 0;
                    left = right + wordLen;
                }
            }
        }
        
        return result;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/