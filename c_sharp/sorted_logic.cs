using System;
using System.Collections.Generic;

public static class SortingAlgorithms
{
    // 1. –ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Bubble Sort)
    // –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(n¬≤) ‚Äî —Ö—É–¥—à–∏–π –∏ —Å—Ä–µ–¥–Ω–∏–π —Å–ª—É—á–∞–∏; O(n) ‚Äî –ª—É—á—à–∏–π (–µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
    // –°—Ç–∞–±–∏–ª—å–Ω–∞—è, in-place
    public static void BubbleSort<T>(T[] array) where T : IComparable<T>
    {
        if (array == null || array.Length <= 1) return;

        int n = array.Length;
        bool swapped;
        for (int i = 0; i < n - 1; i++)
        {
            swapped = false;
            for (int j = 0; j < n - i - 1; j++)
            {
                if (array[j].CompareTo(array[j + 1]) > 0)
                {
                    Swap(array, j, j + 1);
                    swapped = true;
                }
            }
            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–±–º–µ–Ω–æ–≤ ‚Äî –º–∞—Å—Å–∏–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
            if (!swapped) break;
        }
    }

    // 2. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º (Selection Sort)
    // –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(n¬≤) –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö
    // –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è, in-place
    public static void SelectionSort<T>(T[] array) where T : IComparable<T>
    {
        if (array == null || array.Length <= 1) return;

        int n = array.Length;
        for (int i = 0; i < n - 1; i++)
        {
            int minIndex = i;
            for (int j = i + 1; j < n; j++)
            {
                if (array[j].CompareTo(array[minIndex]) < 0)
                    minIndex = j;
            }
            if (minIndex != i)
                Swap(array, i, minIndex);
        }
    }

    // 3. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏ (Insertion Sort)
    // –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(n¬≤) ‚Äî —Ö—É–¥—à–∏–π/—Å—Ä–µ–¥–Ω–∏–π; O(n) ‚Äî –ª—É—á—à–∏–π (–ø–æ—á—Ç–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤)
    // –°—Ç–∞–±–∏–ª—å–Ω–∞—è, in-place, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –º–∞–ª—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
    public static void InsertionSort<T>(T[] array) where T : IComparable<T>
    {
        if (array == null || array.Length <= 1) return;

        for (int i = 1; i < array.Length; i++)
        {
            T key = array[i];
            int j = i - 1;
            while (j >= 0 && array[j].CompareTo(key) > 0)
            {
                array[j + 1] = array[j];
                j--;
            }
            array[j + 1] = key;
        }
    }

    // 4. –ë—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Quick Sort)
    // –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(n log n) ‚Äî —Å—Ä–µ–¥–Ω–∏–π; O(n¬≤) ‚Äî —Ö—É–¥—à–∏–π (—Ä–µ–¥–∫–æ –ø—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ–º –≤—ã–±–æ—Ä–µ –æ–ø–æ—Ä—ã)
    // –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è, in-place (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è, —Ç—Ä–µ–±—É–µ—Ç O(log n) —Å—Ç–µ–∫–∞)
    public static void QuickSort<T>(T[] array) where T : IComparable<T>
    {
        if (array == null || array.Length <= 1) return;
        QuickSortInternal(array, 0, array.Length - 1);
    }

    private static void QuickSortInternal<T>(T[] array, int left, int right) where T : IComparable<T>
    {
        if (left >= right) return;

        int pivotIndex = Partition(array, left, right);
        QuickSortInternal(array, left, pivotIndex - 1);
        QuickSortInternal(array, pivotIndex + 1, right);
    }

    private static int Partition<T>(T[] array, int left, int right) where T : IComparable<T>
    {
        // –í—ã–±–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ –æ–ø–æ—Ä–Ω–æ–≥–æ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π)
        T pivot = array[right];
        int i = left - 1;

        for (int j = left; j < right; j++)
        {
            if (array[j].CompareTo(pivot) <= 0)
            {
                i++;
                Swap(array, i, j);
            }
        }
        Swap(array, i + 1, right);
        return i + 1;
    }

    // 5. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º (Merge Sort)
    // –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(n log n) –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö
    // –°—Ç–∞–±–∏–ª—å–Ω–∞—è, –Ω–µ in-place (—Ç—Ä–µ–±—É–µ—Ç O(n) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏)
    public static void MergeSort<T>(T[] array) where T : IComparable<T>
    {
        if (array == null || array.Length <= 1) return;
        T[] temp = new T[array.Length];
        MergeSortInternal(array, temp, 0, array.Length - 1);
    }

    private static void MergeSortInternal<T>(T[] array, T[] temp, int left, int right) where T : IComparable<T>
    {
        if (left >= right) return;

        int mid = left + (right - left) / 2;
        MergeSortInternal(array, temp, left, mid);
        MergeSortInternal(array, temp, mid + 1, right);
        Merge(temp, array, left, mid, right);
    }

    private static void Merge<T>(T[] temp, T[] array, int left, int mid, int right) where T : IComparable<T>
    {
        Array.Copy(array, left, temp, left, right - left + 1);

        int i = left, j = mid + 1, k = left;

        while (i <= mid && j <= right)
        {
            if (temp[i].CompareTo(temp[j]) <= 0)
                array[k++] = temp[i++];
            else
                array[k++] = temp[j++];
        }

        while (i <= mid)
            array[k++] = temp[i++];

        while (j <= right)
            array[k++] = temp[j++];
    }

    // 6. –ü–∏—Ä–∞–º–∏–¥–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Heap Sort)
    // –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(n log n) –≤–æ –≤—Å–µ—Ö —Å–ª—É—á–∞—è—Ö
    // –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è, in-place
    public static void HeapSort<T>(T[] array) where T : IComparable<T>
    {
        if (array == null || array.Length <= 1) return;

        int n = array.Length;

        // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫—É—á–∏ (–ø–µ—Ä–µ–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞)
        for (int i = n / 2 - 1; i >= 0; i--)
            Heapify(array, n, i);

        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫—É—á–∏ –ø–æ –æ–¥–Ω–æ–º—É
        for (int i = n - 1; i > 0; i--)
        {
            Swap(array, 0, i); // –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ—Ä–µ–Ω—å –≤ –∫–æ–Ω–µ—Ü
            Heapify(array, i, 0); // –≤—ã–∑–≤–∞—Ç—å heapify –Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π –∫—É—á–µ
        }
    }

    private static void Heapify<T>(T[] array, int heapSize, int rootIndex) where T : IComparable<T>
    {
        int largest = rootIndex;
        int left = 2 * rootIndex + 1;
        int right = 2 * rootIndex + 2;

        if (left < heapSize && array[left].CompareTo(array[largest]) > 0)
            largest = left;

        if (right < heapSize && array[right].CompareTo(array[largest]) > 0)
            largest = right;

        if (largest != rootIndex)
        {
            Swap(array, rootIndex, largest);
            Heapify(array, heapSize, largest);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    private static void Swap<T>(T[] array, int i, int j)
    {
        T temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}

/*
 * üß™ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * 
 * class Program
 * {
 *     static void Main()
 *     {
 *         int[] arr = { 64, 34, 25, 12, 22, 11, 90 };
 * 
 *         Console.WriteLine("–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤: " + string.Join(", ", arr));
 * 
 *         // –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π –º–µ—Ç–æ–¥:
 *         SortingAlgorithms.QuickSort(arr);
 *         // SortingAlgorithms.MergeSort(arr);
 *         // SortingAlgorithms.HeapSort(arr);
 *         // –∏ —Ç.–¥.
 * 
 *         Console.WriteLine("–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤: " + string.Join(", ", arr));
 *     }
 * }
 */