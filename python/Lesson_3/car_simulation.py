import time
import sys
try:
    from colorama import init, Fore, Back, Style
    init(autoreset=True)
    HAS_COLORAMA = True
except ImportError:
    HAS_COLORAMA = False

class Car:
    def __init__(self, model="Tesla Model S"):
        self.model = model
        self.doors_locked = True
        self.fuel_cap_open = False
        self.fuel_level = 0
        self.engine_on = False
        self.speed = 0
        self.headlights_on = False
        self.odometer = 0
        self.fuel_consumption = 0.08  # –ª–∏—Ç—Ä–æ–≤ –Ω–∞ –∫–º

    def print_header(self, text):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
        if HAS_COLORAMA:
            print(Fore.CYAN + "\n" + "="*60)
            print(Fore.YELLOW + f" {text.upper()} ".center(60, '‚òÖ'))
            print(Fore.CYAN + "="*60 + Style.RESET_ALL)
        else:
            print("\n" + "="*60)
            print(f" {text.upper()} ".center(60, '*'))
            print("="*60)

    def show_progress(self, action, duration, emoji="", final_value=""):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        total_ticks = 20
        symbols = ['‚óê', '‚óì', '‚óë', '‚óí']
        
        color = Fore.GREEN if HAS_COLORAMA else ""
        sys.stdout.write("\n")
        
        for i in range(total_ticks):
            progress = int((i + 1) / total_ticks * 100)
            bar = '[' + '‚ñ†' * (i + 1) + ' ' * (total_ticks - i - 1) + ']'
            spinner = symbols[i % len(symbols)]
            
            status_line = f"{color}{spinner} {emoji}{action} {bar} {progress}%"
            if final_value:
                status_line += f" | {final_value}"
            
            sys.stdout.write("\r" + status_line)
            sys.stdout.flush()
            time.sleep(duration / total_ticks)
        
        if HAS_COLORAMA:
            print(Fore.GREEN + f"\n‚úì {action} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        else:
            print(f"\n‚úì {action} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    def unlock_doors(self):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–≤–µ—Ä–µ–π"""
        if not self.doors_locked:
            return "–î–≤–µ—Ä–∏ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"
        
        self.show_progress("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–≤–µ—Ä–µ–π", 2, "üîì")
        self.doors_locked = False
        return "–î–≤–µ—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"

    def open_fuel_cap(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –∫—Ä—ã—à–∫–∏ –±–µ–Ω–∑–æ–±–∞–∫–∞"""
        if self.fuel_cap_open:
            return "–ö—Ä—ã—à–∫–∞ –±–µ–Ω–∑–æ–±–∞–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞"
        
        if self.engine_on:
            return "–ù–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–Ω–∑–æ–±–∞–∫ –ø—Ä–∏ —Ä–∞–±–æ—Ç–∞—é—â–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª–µ"
        
        self.show_progress("–û—Ç–∫—Ä—ã—Ç–∏–µ –∫—Ä—ã—à–∫–∏ –±–µ–Ω–∑–æ–±–∞–∫–∞", 1, "‚õΩ")
        self.fuel_cap_open = True
        return "–ö—Ä—ã—à–∫–∞ –±–µ–Ω–∑–æ–±–∞–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞"

    def refuel(self, amount):
        """–ó–∞–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if not self.fuel_cap_open:
            return "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫—Ä—ã—à–∫—É –±–µ–Ω–∑–æ–±–∞–∫–∞"
        
        self.show_progress(f"–ó–∞–ø—Ä–∞–≤–∫–∞ {amount} –ª–∏—Ç—Ä–æ–≤", 5, "‚õΩ", f"–¢–æ–ø–ª–∏–≤–æ: {self.fuel_level} ‚Üí {self.fuel_level + amount}L")
        self.fuel_level += amount
        return f"–ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ {amount} –ª–∏—Ç—Ä–æ–≤. –¢–æ–ø–ª–∏–≤–æ: {self.fuel_level}L"

    def close_fuel_cap(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫—Ä—ã—à–∫–∏ –±–µ–Ω–∑–æ–±–∞–∫–∞"""
        if not self.fuel_cap_open:
            return "–ö—Ä—ã—à–∫–∞ –±–µ–Ω–∑–æ–±–∞–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞"
        
        self.show_progress("–ó–∞–∫—Ä—ã—Ç–∏–µ –∫—Ä—ã—à–∫–∏ –±–µ–Ω–∑–æ–±–∞–∫–∞", 1, "‚õΩ")
        self.fuel_cap_open = False
        return "–ö—Ä—ã—à–∫–∞ –±–µ–Ω–∑–æ–±–∞–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞"

    def start_engine(self):
        """–ó–∞–ø—É—Å–∫ –¥–≤–∏–≥–∞—Ç–µ–ª—è"""
        if self.engine_on:
            return "–î–≤–∏–≥–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        
        if self.fuel_level <= 0:
            return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å: –Ω–µ—Ç —Ç–æ–ø–ª–∏–≤–∞"
        
        self.show_progress("–ó–∞–ø—É—Å–∫ –¥–≤–∏–≥–∞—Ç–µ–ª—è", 3, "üöó", "V8: üîäüîäüîä")
        self.engine_on = True
        return "–î–≤–∏–≥–∞—Ç–µ–ª—å –∑–∞–ø—É—â–µ–Ω"

    def accelerate(self, target_speed):
        """–ù–∞–±–æ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        if not self.engine_on:
            return "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–≤–∏–≥–∞—Ç–µ–ª—å"
        
        speed_emoji = "üèÅ" if target_speed > 100 else "üöó"
        
        # –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–∑–≥–æ–Ω–∞
        steps = 10
        step_size = (target_speed - self.speed) / steps
        
        print()
        for i in range(steps):
            self.speed += step_size
            speed_bar = '|' + '‚ñ†' * int(self.speed / 5) + ' ' * (20 - int(self.speed / 5)) + '|'
            
            if HAS_COLORAMA:
                color = Fore.GREEN if self.speed < 60 else Fore.YELLOW if self.speed < 100 else Fore.RED
                sys.stdout.write(f"\r{color}{speed_emoji} –†–∞–∑–≥–æ–Ω: {speed_bar} {int(self.speed)} –∫–º/—á")
            else:
                sys.stdout.write(f"\r{speed_emoji} –†–∞–∑–≥–æ–Ω: {speed_bar} {int(self.speed)} –∫–º/—á")
            
            sys.stdout.flush()
            time.sleep(0.3)
        
        self.speed = target_speed
        print("\n‚úì –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç—å:", target_speed, "–∫–º/—á")
        return f"–ï–¥–µ–º –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {target_speed} –∫–º/—á"

    def drive(self, distance):
        """–î–≤–∏–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if not self.engine_on:
            return "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–≤–∏–≥–∞—Ç–µ–ª—å"
        
        if self.speed == 0:
            return "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–±–µ—Ä–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å"
        
        time_needed = distance / self.speed * 3.6  # –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        fuel_needed = distance * self.fuel_consumption
        
        if fuel_needed > self.fuel_level:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏"
        
        self.print_header(f"–ü–æ–µ–∑–¥–∫–∞ –Ω–∞ {distance} –∫–º")
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
        distance_covered = 0
        step = distance / 20
        
        for i in range(20):
            distance_covered += step
            self.fuel_level -= fuel_needed / 20
            self.odometer += step
            
            road = '‚Äî' * 20
            car_pos = int((distance_covered / distance) * 20)
            road_with_car = road[:car_pos] + 'üöó' + road[car_pos+1:]
            
            if HAS_COLORAMA:
                print(Fore.CYAN + f"\r–ü—Ä–æ–π–¥–µ–Ω–æ: {int(distance_covered)}/{distance} –∫–º | " +
                      Fore.YELLOW + f"–¢–æ–ø–ª–∏–≤–æ: {self.fuel_level:.1f}L | " +
                      Fore.GREEN + f"–°–ø–∏–¥–æ–º–µ—Ç—Ä: {int(self.odometer)} –∫–º")
                print(Fore.BLUE + road_with_car)
            else:
                print(f"\r–ü—Ä–æ–π–¥–µ–Ω–æ: {int(distance_covered)}/{distance} –∫–º | " +
                      f"–¢–æ–ø–ª–∏–≤–æ: {self.fuel_level:.1f}L | " +
                      f"–°–ø–∏–¥–æ–º–µ—Ç—Ä: {int(self.odometer)} –∫–º")
                print(road_with_car)
            
            time.sleep(time_needed / 20)
        
        return f"–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–π–¥–µ–Ω–æ {distance} –∫–º"

    def brake(self):
        """–¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ"""
        if self.speed == 0:
            return "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        print()
        while self.speed > 0:
            self.speed = max(0, self.speed - 20)
            speed_bar = '|' + '‚ñ†' * int(self.speed / 5) + ' ' * (20 - int(self.speed / 5)) + '|'
            
            if HAS_COLORAMA:
                color = Fore.RED if self.speed > 50 else Fore.YELLOW if self.speed > 20 else Fore.GREEN
                sys.stdout.write(f"\r{color}üõë –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ: {speed_bar} {int(self.speed)} –∫–º/—á")
            else:
                sys.stdout.write(f"\rüõë –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ: {speed_bar} {int(self.speed)} –∫–º/—á")
            
            sys.stdout.flush()
            time.sleep(0.3)
        
        print("\n‚úì –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è")
        return "–¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"

    def stop_engine(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è"""
        if not self.engine_on:
            return "–î–≤–∏–≥–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω"
        
        if self.speed > 0:
            return "–°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
        
        self.show_progress("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è", 2, "üîá", "–î–≤–∏–≥–∞—Ç–µ–ª—å: OFF")
        self.engine_on = False
        return "–î–≤–∏–≥–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–µ–Ω"

    def lock_doors(self):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–≤–µ—Ä–µ–π"""
        if self.doors_locked:
            return "–î–≤–µ—Ä–∏ —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"
        
        self.show_progress("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–≤–µ—Ä–µ–π", 1.5, "üîí")
        self.doors_locked = True
        return "–î–≤–µ—Ä–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã"

    def status(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        status = f"\n–°–æ—Å—Ç–æ—è–Ω–∏–µ {self.model}:\n"
        status += f"üîí –î–≤–µ—Ä–∏: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã' if self.doors_locked else '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã'}\n"
        status += f"‚õΩ –ö—Ä—ã—à–∫–∞ –±–µ–Ω–∑–æ–±–∞–∫–∞: {'–û—Ç–∫—Ä—ã—Ç–∞' if self.fuel_cap_open else '–ó–∞–∫—Ä—ã—Ç–∞'}\n"
        status += f"üõ¢Ô∏è –¢–æ–ø–ª–∏–≤–æ: {self.fuel_level:.1f}L\n"
        status += f"üöó –î–≤–∏–≥–∞—Ç–µ–ª—å: {'–†–∞–±–æ—Ç–∞–µ—Ç üîä' if self.engine_on else '–í—ã–∫–ª—é—á–µ–Ω üîá'}\n"
        status += f"üìè –°–∫–æ—Ä–æ—Å—Ç—å: {self.speed} –∫–º/—á\n"
        status += f"üìä –°–ø–∏–¥–æ–º–µ—Ç—Ä: {self.odometer} –∫–º\n"
        status += f"üí° –§–∞—Ä—ã: {'–í–∫–ª—é—á–µ–Ω—ã' if self.headlights_on else '–í—ã–∫–ª—é—á–µ–Ω—ã'}"
        
        if HAS_COLORAMA:
            return (Fore.CYAN + "="*60 + "\n" + 
                    Fore.YELLOW + status + 
                    Fore.CYAN + "\n" + "="*60)
        return "="*60 + "\n" + status + "\n" + "="*60

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print("\n" + "="*60)
    print("–ê–í–¢–û–ú–û–ë–ò–õ–¨–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø –° –ü–†–û–î–í–ò–ù–£–¢–û–ô –ò–ù–î–ò–ö–ê–¶–ò–ï–ô".center(60))
    print("="*60)
    
    if not HAS_COLORAMA:
        print("\n–î–ª—è —Ü–≤–µ—Ç–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ colorama: pip install colorama")
    
    car = Car("Tesla Model S")
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π
    print(car.status())
    car.unlock_doors()
    car.open_fuel_cap()
    car.refuel(50)
    car.close_fuel_cap()
    car.start_engine()
    car.accelerate(80)
    car.drive(20)
    car.brake()
    car.stop_engine()
    car.lock_doors()
    
    print(car.status())
