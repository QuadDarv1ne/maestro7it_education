def count_sequences(N, K):
    """
    Подсчитывает количество последовательностей длины N, состоящих из цифр от 0 до K-1,
    таких, что никакие два соседних элемента последовательности не равны нулю одновременно.

    Параметры:
    N (int): Длина последовательности.
    K (int): Количество возможных цифр (от 0 до K-1).

    Возвращает:
    int: Количество допустимых последовательностей.
    """
    # Инициализация таблицы для динамического программирования
    dp = [[0] * K for _ in range(N + 1)]

    # Базовый случай: последовательности длины 1
    for j in range(K):
        dp[1][j] = 1

    # Заполнение таблицы
    for i in range(2, N + 1):
        for j in range(K):
            for l in range(K):
                if j != 0 or l != 0:
                    dp[i][l] += dp[i-1][j]

    # Сумма всех возможных последовательностей длины N
    total_sequences = sum(dp[N])
    return total_sequences

# Пример использования
n = 3
k = 9
result = count_sequences(n, k)
print(f"Количество последовательностей: {result}")

"""
Описание решения:

Для решения задачи используется метод динамического программирования.
Мы создаем таблицу dp, где dp[i][j] обозначает количество последовательностей длины i, заканчивающихся цифрой j.

1. Инициализация: Создаем таблицу dp размером (N+1) x K, где N — длина последовательности, а K — количество возможных цифр.

2. Базовый случай: Для последовательностей длины 1, количество последовательностей, заканчивающихся любой цифрой j, равно 1.

3. Заполнение таблицы: Для каждой длины последовательности от 2 до N и для каждой возможной последней цифры j, мы обновляем количество последовательностей, добавляя к ним все допустимые
последовательности длины i-1, заканчивающиеся любой цифрой l, если j и l не равны нулю одновременно.

4. Результат: Суммируем все значения в последней строке таблицы dp, что дает общее количество допустимых последовательностей длины N.
"""
