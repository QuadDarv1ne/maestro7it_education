# ============================================================================
# game/in_game_menu.py
# ============================================================================

"""
–ú–æ–¥—É–ª—å: game/in_game_menu.py

–û–ø–∏—Å–∞–Ω–∏–µ:
    –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –º–µ–Ω—é –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–≥—Ä–æ–∫—É:
    - –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    - –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä—ã (—Å—Ç–æ—Ä–æ–Ω–∞, —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —Ç–µ–º–∞)
    - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
    - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É
    - –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã
    
–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Pygame UI
    - –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–µ–Ω—é
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤—É–∫–æ–º –∏ –º—É–∑—ã–∫–æ–π
    - –ê–Ω–∏–º–∞—Ü–∏—è –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    - –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å
"""

import pygame
import time
from typing import Tuple, Optional, Dict, Any

# –¶–≤–µ—Ç–∞ –¥–ª—è –º–µ–Ω—é
MENU_BG = (30, 30, 40, 220)  # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ç–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
MENU_BORDER = (100, 100, 150)
MENU_TEXT = (255, 255, 255)
MENU_HIGHLIGHT = (100, 150, 255)
MENU_HIGHLIGHT_TEXT = (255, 255, 255)
MENU_DISABLED = (100, 100, 100)
MENU_HOVER = (120, 170, 255, 100)

# –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
ANIMATION_SPEED = 0.3
MENU_FADE_SPEED = 8


class InGameMenu:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º –º–µ–Ω—é."""
    
    def __init__(self, screen: pygame.Surface, sound_manager=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –º–µ–Ω—é.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            screen (pygame.Surface): –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –º–µ–Ω—é
            sound_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤—É–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.screen = screen
        self.sound_manager = sound_manager
        self.font = pygame.font.SysFont('Arial', 24)
        self.title_font = pygame.font.SysFont('Arial', 32, bold=True)
        self.small_font = pygame.font.SysFont('Arial', 18)
        self.setting_font = pygame.font.SysFont('Arial', 20)
        
        # –†–∞–∑–º–µ—Ä—ã –º–µ–Ω—é
        self.menu_width = 400
        self.menu_height = 500
        self.menu_x = (screen.get_width() - self.menu_width) // 2
        self.menu_y = (screen.get_height() - self.menu_height) // 2
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é
        self.visible = False
        self.result = None
        self.menu_stack = []  # –°—Ç–µ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É –º–µ–Ω—é
        self.current_menu = "main"  # –¢–µ–∫—É—â–µ–µ –º–µ–Ω—é: "main", "settings"
        
        # –ê–Ω–∏–º–∞—Ü–∏—è
        self.animation_progress = 0
        self.animation_direction = 1  # 1 –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è, -1 –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
        self.last_animation_time = 0
        self.fade_alpha = 0
        
        # –í—ã–±–æ—Ä –∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–µ
        self.selected_item = 0
        self.hovered_item = -1
        self.last_selected_item = -1
        self.animation_offset = 0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
        self.game_settings = {
            "player_color": "white",
            "skill_level": 5,
            "theme": "classic"
        }
        
        # –¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        self.available_themes = ["classic", "dark", "blue", "green", "contrast"]
        self.theme_index = 0
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.main_menu_items = [
            {"text": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É", "action": "resume", "enabled": True, "icon": "‚ñ∂"},
            {"text": "–°–¥–∞—Ç—å—Å—è", "action": "resign", "enabled": True, "icon": "üè≥"},
            {"text": "–ù–æ–≤–∞—è –∏–≥—Ä–∞", "action": "new_game", "enabled": True, "icon": "üîÑ"},
            {"text": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É", "action": "save_game", "enabled": True, "icon": "üíæ"},
            {"text": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É", "action": "load_game", "enabled": True, "icon": "üìÇ"},
            {"text": "–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É", "action": "delete_game", "enabled": True, "icon": "üóë"},
            {"text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "action": "settings", "enabled": True, "icon": "‚öô"},
            {"text": "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É", "action": "toggle_music", "enabled": sound_manager is not None, "icon": "‚ô™"},
            {"text": "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–∏", "action": "toggle_sound", "enabled": sound_manager is not None, "icon": "üîä"},
            {"text": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "action": "main_menu", "enabled": True, "icon": "üè†"},
            {"text": "–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã", "action": "quit", "enabled": True, "icon": "‚ùå"}
        ]
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_menu_items = [
            {"text": f"–°—Ç–æ—Ä–æ–Ω–∞: {self._get_side_text()}", "action": "toggle_side", "enabled": True, "icon": "‚ôü"},
            {"text": f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.game_settings['skill_level']}", "action": "change_difficulty", "enabled": True, "icon": "üìä"},
            {"text": f"–¢–µ–º–∞: {self.game_settings['theme']}", "action": "change_theme", "enabled": True, "icon": "üé®"},
            {"text": "–ù–∞–∑–∞–¥", "action": "back", "enabled": True, "icon": "‚Ü©"}
        ]
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä
        self.load_menu_items = []
        
        # –¢–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
        self.menu_items = self.main_menu_items[:]
        
    def _get_side_text(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω—ã –∏–≥—Ä–æ–∫–∞."""
        return "–ë–µ–ª—ã–µ" if self.game_settings["player_color"] == "white" else "–ß–µ—Ä–Ω—ã–µ"
        
    def show(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π."""
        self.visible = True
        self.current_menu = "main"
        self.menu_items = self.main_menu_items[:]
        self.selected_item = 0
        self.result = None
        self.last_selected_item = -1
        self.animation_offset = 0
        self.last_animation_time = time.time()
        self.hovered_item = -1
        self.animation_direction = 1
        self.animation_progress = 0
        self.fade_alpha = 0
        
    def hide(self):
        """–°–∫—Ä—ã—Ç—å –º–µ–Ω—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π."""
        self.animation_direction = -1
        self.animation_progress = 1.0

    def toggle(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å –º–µ–Ω—é."""
        if self.visible:
            self.hide()
        else:
            self.show()
        
    def _complete_hide(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é."""
        self.visible = False
        self.result = None
        self.last_selected_item = -1
        self.animation_offset = 0
        self.hovered_item = -1
        self.fade_alpha = 0
        
    def handle_event(self, event) -> Optional[str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–µ–Ω—é.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            event: –°–æ–±—ã—Ç–∏–µ Pygame
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: –î–µ–π—Å—Ç–≤–∏–µ –º–µ–Ω—é –∏–ª–∏ None
        """
        if not self.visible:
            return None
            
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –ø–æ –º–µ–Ω—é
                self.selected_item = (self.selected_item - 1) % len(self.menu_items)
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                while not self.menu_items[self.selected_item]["enabled"]:
                    self.selected_item = (self.selected_item - 1) % len(self.menu_items)
                # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
                if self.sound_manager and self.selected_item != self.last_selected_item:
                    self.sound_manager.play_sound("button")
                    self.last_selected_item = self.selected_item
                    self.animation_offset = 5  # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                    
            elif event.key == pygame.K_DOWN:
                # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–Ω–∏–∑ –ø–æ –º–µ–Ω—é
                self.selected_item = (self.selected_item + 1) % len(self.menu_items)
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                while not self.menu_items[self.selected_item]["enabled"]:
                    self.selected_item = (self.selected_item + 1) % len(self.menu_items)
                # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
                if self.sound_manager and self.selected_item != self.last_selected_item:
                    self.sound_manager.play_sound("button")
                    self.last_selected_item = self.selected_item
                    self.animation_offset = 5  # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                    
            elif event.key == pygame.K_RETURN or event.key == pygame.K_SPACE:
                # –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
                item = self.menu_items[self.selected_item]
                if item["enabled"]:
                    action = item["action"]
                    # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞
                    if self.sound_manager:
                        self.sound_manager.play_sound("button")
                    return self._execute_action(action)
                    
            elif event.key == pygame.K_ESCAPE:
                # –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é
                if self.current_menu == "settings":
                    return self._go_back()
                else:
                    self.hide()
                    # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é
                    if self.sound_manager:
                        self.sound_manager.play_sound("button")
                    return "resume"
                
        elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –º—ã—à–∏
            mouse_x, mouse_y = event.pos
            for i, item in enumerate(self.menu_items):
                item_y = self.menu_y + 100 + i * 50
                if (self.menu_x + 50 <= mouse_x <= self.menu_x + self.menu_width - 50 and
                    item_y <= mouse_y <= item_y + 40 and
                    item["enabled"]):
                    self.selected_item = i
                    # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º—ã—à—å—é
                    if self.sound_manager:
                        self.sound_manager.play_sound("button")
                    return self._execute_action(item["action"])
                    
        elif event.type == pygame.MOUSEMOTION:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –º—ã—à–∏
            mouse_x, mouse_y = event.pos
            self.hovered_item = -1
            for i, item in enumerate(self.menu_items):
                item_y = self.menu_y + 100 + i * 50
                if (self.menu_x + 50 <= mouse_x <= self.menu_x + self.menu_width - 50 and
                    item_y <= mouse_y <= item_y + 40):
                    self.hovered_item = i
                    break
                    
        return None
        
    def _execute_action(self, action: str) -> str:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            action (str): –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è
        """
        if action == "toggle_music" and self.sound_manager:
            self.sound_manager.toggle_music()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
            music_status = "–í–ö–õ" if self.sound_manager.music_enabled else "–í–´–ö–õ"
            for item in self.menu_items:
                if item["action"] == "toggle_music":
                    item["text"] = f"–ú—É–∑—ã–∫–∞: {music_status}"
                    break
        elif action == "toggle_sound" and self.sound_manager:
            self.sound_manager.toggle_sound()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
            sound_status = "–í–ö–õ" if self.sound_manager.sound_enabled else "–í–´–ö–õ"
            for item in self.menu_items:
                if item["action"] == "toggle_sound":
                    item["text"] = f"–ó–≤—É–∫–∏: {sound_status}"
                    break
        elif action == "settings":
            return self._show_settings_menu()
        elif action == "toggle_side":
            return self._toggle_player_side()
        elif action == "change_difficulty":
            return self._change_difficulty()
        elif action == "change_theme":
            return self._change_theme()
        elif action == "save_game":
            return self._save_game_to_file()
        elif action == "load_game":
            return self._show_load_menu()
        elif action == "delete_game":
            return self._show_delete_menu()
        elif action == "resign":
            return "resign"
        elif action == "back":
            return self._go_back()
        elif action.startswith("load_game_"):
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
            filename = action[10:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "load_game_"
            return self._load_game_from_file(filename)
        elif action.startswith("delete_game_"):
            # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
            filename = action[12:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "delete_game_"
            return self._delete_game_file(filename)
            
        self.hide()
        return action
        
    def _show_settings_menu(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        self.menu_stack.append(self.menu_items)
        self.current_menu = "settings"
        self.menu_items = self.settings_menu_items[:]
        self.selected_item = 0
        self.last_selected_item = -1
        self.hovered_item = -1
        self.animation_offset = 0
        return "settings_menu"
        
    def _show_load_menu(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä."""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä
        try:
            from game.chess_game import ChessGame
            game = ChessGame()  # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            saved_games = game._list_saved_games()
            
            if not saved_games:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º pygame –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ move_feedback
                import pygame
                self.move_feedback = "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π"
                self.move_feedback_time = time.time()
                return "no_saved_games"
                
            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            self.load_menu_items = []
            import json
            import os
            saves_dir = os.path.join(os.path.dirname(__file__), "..", "saves")
            
            for filename in saved_games[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–≥—Ä–∞–º–∏
                try:
                    # –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    full_path = os.path.join(saves_dir, filename)
                    with open(full_path, 'r', encoding='utf-8') as f:
                        game_data = json.load(f)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    player_color = game_data.get('player_color', 'white')
                    move_count = len(game_data.get('move_history', []))
                    timestamp = game_data.get('timestamp', 0)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    import datetime
                    try:
                        date_str = datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M')
                    except:
                        date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    color_symbol = "‚ôõ" if player_color == "white" else "‚ôö"
                    display_name = f"{color_symbol} {filename.replace('.json', '')} | {move_count} —Ö–æ–¥–æ–≤ | {date_str}"
                    
                    self.load_menu_items.append({
                        "text": display_name,
                        "action": f"load_game_{filename}",
                        "enabled": True,
                        "icon": "üìú"
                    })
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    display_name = filename.replace(".json", "")
                    self.load_menu_items.append({
                        "text": display_name,
                        "action": f"load_game_{filename}",
                        "enabled": True,
                        "icon": "üìú"
                    })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç "–ù–∞–∑–∞–¥"
            self.load_menu_items.append({
                "text": "–ù–∞–∑–∞–¥",
                "action": "back",
                "enabled": True,
                "icon": "‚Ü©"
            })
            
            self.menu_stack.append(self.menu_items)
            self.current_menu = "load"
            self.menu_items = self.load_menu_items[:]
            self.selected_item = 0
            self.last_selected_item = -1
            self.hovered_item = -1
            self.animation_offset = 0
            return "load_menu"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º pygame –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ move_feedback
            import pygame
            self.move_feedback = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–∏–π"
            self.move_feedback_time = time.time()
            return "load_error"
        
    def _show_delete_menu(self) -> str:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä."""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–≥—Ä
        try:
            from game.chess_game import ChessGame
            game = ChessGame()  # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
            saved_games = game._list_saved_games()
            
            if not saved_games:
                self.move_feedback = "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
                self.move_feedback_time = time.time()
                return "no_saved_games"
                
            # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∏–≥—Ä—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            self.load_menu_items = []
            import json
            import os
            saves_dir = os.path.join(os.path.dirname(__file__), "..", "saves")
            
            for filename in saved_games[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∏–≥—Ä–∞–º–∏
                try:
                    # –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    full_path = os.path.join(saves_dir, filename)
                    with open(full_path, 'r', encoding='utf-8') as f:
                        game_data = json.load(f)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    player_color = game_data.get('player_color', 'white')
                    move_count = len(game_data.get('move_history', []))
                    timestamp = game_data.get('timestamp', 0)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                    import datetime
                    try:
                        date_str = datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M')
                    except:
                        date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    # –°–æ–∑–¥–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    color_symbol = "‚ôõ" if player_color == "white" else "‚ôö"
                    display_name = f"{color_symbol} {filename.replace('.json', '')} | {move_count} —Ö–æ–¥–æ–≤ | {date_str}"
                    
                    self.load_menu_items.append({
                        "text": display_name,
                        "action": f"delete_game_{filename}",
                        "enabled": True,
                        "icon": "üóë"
                    })
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    display_name = filename.replace(".json", "")
                    self.load_menu_items.append({
                        "text": display_name,
                        "action": f"delete_game_{filename}",
                        "enabled": True,
                        "icon": "üóë"
                    })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç "–ù–∞–∑–∞–¥"
            self.load_menu_items.append({
                "text": "–ù–∞–∑–∞–¥",
                "action": "back",
                "enabled": True,
                "icon": "‚Ü©"
            })
            
            self.menu_stack.append(self.menu_items)
            self.current_menu = "delete"
            self.menu_items = self.load_menu_items[:]
            self.selected_item = 0
            self.last_selected_item = -1
            self.hovered_item = -1
            self.animation_offset = 0
            return "delete_menu"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            self.move_feedback = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
            self.move_feedback_time = time.time()
            return "delete_error"
        
    def _save_game_to_file(self) -> str:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É –≤ —Ñ–∞–π–ª."""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ChessGame
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –∏–≥—Ä—ã
        return "save_to_file"
        
    def _load_game_from_file(self, filename: str) -> str:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É –∏–∑ —Ñ–∞–π–ª–∞."""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ ChessGame
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –∏–≥—Ä—ã
        return f"load_from_file_{filename}"
        
    def _toggle_player_side(self) -> str:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–æ—Ä–æ–Ω—É –∏–≥—Ä–æ–∫–∞."""
        self.game_settings["player_color"] = "black" if self.game_settings["player_color"] == "white" else "white"
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
        for item in self.menu_items:
            if item["action"] == "toggle_side":
                item["text"] = f"–°—Ç–æ—Ä–æ–Ω–∞: {self._get_side_text()}"
                break
        # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫
        if self.sound_manager:
            self.sound_manager.play_sound("button")
        return "side_changed"
        
    def _change_difficulty(self) -> str:
        """–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç 1 –¥–æ 20
        self.game_settings["skill_level"] = (self.game_settings["skill_level"] % 20) + 1
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
        for item in self.menu_items:
            if item["action"] == "change_difficulty":
                item["text"] = f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.game_settings['skill_level']}"
                break
        # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫
        if self.sound_manager:
            self.sound_manager.play_sound("button")
        return "difficulty_changed"
        
    def _change_theme(self) -> str:
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."""
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–º—ã
        self.theme_index = (self.theme_index + 1) % len(self.available_themes)
        self.game_settings["theme"] = self.available_themes[self.theme_index]
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
        for item in self.menu_items:
            if item["action"] == "change_theme":
                item["text"] = f"–¢–µ–º–∞: {self.game_settings['theme']}"
                break
        # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫
        if self.sound_manager:
            self.sound_manager.play_sound("button")
        return "theme_changed"
        
    def _go_back(self) -> str:
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é."""
        if self.menu_stack:
            self.menu_items = self.menu_stack.pop()
            self.current_menu = "main" if not self.menu_stack else "settings"
            self.selected_item = 0
            self.last_selected_item = -1
            self.hovered_item = -1
            self.animation_offset = 0
            # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫
            if self.sound_manager:
                self.sound_manager.play_sound("button")
            return "back"
        else:
            self.hide()
            return "resume"
        
    def update(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –º–µ–Ω—é."""
        if not self.visible:
            return
            
        current_time = time.time()
        delta_time = current_time - self.last_animation_time
        self.last_animation_time = current_time
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è
        if self.animation_direction == 1:  # –û—Ç–∫—Ä—ã—Ç–∏–µ
            self.animation_progress = min(1.0, self.animation_progress + ANIMATION_SPEED * delta_time)
            self.fade_alpha = min(180, self.fade_alpha + MENU_FADE_SPEED * delta_time)
        else:  # –ó–∞–∫—Ä—ã—Ç–∏–µ
            self.animation_progress = max(0.0, self.animation_progress - ANIMATION_SPEED * delta_time)
            self.fade_alpha = max(0, self.fade_alpha - MENU_FADE_SPEED * delta_time)
            
            # –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é
            if self.animation_progress <= 0:
                self._complete_hide()
                return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞
        if current_time - self.last_animation_time > 0.016:  # –ü—Ä–∏–º–µ—Ä–Ω–æ 60 FPS
            if self.animation_offset > 0:
                self.animation_offset -= 0.5
                if self.animation_offset < 0:
                    self.animation_offset = 0
            self.last_animation_time = current_time
        
    def draw(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–Ω—é."""
        if not self.visible:
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.update()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º easing —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
        eased_progress = self._ease_out_cubic(self.animation_progress)
        
        # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–æ—è–≤–ª–µ–Ω–∏—è
        overlay_alpha = int(self.fade_alpha * eased_progress)
        overlay = pygame.Surface((self.screen.get_width(), self.screen.get_height()), pygame.SRCALPHA)
        overlay.fill((0, 0, 0, overlay_alpha))
        self.screen.blit(overlay, (0, 0))
        
        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é
        animated_menu_y = self.menu_y + (1 - eased_progress) * 50
        
        # –§–æ–Ω –º–µ–Ω—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        scale_factor = 0.8 + 0.2 * eased_progress
        menu_rect = pygame.Rect(
            self.menu_x + (1 - scale_factor) * self.menu_width // 2,
            animated_menu_y + (1 - scale_factor) * self.menu_height // 2,
            self.menu_width * scale_factor,
            self.menu_height * scale_factor
        )
        
        # –†–∏—Å—É–µ–º —Ç–µ–Ω—å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        shadow_offset = int(3 * eased_progress)
        shadow_rect = pygame.Rect(
            menu_rect.x + shadow_offset,
            menu_rect.y + shadow_offset,
            menu_rect.width,
            menu_rect.height
        )
        shadow_surface = pygame.Surface((menu_rect.width, menu_rect.height), pygame.SRCALPHA)
        shadow_surface.fill((0, 0, 0, int(100 * eased_progress)))
        self.screen.blit(shadow_surface, (menu_rect.x + shadow_offset, menu_rect.y + shadow_offset))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω –º–µ–Ω—é
        pygame.draw.rect(self.screen, MENU_BG, menu_rect, border_radius=int(12 * scale_factor))
        pygame.draw.rect(self.screen, MENU_BORDER, menu_rect, int(3 * scale_factor), border_radius=int(12 * scale_factor))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ–Ω—é
        title_text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" if self.current_menu == "settings" else "–ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é"
        title = self.title_font.render(title_text, True, MENU_TEXT)
        title_rect = title.get_rect(center=(menu_rect.centerx, menu_rect.top + int(40 * scale_factor)))
        self.screen.blit(title, title_rect)
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
        for i, item in enumerate(self.menu_items):
            item_y = menu_rect.top + int(100 * scale_factor) + i * int(50 * scale_factor)
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            animated_offset = 0
            if i == self.selected_item and self.animation_offset > 0:
                animated_offset = self.animation_offset * eased_progress
            
            # –§–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–∞
            item_rect = pygame.Rect(
                menu_rect.left + int(50 * scale_factor) - animated_offset,
                item_y,
                menu_rect.width - int(100 * scale_factor) + 2 * animated_offset,
                int(40 * scale_factor)
            )
            
            # –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if i == self.selected_item:
                highlight_rect = pygame.Rect(
                    item_rect.x - 2,
                    item_rect.y - 2,
                    item_rect.width + 4,
                    item_rect.height + 4
                )
                pygame.draw.rect(self.screen, MENU_HIGHLIGHT, highlight_rect, border_radius=int(8 * scale_factor))
                text_color = MENU_HIGHLIGHT_TEXT
            elif i == self.hovered_item:
                # –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–≤–µ–¥–µ–Ω–∏—è
                hover_surface = pygame.Surface((item_rect.width, item_rect.height), pygame.SRCALPHA)
                hover_surface.fill(MENU_HOVER)
                self.screen.blit(hover_surface, (item_rect.x, item_rect.y))
                pygame.draw.rect(self.screen, MENU_HIGHLIGHT, item_rect, 2, border_radius=int(6 * scale_factor))
                text_color = MENU_TEXT
            else:
                text_color = MENU_TEXT if item["enabled"] else MENU_DISABLED
                
            # –ò–∫–æ–Ω–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
            if "icon" in item:
                icon = self.font.render(item["icon"], True, text_color)
                icon_rect = icon.get_rect(midleft=(item_rect.left + 5, item_rect.centery))
                self.screen.blit(icon, icon_rect)
                
            # –¢–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            text = self.setting_font.render(item["text"], True, text_color)
            text_rect = text.get_rect(midleft=(item_rect.left + 30, item_rect.centery))
            self.screen.blit(text, text_rect)
            
            # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if not item["enabled"]:
                disabled_text = self.small_font.render("(–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", True, MENU_DISABLED)
                disabled_rect = disabled_text.get_rect(
                    center=(menu_rect.centerx, item_y + int(45 * scale_factor)))
                self.screen.blit(disabled_text, disabled_rect)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_text = "‚Üë‚Üì - –Ω–∞–≤–∏–≥–∞—Ü–∏—è, Enter - –≤—ã–±–æ—Ä, Esc - –∑–∞–∫—Ä—ã—Ç—å"
        if self.current_menu == "settings":
            hint_text = "‚Üë‚Üì - –Ω–∞–≤–∏–≥–∞—Ü–∏—è, Enter - –≤—ã–±–æ—Ä, Esc - –Ω–∞–∑–∞–¥"
            
        hint_bg = pygame.Surface((int((menu_rect.width - 40) * 0.8), int(30 * scale_factor)), pygame.SRCALPHA)
        hint_bg.fill((0, 0, 0, int(120 * eased_progress)))
        hint_bg_rect = hint_bg.get_rect(center=(menu_rect.centerx, menu_rect.bottom - int(30 * scale_factor)))
        self.screen.blit(hint_bg, hint_bg_rect)
        
        hint = self.small_font.render(hint_text, True, MENU_TEXT)
        hint_rect = hint.get_rect(center=(menu_rect.centerx, menu_rect.bottom - int(30 * scale_factor)))
        self.screen.blit(hint, hint_rect)
        
    def _ease_out_cubic(self, t: float) -> float:
        """Easing —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏."""
        return 1 - pow(1 - t, 3)
        
    def get_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã."""
        return self.game_settings.copy()
        
    def set_settings(self, settings: Dict[str, Any]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã."""
        self.game_settings.update(settings)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–º—ã
        if "theme" in settings:
            try:
                self.theme_index = self.available_themes.index(settings["theme"])
            except ValueError:
                self.theme_index = 0
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        for item in self.settings_menu_items:
            if item["action"] == "toggle_side":
                item["text"] = f"–°—Ç–æ—Ä–æ–Ω–∞: {self._get_side_text()}"
            elif item["action"] == "change_difficulty":
                item["text"] = f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.game_settings['skill_level']}"
            elif item["action"] == "change_theme":
                item["text"] = f"–¢–µ–º–∞: {self.game_settings['theme']}"

    def _delete_game_file(self, filename: str) -> str:
        """–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É –∏–∑ —Ñ–∞–π–ª–∞."""
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –≤ ChessGame
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –∏–≥—Ä—ã
        return f"delete_game_{filename}"