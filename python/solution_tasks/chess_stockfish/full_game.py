#!/usr/bin/env python3
"""
chess_stockfish ‚Äî –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —à–∞—Ö–º–∞—Ç–Ω–∞—è –∏–≥—Ä–∞ —Å–æ Stockfish

–û–ø–∏—Å–∞–Ω–∏–µ:
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —à–∞—Ö–º–∞—Ç–Ω–∞—è –∏–≥—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–≤–∏–∂–∫–∞ Stockfish.
    –ò–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ—Ä–æ–Ω—É (–±–µ–ª—ã–µ/—á—ë—Ä–Ω—ã–µ) –∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (0-20).
    –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è.
    
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - pygame: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ UI
    - stockfish: –®–∞—Ö–º–∞—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫
    
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
    pip install pygame stockfish
    
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Stockfish:
    Windows: https://stockfishchess.org/download/
    Linux: sudo apt-get install stockfish
    macOS: brew install stockfish
    
–ó–∞–ø—É—Å–∫:
    python main.py

–ê–≤—Ç–æ—Ä: Maestro7IT Education
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

import pygame
from typing import Optional, Tuple, List
import time
import os
from stockfish import Stockfish


# ============================================================================
# CONSTANTS & CONFIGURATION
# ============================================================================

BOARD_SIZE = 512
SQUARE_SIZE = BOARD_SIZE // 8

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–æ—Å–∫–∏
LIGHT_SQUARE = (240, 217, 181)
DARK_SQUARE = (181, 136, 99)
HIGHLIGHT_COLOR = (124, 252, 0, 180)
LAST_MOVE_COLOR = (205, 210, 106, 150)
CHECK_COLOR = (255, 0, 0, 180)

# Initialize fonts after pygame.init() is called
FONT = None
SMALL_FONT = None

def init_fonts():
    """Initialize fonts after pygame is initialized."""
    global FONT, SMALL_FONT
    try:
        FONT = pygame.font.SysFont('Segoe UI Symbol', SQUARE_SIZE - 10)
        SMALL_FONT = pygame.font.SysFont('Arial', 14)
    except Exception:
        FONT = pygame.font.SysFont('Arial', SQUARE_SIZE - 10)
        SMALL_FONT = pygame.font.SysFont('Arial', 14)

# Unicode —Å–∏–º–≤–æ–ª—ã —Ñ–∏–≥—É—Ä
PIECE_UNICODE = {
    'P': '‚ôô', 'N': '‚ôò', 'B': '‚ôó', 'R': '‚ôñ', 'Q': '‚ôï', 'K': '‚ôî',
    'p': '‚ôü', 'n': '‚ôû', 'b': '‚ôù', 'r': '‚ôú', 'q': '‚ôõ', 'k': '‚ôö'
}


# ============================================================================
# engine/stockfish_wrapper.py
# ============================================================================

"""
–ú–æ–¥—É–ª—å: engine/stockfish_wrapper.py

–û–ø–∏—Å–∞–Ω–∏–µ:
    –°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å StockfishWrapper –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —à–∞—Ö–º–∞—Ç–Ω—ã–º –¥–≤–∏–∂–∫–æ–º Stockfish.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
    - –ü–æ–ª—É—á–µ–Ω–∏—è —Ö–æ–¥–æ–≤ –∏ –ª—É—á—à–∏—Ö —Ö–æ–¥–æ–≤
    - –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ö–æ–¥–æ–≤
    - –ê–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ü–µ–Ω–∫–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    - –û–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –æ—à–∏–±–æ–∫
"""


class StockfishWrapper:
    """
    –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ Stockfish —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
        engine (Stockfish): –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ Stockfish
        skill_level (int): –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (0-20)
        depth (int): –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
    """
    
    def __init__(self, skill_level=5, depth=15, path=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stockfish –¥–≤–∏–∂–∫–∞.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            skill_level (int): –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (0-20), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5
            depth (int): –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15
            path (str): –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Stockfish (–µ—Å–ª–∏ None, –∏—â–µ—Ç –≤ PATH)
            
        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
            RuntimeError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Stockfish
        """
        self.skill_level = max(0, min(20, skill_level))
        self.depth = depth
        self.move_count = 0
        
        try:
            if path is not None:
                self.engine = Stockfish(path=path)
            else:
                self.engine = Stockfish()
            self.engine.set_skill_level(self.skill_level)
            self.engine.set_depth(self.depth)
        except Exception as e:
            raise RuntimeError(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Stockfish: {e}")
    
    def get_board_state(self) -> List[List[Optional[str]]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏ (8x8).
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            List[List[Optional[str]]]: 2D –º–∞—Å—Å–∏–≤ —Ñ–∏–≥—É—Ä –∏–ª–∏ None
        """
        fen = self.engine.get_fen_position()
        board_str = fen.split()[0]
        rows = board_str.split('/')
        board = []
        for row in rows:
            new_row = []
            for char in row:
                if char.isdigit():
                    new_row.extend([None] * int(char))
                else:
                    new_row.append(char)
            board.append(new_row)
        return board
    
    def is_move_correct(self, uci_move: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏."""
        try:
            return self.engine.is_move_correct(uci_move)
        except Exception:
            return False
    
    def make_move(self, uci_move: str) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏."""
        if not self.is_move_correct(uci_move):
            return False
        try:
            self.engine.make_moves_from_current_position([uci_move])
            self.move_count += 1
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö–æ–¥–∞ {uci_move}: {e}")
            return False
    
    def get_best_move(self, depth: Optional[int] = None) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–∏–π —Ö–æ–¥ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏."""
        try:
            old_depth = None
            if depth:
                old_depth = self.engine.depth
                self.engine.set_depth(depth)
            move = self.engine.get_best_move()
            if depth and old_depth is not None:
                self.engine.set_depth(int(old_depth))
            return move
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–æ–¥–∞: {e}")
            return None
    
    def get_side_to_move(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç, —á–µ–π —Ö–æ–¥ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ ('w' –∏–ª–∏ 'b')."""
        return self.engine.get_fen_position().split()[1]
    
    def is_game_over(self) -> Tuple[bool, Optional[str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞ –∏ –ø—Ä–∏—á–∏–Ω—É –æ–∫–æ–Ω—á–∞–Ω–∏—è."""
        try:
            # Use the get_evaluation method to determine game state
            fen = self.engine.get_fen_position()
            board_state = fen.split()[0]
            
            # Check for mate using evaluation
            eval_result = self.engine.get_evaluation()
            if eval_result and eval_result['type'] == 'mate':
                side = self.get_side_to_move()
                winner = "—á—ë—Ä–Ω—ã–µ" if side == 'w' else "–±–µ–ª—ã–µ"
                return True, f"üèÜ –®–∞—Ö –∏ –º–∞—Ç! –ü–æ–±–µ–¥–∏–ª–∏ {winner}"
            
            # Check for stalemate by seeing if there are any legal moves
            # If evaluation is very low and no legal moves, it's stalemate
            if eval_result and eval_result['type'] == 'cp' and abs(eval_result['value']) < 10000:
                # Try to get a move - if none exists, it's stalemate
                move = self.engine.get_best_move()
                if move is None:
                    return True, "ü§ù –ü–∞—Ç! –ù–∏—á—å—è"
            
            # Check for insufficient material
            pieces = [p for p in board_state if p.lower() in 'pnbrqk']
            white_pieces = [p for p in pieces if p.isupper()]
            black_pieces = [p for p in pieces if p.islower()]
            
            # King vs King
            if len(white_pieces) == 1 and len(black_pieces) == 1:
                return True, "ü§ù –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –º–∞—Ç–∞. –ù–∏—á—å—è"
            
            # King + Bishop vs King or King + Knight vs King
            if (len(white_pieces) <= 2 and len(black_pieces) == 1) or (len(white_pieces) == 1 and len(black_pieces) <= 2):
                # Check if the extra pieces are only bishops or knights
                extra_pieces = []
                if len(white_pieces) > 1:
                    extra_pieces.extend([p for p in white_pieces if p.upper() in 'BN'])
                if len(black_pieces) > 1:
                    extra_pieces.extend([p for p in black_pieces if p.upper() in 'BN'])
                
                if len(extra_pieces) <= 1:  # Only one bishop or knight extra
                    return True, "ü§ù –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –º–∞—Ç–∞. –ù–∏—á—å—è"
        except Exception:
            pass
        
        return False, None
    
    def get_fen(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ FEN."""
        return self.engine.get_fen_position()
    
    def get_evaluation(self) -> Optional[float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–µ—à–∫–∞—Ö."""
        try:
            eval_score = self.engine.get_evaluation()
            if eval_score and 'value' in eval_score:
                return eval_score['value'] / 100.0
        except Exception:
            pass
        return None
    
    def reset_board(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–æ—Å–∫—É –≤ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é."""
        try:
            start_fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'
            self.engine.set_fen_position(start_fen)
            self.move_count = 0
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–æ—Å–∫–∏: {e}")
    
    def quit(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Stockfish."""
        # Newer versions of stockfish library don't have quit method
        # The engine will be automatically cleaned up when the object is destroyed
        try:
            # Try to quit if the method exists
            if hasattr(self.engine, 'quit'):
                # self.engine.quit()  # Removed due to compatibility issues
                pass
        except Exception:
            pass


# ============================================================================
# ui/board_renderer.py
# ============================================================================

"""
–ú–æ–¥—É–ª—å: ui/board_renderer.py

–û–ø–∏—Å–∞–Ω–∏–µ:
    –°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å BoardRenderer –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ –≤ Pygame.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–µ—Ç–æ–∫, —Ñ–∏–≥—É—Ä, –≤—ã–¥–µ–ª–µ–Ω–∏–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
"""


class BoardRenderer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
        screen (pygame.Surface): –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        player_color (str): –°—Ç–æ—Ä–æ–Ω–∞, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –∏–≥—Ä–∞–µ—Ç –∏–≥—Ä–æ–∫
        selected_square (Tuple): –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–ª–µ—Ç–∫–∞
        last_move (Tuple): –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Ö–æ–¥
    """
    
    def __init__(self, screen: pygame.Surface, player_color: str = 'white'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞ –¥–æ—Å–∫–∏."""
        self.screen = screen
        self.player_color = player_color
        self.selected_square = None
        self.last_move = None
        self.check_square = None
        self.show_coords = True
    
    def set_selected(self, square: Tuple[int, int]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É."""
        self.selected_square = square
    
    def clear_selected(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É."""
        self.selected_square = None
    
    def set_last_move(self, from_sq: Tuple[int, int], to_sq: Tuple[int, int]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–¥–µ–ª–∞–Ω–Ω—ã–π —Ö–æ–¥ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è."""
        self.last_move = (from_sq, to_sq)
    
    def set_check(self, square: Optional[Tuple[int, int]]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–µ—Ç–∫—É –∫–æ—Ä–æ–ª—è –≤ —à–∞—Ö–µ."""
        self.check_square = square
    
    def _fen_to_display(self, row: int, col: int) -> Tuple[int, int]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç FEN-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã."""
        if self.player_color == 'black':
            return 7 - row, 7 - col
        return row, col
    
    def _display_to_fen(self, disp_row: int, disp_col: int) -> Tuple[int, int]:
        """–û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ FEN."""
        if self.player_color == 'black':
            return 7 - disp_row, 7 - disp_col
        return disp_row, disp_col
    
    def draw(self, board_state: List[List[Optional[str]]], 
             evaluation: Optional[float] = None, 
             thinking: bool = False):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏ –∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
        for row in range(8):
            for col in range(8):
                disp_row, disp_col = self._fen_to_display(row, col)
                
                # –ë–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –∫–ª–µ—Ç–∫–∏
                color = LIGHT_SQUARE if (row + col) % 2 == 0 else DARK_SQUARE
                rect = pygame.Rect(disp_col * SQUARE_SIZE, disp_row * SQUARE_SIZE, 
                                   SQUARE_SIZE, SQUARE_SIZE)
                pygame.draw.rect(self.screen, color, rect)
                
                # –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ (–∂—ë–ª—Ç–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞)
                if self.last_move:
                    if (row, col) in self.last_move:
                        highlight = pygame.Surface((SQUARE_SIZE, SQUARE_SIZE), pygame.SRCALPHA)
                        highlight.fill(LAST_MOVE_COLOR)
                        self.screen.blit(highlight, rect.topleft)
                
                # –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–∏ (–∑–µ–ª—ë–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞)
                if self.selected_square == (row, col):
                    highlight = pygame.Surface((SQUARE_SIZE, SQUARE_SIZE), pygame.SRCALPHA)
                    highlight.fill(HIGHLIGHT_COLOR)
                    self.screen.blit(highlight, rect.topleft)
                
                # –í—ã–¥–µ–ª–µ–Ω–∏–µ —à–∞—Ö–∞ (–∫—Ä–∞—Å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞)
                if self.check_square == (row, col):
                    highlight = pygame.Surface((SQUARE_SIZE, SQUARE_SIZE), pygame.SRCALPHA)
                    highlight.fill(CHECK_COLOR)
                    self.screen.blit(highlight, rect.topleft)
                
                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–∏–≥—É—Ä
                piece = board_state[row][col]
                if piece and FONT is not None:
                    text_color = (255, 255, 255) if piece.isupper() else (0, 0, 0)
                    try:
                        text = FONT.render(PIECE_UNICODE[piece], True, text_color)
                    except KeyError:
                        text = FONT.render(piece, True, text_color)
                    text_rect = text.get_rect(center=rect.center)
                    self.screen.blit(text, text_rect)
                
                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                if self.show_coords and SMALL_FONT is not None:
                    if disp_col == 0:
                        rank_text = SMALL_FONT.render(str(8 - row), True, (100, 100, 100))
                        self.screen.blit(rank_text, (disp_col * SQUARE_SIZE + 2, 
                                                     disp_row * SQUARE_SIZE + 2))
                    if disp_row == 7:
                        file_text = SMALL_FONT.render(chr(97 + col), True, (100, 100, 100))
                        self.screen.blit(file_text, (disp_col * SQUARE_SIZE + SQUARE_SIZE - 12, 
                                                     disp_row * SQUARE_SIZE + SQUARE_SIZE - 14))
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if evaluation is not None and SMALL_FONT is not None:
            eval_text = f"–û—Ü–µ–Ω–∫–∞: {evaluation:+.1f}"
            color = (100, 255, 100) if evaluation > 0 else (255, 100, 100)
            text_surface = SMALL_FONT.render(eval_text, True, color)
            self.screen.blit(text_surface, (10, 10))
        
        if thinking and SMALL_FONT is not None:
            thinking_text = SMALL_FONT.render("‚ü≥ –ö–æ–º–ø—å—é—Ç–µ—Ä –¥—É–º–∞–µ—Ç...", True, (255, 200, 0))
            self.screen.blit(thinking_text, (BOARD_SIZE - 200, 10))


# ============================================================================
# game/chess_game.py
# ============================================================================

"""
–ú–æ–¥—É–ª—å: game/chess_game.py

–û–ø–∏—Å–∞–Ω–∏–µ:
    –°–æ–¥–µ—Ä–∂–∏—Ç –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å ChessGame, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º.
"""


class ChessGame:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–¥–æ–º –∏–≥—Ä—ã."""
    
    def __init__(self, player_color: str = 'white', skill_level: int = 5):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã."""
        self.player_color = player_color
        self.ai_color = 'black' if player_color == 'white' else 'white'
        self.skill_level = skill_level
        
        try:
            self.engine = StockfishWrapper(skill_level=skill_level)
        except RuntimeError as e:
            raise e
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame UI
        self.screen = pygame.display.set_mode((BOARD_SIZE, BOARD_SIZE + 100))
        pygame.display.set_caption(f"‚ôüÔ∏è  chess_stockfish ‚Äî Maestro7IT (—É—Ä–æ–≤–µ–Ω—å {skill_level})")
        
        self.renderer = BoardRenderer(self.screen, player_color)
        self.clock = pygame.time.Clock()
        self.running = True
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self.move_history = []
        self.thinking = False
        self.game_over = False
        self.game_over_reason = None
        self.last_move_time = 0
        self.ai_move_delay = 0.7
    
    def _coord_to_fen_square(self, x: int, y: int) -> Optional[Tuple[int, int]]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –≤ FEN –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã."""
        if y > BOARD_SIZE:
            return None
        disp_row = y // SQUARE_SIZE
        disp_col = x // SQUARE_SIZE
        if disp_row >= 8 or disp_col >= 8:
            return None
        row, col = self.renderer._display_to_fen(disp_row, disp_col)
        return (row, col)
    
    def _fen_square_to_uci(self, row: int, col: int) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç FEN –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ UCI —Ñ–æ—Ä–º–∞—Ç."""
        return chr(ord('a') + col) + str(8 - row)
    
    def _is_player_turn(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —Ö–æ–¥ —Ö–æ–¥–æ–º –∏–≥—Ä–æ–∫–∞."""
        side = self.engine.get_side_to_move()
        return (
            (self.player_color == 'white' and side == 'w') or
            (self.player_color == 'black' and side == 'b')
        )
    
    def _is_player_piece(self, piece: Optional[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ñ–∏–≥—É—Ä–∞ –∏–≥—Ä–æ–∫—É."""
        if not piece:
            return False
        is_white = piece.isupper()
        return (self.player_color == 'white') == is_white
    
    def handle_click(self, x: int, y: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –¥–æ—Å–∫–µ."""
        if self.game_over or self.thinking or not self._is_player_turn():
            return
        
        coords = self._coord_to_fen_square(x, y)
        if coords is None:
            return
        
        row, col = coords
        board = self.engine.get_board_state()
        piece = board[row][col]
        
        if self._is_player_piece(piece):
            self.renderer.set_selected((row, col))
        elif self.renderer.selected_square:
            from_sq = self.renderer.selected_square
            to_sq = (row, col)
            
            uci_move = (self._fen_square_to_uci(*from_sq) + 
                       self._fen_square_to_uci(*to_sq))
            
            if self.engine.is_move_correct(uci_move):
                if self.engine.make_move(uci_move):
                    self.move_history.append(uci_move)
                    self.renderer.set_last_move(from_sq, to_sq)
                    self.renderer.clear_selected()
                    self.last_move_time = time.time()
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–æ–¥")
            else:
                self.renderer.clear_selected()
    
    def handle_ai_move(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–æ–¥ –ò–ò."""
        if self._is_player_turn() or self.game_over or self.thinking:
            return
        
        if time.time() - self.last_move_time < self.ai_move_delay:
            return
        
        self.thinking = True
        ai_move = self.engine.get_best_move(depth=self.skill_level + 10)
        self.thinking = False
        
        if ai_move:
            self.engine.make_move(ai_move)
            self.move_history.append(ai_move)
            
            from_col = ord(ai_move[0]) - ord('a')
            from_row = 8 - int(ai_move[1])
            to_col = ord(ai_move[2]) - ord('a')
            to_row = 8 - int(ai_move[3])
            self.renderer.set_last_move((from_row, from_col), (to_row, to_col))
            self.last_move_time = time.time()
    
    def check_game_state(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã."""
        is_over, reason = self.engine.is_game_over()
        if is_over:
            self.game_over = True
            self.game_over_reason = reason
            return True
        return False
    
    def draw_ui(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        info_rect = pygame.Rect(0, BOARD_SIZE, BOARD_SIZE, 100)
        pygame.draw.rect(self.screen, (50, 50, 50), info_rect)
        pygame.draw.line(self.screen, (100, 100, 100), (0, BOARD_SIZE), (BOARD_SIZE, BOARD_SIZE), 2)
        
        if SMALL_FONT is not None:
            if self.game_over:
                text = SMALL_FONT.render(self.game_over_reason, True, (255, 100, 100))
                self.screen.blit(text, (20, BOARD_SIZE + 15))
                restart_text = SMALL_FONT.render("–ù–∞–∂–º–∏—Ç–µ 'R' –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã", True, (200, 200, 200))
                self.screen.blit(restart_text, (20, BOARD_SIZE + 50))
            else:
                if self._is_player_turn():
                    status = "üéÆ –í–∞—à —Ö–æ–¥"
                    status_color = (100, 255, 100)
                else:
                    status = "ü§ñ –•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"
                    status_color = (100, 150, 255)
                
                text = SMALL_FONT.render(status, True, status_color)
                self.screen.blit(text, (20, BOARD_SIZE + 15))
                
                moves_text = SMALL_FONT.render(f"–•–æ–¥–æ–≤: {len(self.move_history)}", True, (200, 200, 200))
                self.screen.blit(moves_text, (20, BOARD_SIZE + 50))
                
                level_text = SMALL_FONT.render(f"–£—Ä–æ–≤–µ–Ω—å: {self.skill_level}/20", True, (200, 200, 200))
                self.screen.blit(level_text, (BOARD_SIZE - 150, BOARD_SIZE + 15))
    
    def get_game_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã."""
        return {
            'player_color': self.player_color,
            'ai_color': self.ai_color,
            'skill_level': self.skill_level,
            'total_moves': len(self.move_history),
            'move_history': self.move_history.copy(),
            'fen': self.engine.get_fen(),
            'game_over': self.game_over,
            'game_reason': self.game_over_reason
        }
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã."""
        print(f"\n{'='*60}")
        print(f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
        print(f"   –í—ã –∏–≥—Ä–∞–µ—Ç–µ: {self.player_color.upper()}")
        print(f"   –ö–æ–º–ø—å—é—Ç–µ—Ä: {self.ai_color.upper()}")
        print(f"   –£—Ä–æ–≤–µ–Ω—å: {self.skill_level}/20")
        print(f"   –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: R - –Ω–æ–≤–∞—è –∏–≥—Ä–∞, ESC - –≤—ã—Ö–æ–¥")
        print(f"{'='*60}\n")
        
        while self.running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    self.running = False
                elif event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
                    x, y = pygame.mouse.get_pos()
                    self.handle_click(x, y)
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_r:
                        print("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞...")
                        self.__init__(self.player_color, self.skill_level)
                    elif event.key == pygame.K_ESCAPE:
                        self.running = False
            
            self.screen.fill((0, 0, 0))
            board = self.engine.get_board_state()
            evaluation = self.engine.get_evaluation()
            self.renderer.draw(board, evaluation, self.thinking)
            self.draw_ui()
            pygame.display.flip()
            
            if not self.game_over:
                self.check_game_state()
                self.handle_ai_move()
            
            self.clock.tick(60)
        
        stats = self.get_game_stats()
        print(f"\n{'='*60}")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:")
        print(f"   –í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: {stats['total_moves']}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {stats['game_reason']}")
        print(f"{'='*60}\n")
        
        self.engine.quit()


# ============================================================================
# game/menu.py
# ============================================================================

"""
–ú–æ–¥—É–ª—å: game/menu.py

–û–ø–∏—Å–∞–Ω–∏–µ:
    –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–≥—Ä—ã.
"""


def show_difficulty_guide():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ Stockfish."""
    print("\nüìö –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ Stockfish:")
    print("   0-5   : –õ—é–±–∏—Ç–µ–ª—å (–Ω–∞—á–∏–Ω–∞—é—â–∏–π –º–æ–∂–µ—Ç –ø–æ–±–µ–¥–∏—Ç—å)")
    print("   6-10  : –°—Ä–µ–¥–Ω–∏–π (–æ–ø—ã—Ç–Ω—ã–π –ª—é–±–∏—Ç–µ–ª—å)")
    print("   11-15 : –°–∏–ª—å–Ω—ã–π (–º–∞—Å—Ç–µ—Ä)")
    print("   16-20 : –ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä (—á–µ–º–ø–∏–æ–Ω)")
    print()


def main_menu() -> Tuple[str, int]:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–≥—Ä—ã."""
    print("\n" + "="*70)
    print("‚ôüÔ∏è  chess_stockfish ‚Äî –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø ‚Äî Maestro7IT Education")
    print("="*70)
    print("\nüéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä —Å–æ Stockfish!\n")
    print("‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏:")
    print("   ‚úì –û—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("   ‚úì –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ö–æ–¥–æ–≤")
    print("   ‚úì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
    print("   ‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω (–±–µ–ª—ã–µ/—á—ë—Ä–Ω—ã–µ)")
    print("   ‚úì –†–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (0-20)")
    print("   ‚úì –ò—Å—Ç–æ—Ä–∏—è —Ö–æ–¥–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–π")
    print("   ‚úì –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n")
    
    show_difficulty_guide()
    
    # –í—ã–±–æ—Ä —Å—Ç–æ—Ä–æ–Ω—ã
    while True:
        side_input = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É (white/w, black/b): ").strip().lower()
        if side_input in ('white', 'w'):
            player_color = 'white'
            break
        elif side_input in ('black', 'b'):
            player_color = 'black'
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –í–≤–µ–¥–∏—Ç–µ 'white' (–∏–ª–∏ 'w') –∏–ª–∏ 'black' (–∏–ª–∏ 'b')")
    
    # –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    while True:
        try:
            level_input = input("\n–£—Ä–æ–≤–µ–Ω—å Stockfish (0-20, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-10): ").strip()
            if level_input == '':
                level = 5
                break
            level = int(level_input)
            if 0 <= level <= 20:
                break
            else:
                print("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 20")
        except ValueError:
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 20")
    
    print(f"\n‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è:")
    print(f"   –í—ã: {player_color.upper()}")
    print(f"   –ü–ö: {('BLACK' if player_color == 'white' else 'WHITE')}")
    print(f"   –£—Ä–æ–≤–µ–Ω—å: {level}/20")
    print(f"\n{'='*70}\n")
    
    return player_color, level


# ============================================================================
# main.py
# ============================================================================

"""
–ú–æ–¥—É–ª—å: main.py

–û–ø–∏—Å–∞–Ω–∏–µ:
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ chess_stockfish.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Pygame, –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–Ω—é –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É.
"""


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Pygame, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö.
    """
    pygame.init()
    
    # Initialize fonts
    init_fonts()
    
    try:
        player_color, skill_level = main_menu()
        game = ChessGame(player_color=player_color, skill_level=skill_level)
        game.run()
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
        # stats = GameStatistics()
        # stats.save_game(game.get_game_stats())
        
    except RuntimeError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüí° –†–ï–®–ï–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Stockfish —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É:")
        print("\n   Windows:")
        print("      1. –°–∫–∞—á–∞–π—Ç–µ —Å https://stockfishchess.org/download/")
        print("      2. –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–π—Ç–µ stockfish.exe –≤ C:\\Program Files\\stockfish\\")
        print("      3. –î–æ–±–∞–≤—å—Ç–µ –≤ PATH –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –≤ –∫–æ–¥–µ\n")
        print("   Linux/macOS:")
        print("      Linux:  sudo apt-get install stockfish")
        print("      macOS:  brew install stockfish\n")
        
    except KeyboardInterrupt:
        print("\n\nüëã –ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        pygame.quit()
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ\n")


if __name__ == "__main__":
    main()