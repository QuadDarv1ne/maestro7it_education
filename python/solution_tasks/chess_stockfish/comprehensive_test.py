#!/usr/bin/env python3
"""
Comprehensive test for chess_stockfish improvements
"""

import pygame
from engine.stockfish_wrapper import StockfishWrapper
from game.chess_game import ChessGame

def test_pawn_movement_rules():
    """Test pawn movement rules and user feedback"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –¥–≤–∏–∂–µ–Ω–∏—è –ø–µ—à–∫–∏ ===")
    
    try:
        # Initialize engine
        engine = StockfishWrapper(skill_level=1)
        
        # Test initial position
        print("–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:")
        fen = engine.get_fen()
        print(f"FEN: {fen}")
        
        # Test valid pawn moves from starting position
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ö–æ–¥–æ–≤ –ø–µ—à–∫–∏ —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏:")
        valid_moves = ["e2e4", "e2e3", "d2d4", "d2d3"]
        for move in valid_moves:
            is_correct = engine.is_move_correct(move)
            print(f"  {move}: {'‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' if is_correct else '‚úó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'}")
        
        # Test invalid pawn moves from starting position
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ö–æ–¥–æ–≤ –ø–µ—à–∫–∏ —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏:")
        invalid_moves = ["e2e5", "e2e6", "d2d5", "d2d6"]
        for move in invalid_moves:
            is_correct = engine.is_move_correct(move)
            print(f"  {move}: {'‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' if is_correct else '‚úó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'}")
        
        # Make a move and test pawn movement from non-starting position
        print("\n–í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥ e2e4...")
        engine.make_move("e2e4")
        
        print("–ü–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ e2e4:")
        fen = engine.get_fen()
        print(f"FEN: {fen}")
        
        # Test pawn moves from non-starting position
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ–¥–æ–≤ –ø–µ—à–∫–∏ –ù–ï —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏:")
        moves_from_e4 = ["e4e5", "e4e6"]  # e5 should be valid, e6 should be invalid
        for move in moves_from_e4:
            is_correct = engine.is_move_correct(move)
            status = '‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' if is_correct else '‚úó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π'
            reason = ""
            if move == "e4e6":
                reason = " (–ø–µ—à–∫–∞ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É –≤–ø–µ—Ä–µ–¥)"
            print(f"  {move}: {status}{reason}")
        
        engine.quit()
        print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª –¥–≤–∏–∂–µ–Ω–∏—è –ø–µ—à–∫–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –¥–≤–∏–∂–µ–Ω–∏—è –ø–µ—à–∫–∏: {e}")
        return False
    
    return True

def test_coordinate_conversion():
    """Test coordinate conversion"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ===")
    
    try:
        pygame.init()
        screen = pygame.display.set_mode((512, 512))
        
        # Test white perspective
        print("–ë–µ–ª–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞:")
        from game.chess_game import ChessGame
        game = ChessGame(player_color='white', skill_level=1)
        
        # Test some coordinate conversions
        test_coords = [(0, 0), (0, 7), (7, 0), (7, 7)]
        for row, col in test_coords:
            uci = chr(ord('a') + col) + str(8 - row)
            print(f"  FEN ({row},{col}) -> UCI {uci}")
        
        game.engine.quit()
        pygame.quit()
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return False
    
    return True

def test_user_feedback():
    """Test user feedback mechanisms"""
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ===")
    
    try:
        # Test the _get_move_hint method
        from game.chess_game import ChessGame
        game = ChessGame(player_color='white', skill_level=1)
        
        # Test pawn hint for invalid two-square move from non-starting position
        hint = game._get_move_hint(4, 4, 2, 4)  # e4 to e6 (2 squares forward from e4)
        print(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ö–æ–¥–∞ –ø–µ—à–∫–∏ –Ω–∞ –¥–≤–µ –∫–ª–µ—Ç–∫–∏ –≤–ø–µ—Ä–µ–¥ –Ω–µ —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏: {hint}")
        
        # Test pawn hint for backward move
        hint = game._get_move_hint(4, 4, 5, 4)  # e4 to e5 (backward for white pawn)
        print(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è —Ö–æ–¥–∞ –ø–µ—à–∫–∏ –Ω–∞–∑–∞–¥: {hint}")
        
        game.engine.quit()
        print("‚úÖ –¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        return False
    
    return True

def main():
    """Run all tests"""
    print(" chess_stockfish - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ")
    print("=" * 45)
    
    tests = [
        test_pawn_movement_rules,
        test_coordinate_conversion,
        test_user_feedback
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
            results.append(False)
    
    # Summary
    print("\n" + "=" * 45)
    if all(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–£–ª—É—á—à–µ–Ω–∏—è –≤ chess_stockfish —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 0
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return 1

if __name__ == "__main__":
    exit(main())