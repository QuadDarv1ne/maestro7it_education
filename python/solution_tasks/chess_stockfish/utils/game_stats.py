# ============================================================================
# utils/game_stats.py
# ============================================================================

"""
–ú–æ–¥—É–ª—å: utils/game_stats.py

–û–ø–∏—Å–∞–Ω–∏–µ:
    –°–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç:
    - –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä
    - –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—ã –≤ PGN
    
–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    - –ê–Ω–∞–ª–∏–∑ –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π
    - –≠–∫—Å–ø–æ—Ä—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
"""

import json
from datetime import datetime
import os
from typing import List, Dict, Optional


class GameStatistics:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–≥—Ä.
    
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏—è—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
    """
    
    def __init__(self, stats_file: str = 'game_stats.json'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            stats_file (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        self.stats_file = stats_file
        self.stats = self._load_stats()
    
    def _load_stats(self) -> dict:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
        """
        if os.path.exists(self.stats_file):
            try:
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                return {'games': [], 'total_wins': 0, 'total_losses': 0, 'total_draws': 0}
        return {'games': [], 'total_wins': 0, 'total_losses': 0, 'total_draws': 0}
    
    def save_game(self, game_stats: dict):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            game_stats (dict): –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã –æ—Ç ChessGame.get_game_stats()
        """
        game_record = {
            'timestamp': datetime.now().isoformat(),
            'player_color': game_stats['player_color'],
            'skill_level': game_stats['skill_level'],
            'total_moves': game_stats['total_moves'],
            'result': game_stats['game_reason'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            'fen': game_stats['fen']
        }
        
        self.stats['games'].append(game_record)
        
        # –û–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç –ø–æ–±–µ–¥/–ø–æ—Ä–∞–∂–µ–Ω–∏–π/–Ω–∏—á—å–∏—Ö
        if game_stats['game_reason']:
            if '–ü–æ–±–µ–¥–∏–ª–∏' in game_stats['game_reason']:
                if f"–ü–æ–±–µ–¥–∏–ª–∏ {game_stats['player_color']}" in game_stats['game_reason']:
                    self.stats['total_wins'] += 1
                else:
                    self.stats['total_losses'] += 1
            elif '–ü–∞—Ç' in game_stats['game_reason'] or '–ù–∏—á—å—è' in game_stats['game_reason']:
                self.stats['total_draws'] += 1
            else:
                # Other result, count as loss
                self.stats['total_losses'] += 1
        else:
            # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å—á–∏—Ç–∞–µ–º –ø–æ—Ä–∞–∂–µ–Ω–∏–µ–º
            self.stats['total_losses'] += 1
        
        self._save_stats()
    
    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª."""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if os.path.exists(self.stats_file):
                backup_file = self.stats_file + '.backup'
                import shutil
                shutil.copy2(self.stats_file, backup_file)
            
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def get_summary(self) -> dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            dict: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –∏–≥—Ä–∞–º
        """
        total_games = len(self.stats['games'])
        return {
            'total_games': total_games,
            'total_wins': self.stats['total_wins'],
            'total_losses': self.stats['total_losses'],
            'total_draws': self.stats['total_draws'],
            'win_rate': (self.stats['total_wins'] / total_games * 100 if total_games > 0 else 0),
            'loss_rate': (self.stats['total_losses'] / total_games * 100 if total_games > 0 else 0),
            'draw_rate': (self.stats['total_draws'] / total_games * 100 if total_games > 0 else 0)
        }
    
    def get_games_by_color(self, color: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ü–≤–µ—Ç.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            color (str): –¶–≤–µ—Ç ('white' –∏–ª–∏ 'black')
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∏–≥—Ä –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
        """
        return [game for game in self.stats['games'] if game['player_color'] == color]
    
    def get_games_by_level(self, level: int) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            level (int): –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (0-20)
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∏–≥—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ
        """
        return [game for game in self.stats['games'] if game['skill_level'] == level]
    
    def get_recent_games(self, count: int = 10) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä
        """
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ count –∏–≥—Ä
        sorted_games = sorted(self.stats['games'], key=lambda x: x['timestamp'], reverse=True)
        return sorted_games[:count]
    
    def get_best_performance(self) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É —Å –ª—É—á—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤).
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Dict: –ò–≥—Ä–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ö–æ–¥–æ–≤ –∏–ª–∏ None
        """
        if not self.stats['games']:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
        if len(self.stats['games']) == 0:
            return None
            
        try:
            return max(self.stats['games'], key=lambda x: x['total_moves'] if isinstance(x, dict) and 'total_moves' in x else 0)
        except ValueError:
            return None
    
    def get_level_performance(self) -> Dict[int, Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Dict[int, Dict]: –°–ª–æ–≤–∞—Ä—å —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∫–∞–∂–¥–æ–º—É —É—Ä–æ–≤–Ω—é
        """
        level_stats = {}
        
        for game in self.stats['games']:
            level = game['skill_level']
            if level not in level_stats:
                level_stats[level] = {'wins': 0, 'losses': 0, 'draws': 0, 'total': 0, 'moves': 0}
            
            level_stats[level]['total'] += 1
            level_stats[level]['moves'] += game['total_moves']
            
            if game['result'] and '–ü–æ–±–µ–¥–∏–ª–∏' in str(game['result']):
                if f"–ü–æ–±–µ–¥–∏–ª–∏ {game['player_color']}" in str(game['result']):
                    level_stats[level]['wins'] += 1
                else:
                    level_stats[level]['losses'] += 1
            elif game['result'] and ('–ü–∞—Ç' in str(game['result']) or '–ù–∏—á—å—è' in str(game['result'])):
                level_stats[level]['draws'] += 1
            else:
                level_stats[level]['losses'] += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        for level in level_stats:
            total = level_stats[level]['total']
            if total > 0:
                level_stats[level]['win_rate'] = level_stats[level]['wins'] / total * 100
                level_stats[level]['avg_moves'] = level_stats[level]['moves'] / total
            else:
                level_stats[level]['win_rate'] = 0
                level_stats[level]['avg_moves'] = 0
        
        return level_stats
    
    def clear_stats(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        self.stats = {'games': [], 'total_wins': 0, 'total_losses': 0, 'total_draws': 0}
        self._save_stats()
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞")