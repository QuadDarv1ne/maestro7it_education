# ============================================================================
# utils/achievements.py
# ============================================================================

"""
–ú–æ–¥—É–ª—å: utils/achievements.py

–û–ø–∏—Å–∞–Ω–∏–µ:
    –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –∏–≥—Ä—ã chess_stockfish.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–∞–≥—Ä–∞–¥ –∑–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –∏–≥—Ä–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
    
–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∏–∑—É—á–µ–Ω–∏–µ –¥–µ–±—é—Ç–æ–≤
    - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –æ—Å–≤–æ–µ–Ω–∏–µ —ç–Ω–¥—à–ø–∏–ª–µ–π
    - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∏–≥—Ä–æ–≤—ã–µ —É—Å–ø–µ—Ö–∏
    - –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞
"""

from typing import Dict, List, Optional, Set
import json
import os

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENTS = {
    # –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    "first_lesson": {
        "name": "–ü–µ—Ä–≤—ã–π —É—Ä–æ–∫",
        "description": "–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É",
        "category": "education",
        "points": 10,
        "icon": "üéì"
    },
    "openings_student": {
        "name": "–°—Ç—É–¥–µ–Ω—Ç –¥–µ–±—é—Ç–æ–≤",
        "description": "–ò–∑—É—á–∏—Ç–µ 5 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–±—é—Ç–æ–≤",
        "category": "education",
        "points": 50,
        "icon": "üìö"
    },
    "openings_master": {
        "name": "–ú–∞—Å—Ç–µ—Ä –¥–µ–±—é—Ç–æ–≤",
        "description": "–ò–∑—É—á–∏—Ç–µ 15 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–±—é—Ç–æ–≤",
        "category": "education",
        "points": 150,
        "icon": "üìñ"
    },
    "endgame_student": {
        "name": "–°—Ç—É–¥–µ–Ω—Ç —ç–Ω–¥—à–ø–∏–ª–µ–π",
        "description": "–ó–∞–≤–µ—Ä—à–∏—Ç–µ 5 —ç–Ω–¥—à–ø–∏–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
        "category": "education",
        "points": 50,
        "icon": "üèÅ"
    },
    "endgame_master": {
        "name": "–ú–∞—Å—Ç–µ—Ä —ç–Ω–¥—à–ø–∏–ª–µ–π",
        "description": "–ó–∞–≤–µ—Ä—à–∏—Ç–µ 15 —ç–Ω–¥—à–ø–∏–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
        "category": "education",
        "points": 150,
        "icon": "‚ôõ"
    },
    "knowledge_seeker": {
        "name": "–ò—Å–∫–∞—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π",
        "description": "–ü–æ–ª—É—á–∏—Ç–µ 50 –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫",
        "category": "education",
        "points": 100,
        "icon": "üí°"
    },
    "strategy_master": {
        "name": "–ú–∞—Å—Ç–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏",
        "description": "–ü–æ–ª—É—á–∏—Ç–µ 200 –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫",
        "category": "education",
        "points": 300,
        "icon": "üß†"
    },
    
    # –ò–≥—Ä–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    "first_game": {
        "name": "–ü–µ—Ä–≤–∞—è –∏–≥—Ä–∞",
        "description": "–°—ã–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø–∞—Ä—Ç–∏—é",
        "category": "gameplay",
        "points": 20,
        "icon": "‚ôüÔ∏è"
    },
    "victory": {
        "name": "–ü–æ–±–µ–¥–∞!",
        "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø–∞—Ä—Ç–∏—é",
        "category": "gameplay",
        "points": 50,
        "icon": "üèÜ"
    },
    "checkmate_master": {
        "name": "–ú–∞—Å—Ç–µ—Ä –º–∞—Ç–∞",
        "description": "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –º–∞—Ç 10 —Ä–∞–∑",
        "category": "gameplay",
        "points": 100,
        "icon": "ü™ì"
    },
    "draw_master": {
        "name": "–ú–∞—Å—Ç–µ—Ä –Ω–∏—á—å–∏—Ö",
        "description": "–°—ã–≥—Ä–∞–π—Ç–µ 20 –Ω–∏—á—å–∏—Ö",
        "category": "gameplay",
        "points": 75,
        "icon": "ü§ù"
    },
    "moves_master": {
        "name": "–ú–∞—Å—Ç–µ—Ä —Ö–æ–¥–æ–≤",
        "description": "–°–¥–µ–ª–∞–π—Ç–µ 1000 —Ö–æ–¥–æ–≤",
        "category": "gameplay",
        "points": 150,
        "icon": "üî¢"
    },
    "captures_master": {
        "name": "–ú–∞—Å—Ç–µ—Ä –∑–∞—Ö–≤–∞—Ç–∞",
        "description": "–°–¥–µ–ª–∞–π—Ç–µ 100 –≤–∑—è—Ç–∏–π",
        "category": "gameplay",
        "points": 120,
        "icon": "‚öîÔ∏è"
    },
    "time_master": {
        "name": "–ú–∞—Å—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–∏",
        "description": "–°—ã–≥—Ä–∞–π—Ç–µ 10 —á–∞—Å–æ–≤",
        "category": "gameplay",
        "points": 200,
        "icon": "‚è∞"
    },
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    "perfect_game": {
        "name": "–ò–¥–µ–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞",
        "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ –ø–∞—Ä—Ç–∏—é –±–µ–∑ –ø–æ—Ç–µ—Ä—å —Ñ–∏–≥—É—Ä",
        "category": "special",
        "points": 200,
        "icon": "‚≠ê"
    },
    "comeback_king": {
        "name": "–ö–æ—Ä–æ–ª—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è",
        "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ –ø–∞—Ä—Ç–∏—é –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞ –±–æ–ª–µ–µ 5 –æ—á–∫–æ–≤",
        "category": "special",
        "points": 150,
        "icon": "üî•"
    },
    "speed_demon": {
        "name": "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ–º–æ–Ω",
        "description": "–í—ã–∏–≥—Ä–∞–π—Ç–µ –ø–∞—Ä—Ç–∏—é –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 10 —Ö–æ–¥–æ–≤",
        "category": "special",
        "points": 100,
        "icon": "‚ö°"
    },
    "patience_master": {
        "name": "–ú–∞—Å—Ç–µ—Ä —Ç–µ—Ä–ø–µ–Ω–∏—è",
        "description": "–°—ã–≥—Ä–∞–π—Ç–µ –ø–∞—Ä—Ç–∏—é –±–æ–ª–µ–µ 100 —Ö–æ–¥–æ–≤",
        "category": "special",
        "points": 75,
        "icon": "üê¢"
    }
}

# –ù–∞–≥—Ä–∞–¥—ã –∑–∞ —É—Ä–æ–≤–Ω–∏
LEVELS = {
    1: {"name": "–ù–æ–≤–∏—á–æ–∫", "points_required": 0, "icon": "üå±"},
    2: {"name": "–£—á–µ–Ω–∏–∫", "points_required": 100, "icon": "üìö"},
    3: {"name": "–°—Ç—É–¥–µ–Ω—Ç", "points_required": 300, "icon": "üéì"},
    4: {"name": "–≠–∫—Å–ø–µ—Ä—Ç", "points_required": 600, "icon": "üî¨"},
    5: {"name": "–ú–∞—Å—Ç–µ—Ä", "points_required": 1000, "icon": "üëë"},
    6: {"name": "–ì—Ä–æ—Å—Å–º–µ–π—Å—Ç–µ—Ä", "points_required": 1500, "icon": "üèÜ"},
    7: {"name": "–õ–µ–≥–µ–Ω–¥–∞", "points_required": 2500, "icon": "üåü"}
}

class AchievementSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —à–∞—Ö–º–∞—Ç–Ω–æ–π –∏–≥—Ä—ã.
    """
    
    def __init__(self, save_file: str = "achievements.json"):
        self.save_file = save_file
        self.achievements = {}  # –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.stats = {
            "educational_hints": 0,
            "openings_learned": set(),
            "endgames_completed": 0,
            "games_played": 0,
            "games_won": 0,
            "checkmates": 0,
            "draws": 0,
            "moves_made": 0,
            "captures": 0,
            "time_played": 0,  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            "perfect_games": 0,
            "comeback_wins": 0,
            "short_games": 0,  # –º–µ–Ω–µ–µ 10 —Ö–æ–¥–æ–≤
            "long_games": 0    # –±–æ–ª–µ–µ 100 —Ö–æ–¥–æ–≤
        }
        self.total_points = 0
        self.level = 1
        self.unlocked_achievements = set()
        self.new_achievements = []  # –ù–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.load_achievements()
    
    def load_achievements(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            if os.path.exists(self.save_file):
                with open(self.save_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.achievements = data.get('achievements', {})
                    self.stats = data.get('stats', self.stats)
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è openings_learned
                    if 'openings_learned' in self.stats:
                        self.stats['openings_learned'] = set(self.stats['openings_learned'])
                    self.total_points = data.get('total_points', 0)
                    self.level = data.get('level', 1)
                    self.unlocked_achievements = set(data.get('unlocked_achievements', []))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
    
    def save_achievements(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            stats_to_save = self.stats.copy()
            if 'openings_learned' in stats_to_save:
                stats_to_save['openings_learned'] = list(stats_to_save['openings_learned'])
            
            data = {
                'achievements': self.achievements,
                'stats': stats_to_save,
                'total_points': self.total_points,
                'level': self.level,
                'unlocked_achievements': list(self.unlocked_achievements)
            }
            
            with open(self.save_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
    
    def get_achievement_info(self, achievement_id: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            achievement_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∏–ª–∏ None
        """
        return ACHIEVEMENTS.get(achievement_id)
    
    def get_all_achievements(self) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Dict: –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        """
        return ACHIEVEMENTS.copy()
    
    def get_unlocked_achievements(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            List[Dict]: –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        """
        unlocked = []
        for achievement_id in self.unlocked_achievements:
            info = self.get_achievement_info(achievement_id)
            if info:
                unlocked.append({
                    "id": achievement_id,
                    "info": info,
                    "unlocked_at": self.achievements.get(achievement_id)
                })
        return unlocked
    
    def get_locked_achievements(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            List[Dict]: –°–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        """
        locked = []
        for achievement_id, info in ACHIEVEMENTS.items():
            if achievement_id not in self.unlocked_achievements:
                locked.append({
                    "id": achievement_id,
                    "info": info
                })
        return locked
    
    def check_achievements(self) -> List[str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            List[str]: –°–ø–∏—Å–æ–∫ ID –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        """
        new_achievements = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        for achievement_id, info in ACHIEVEMENTS.items():
            if achievement_id not in self.unlocked_achievements:
                unlocked = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if achievement_id == "first_lesson":
                    unlocked = self.stats["educational_hints"] >= 1
                elif achievement_id == "openings_student":
                    unlocked = len(self.stats["openings_learned"]) >= 5
                elif achievement_id == "openings_master":
                    unlocked = len(self.stats["openings_learned"]) >= 15
                elif achievement_id == "endgame_student":
                    unlocked = self.stats["endgames_completed"] >= 5
                elif achievement_id == "endgame_master":
                    unlocked = self.stats["endgames_completed"] >= 15
                elif achievement_id == "knowledge_seeker":
                    unlocked = self.stats["educational_hints"] >= 50
                elif achievement_id == "strategy_master":
                    unlocked = self.stats["educational_hints"] >= 200
                elif achievement_id == "first_game":
                    unlocked = self.stats["games_played"] >= 1
                elif achievement_id == "victory":
                    unlocked = self.stats["games_won"] >= 1
                elif achievement_id == "checkmate_master":
                    unlocked = self.stats["checkmates"] >= 10
                elif achievement_id == "draw_master":
                    unlocked = self.stats["draws"] >= 20
                elif achievement_id == "moves_master":
                    unlocked = self.stats["moves_made"] >= 1000
                elif achievement_id == "captures_master":
                    unlocked = self.stats["captures"] >= 100
                elif achievement_id == "time_master":
                    unlocked = self.stats["time_played"] >= 36000  # 10 —á–∞—Å–æ–≤
                elif achievement_id == "perfect_game":
                    unlocked = self.stats["perfect_games"] >= 1
                elif achievement_id == "comeback_king":
                    unlocked = self.stats["comeback_wins"] >= 1
                elif achievement_id == "speed_demon":
                    unlocked = self.stats["short_games"] >= 1
                elif achievement_id == "patience_master":
                    unlocked = self.stats["long_games"] >= 1
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
                if unlocked:
                    import time
                    self.achievements[achievement_id] = time.time()
                    self.unlocked_achievements.add(achievement_id)
                    self.total_points += info["points"]
                    new_achievements.append(achievement_id)
                    self.new_achievements.append(achievement_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        old_level = self.level
        self.level = self.calculate_level()
        
        # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ –∫–∞–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        if self.level > old_level:
            self.new_achievements.append(f"level_up_{self.level}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if new_achievements:
            self.save_achievements()
        
        return new_achievements
    
    def calculate_level(self) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            int: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        """
        for level_num in sorted(LEVELS.keys(), reverse=True):
            if self.total_points >= LEVELS[level_num]["points_required"]:
                return level_num
        return 1
    
    def get_level_info(self, level: Optional[int] = None) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–≤–Ω–µ.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            level (int): –ù–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∏–π)
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ –∏–ª–∏ None
        """
        if level is None:
            level = self.level
        return LEVELS.get(level)
    
    def get_progress_to_next_level(self) -> Tuple[int, int, int]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Tuple[int, int, int]: (—Ç–µ–∫—É—â–∏–µ –æ—á–∫–∏, –æ—á–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è, –ø—Ä–æ—Ü–µ–Ω—Ç)
        """
        current_level_info = self.get_level_info(self.level)
        next_level_info = self.get_level_info(self.level + 1)
        
        if not current_level_info:
            return (0, 0, 0)
        
        current_points = self.total_points - current_level_info["points_required"]
        
        if not next_level_info:
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            return (current_points, 0, 100)
        
        points_needed = next_level_info["points_required"] - current_level_info["points_required"]
        progress_percent = int((current_points / points_needed) * 100) if points_needed > 0 else 100
        
        return (current_points, points_needed, progress_percent)
    
    def get_new_achievements(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            List[Dict]: –°–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        """
        new_achievements = []
        for achievement_id in self.new_achievements:
            if achievement_id.startswith("level_up_"):
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
                level_num = int(achievement_id.split("_")[-1])
                level_info = self.get_level_info(level_num)
                if level_info:
                    new_achievements.append({
                        "id": achievement_id,
                        "info": {
                            "name": f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: {level_info['name']}",
                            "description": f"–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —É—Ä–æ–≤–Ω—è {level_info['name']}",
                            "category": "level",
                            "points": 0,
                            "icon": level_info["icon"]
                        }
                    })
            else:
                info = self.get_achievement_info(achievement_id)
                if info:
                    new_achievements.append({
                        "id": achievement_id,
                        "info": info
                    })
        return new_achievements
    
    def clear_new_achievements(self):
        """–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
        self.new_achievements = []
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    def add_educational_hint(self):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É."""
        self.stats["educational_hints"] += 1
        self.check_achievements()
    
    def add_opening_learned(self, opening_name: str):
        """–î–æ–±–∞–≤–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–π –¥–µ–±—é—Ç."""
        self.stats["openings_learned"].add(opening_name)
        self.check_achievements()
    
    def add_endgame_completed(self):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —ç–Ω–¥—à–ø–∏–ª—å."""
        self.stats["endgames_completed"] += 1
        self.check_achievements()
    
    def add_game_played(self):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—ã–≥—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—Ç–∏—é."""
        self.stats["games_played"] += 1
        self.check_achievements()
    
    def add_game_won(self):
        """–î–æ–±–∞–≤–∏—Ç—å –≤—ã–∏–≥—Ä–∞–Ω–Ω—É—é –ø–∞—Ä—Ç–∏—é."""
        self.stats["games_won"] += 1
        self.check_achievements()
    
    def add_checkmate(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –º–∞—Ç."""
        self.stats["checkmates"] += 1
        self.check_achievements()
    
    def add_draw(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–∏—á—å—é."""
        self.stats["draws"] += 1
        self.check_achievements()
    
    def add_moves(self, count: int = 1):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–¥–µ–ª–∞–Ω–Ω—ã–µ —Ö–æ–¥—ã."""
        self.stats["moves_made"] += count
        self.check_achievements()
    
    def add_captures(self, count: int = 1):
        """–î–æ–±–∞–≤–∏—Ç—å –≤–∑—è—Ç–∏—è."""
        self.stats["captures"] += count
        self.check_achievements()
    
    def add_play_time(self, seconds: int):
        """–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –∏–≥—Ä—ã."""
        self.stats["time_played"] += seconds
        self.check_achievements()
    
    def add_perfect_game(self):
        """–î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –∏–≥—Ä—É."""
        self.stats["perfect_games"] += 1
        self.check_achievements()
    
    def add_comeback_win(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–±–µ–¥—É –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞."""
        self.stats["comeback_wins"] += 1
        self.check_achievements()
    
    def add_short_game(self):
        """–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –∏–≥—Ä—É."""
        self.stats["short_games"] += 1
        self.check_achievements()
    
    def add_long_game(self):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω—É—é –∏–≥—Ä—É."""
        self.stats["long_games"] += 1
        self.check_achievements()