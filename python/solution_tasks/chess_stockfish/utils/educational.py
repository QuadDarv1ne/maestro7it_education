# ============================================================================
# utils/educational.py
# ============================================================================

"""
Модуль: utils/educational.py

Описание:
    Содержит образовательные функции для шахматной игры chess_stockfish.
    Предоставляет подсказки, объяснения и обучающие материалы для игроков.
    
Возможности:
    - Подсказки по шахматным фигурам и их движениям
    - Объяснения шахматных терминов
    - Стратегические советы
    - Исторические факты о шахматах
    - Информация о дебютах и их характеристиках
    - Интерактивные шахматные головоломки и задачи
    - Прогресс обучения и достижения
"""

from typing import Dict, List, Optional, Tuple
import random

# Шахматные термины и их объяснения
CHESS_TERMS = {
    "шах": "Угроза королю. Король должен быть защищен.",
    "мат": "Король находится под ударом и не может уйти от угрозы.",
    "пат": "У игрока нет легальных ходов, но король не под шахом.",
    "рокировка": "Ход, при котором король и ладья перемещаются одновременно.",
    "взятие на проходе": "Специальное взятие пешки, которая сделала ход на две клетки.",
    "превращение": "Когда пешка достигает последней горизонтали, она превращается в любую фигуру.",
    "цугцванг": "Положение, когда любой ход ухудшает позицию игрока.",
    "форк": "Ход, атакующий две или более фигур одновременно.",
    "пин": "Фигура не может двигаться, так как защищает более ценную фигуру.",
    "скрытая атака": "Перемещение фигуры, открывающее линию атаки другой фигуры.",
    "двойной удар": "Атака двух фигур одновременно.",
    "открытая линия": "Вертикаль или горизонталь без пешек.",
    "диагональ": "Линия клеток одинакового цвета, соединенных по диагонали.",
    "центр": "Четыре центральные клетки доски: e4, e5, d4, d5.",
    "инициатива": "Преимущество в развитии и активности фигур.",
    "координация": "Совместная работа фигур для достижения цели.",
    "пространство": "Контроль большего количества клеток на доске.",
    "слабость": "Позиция или фигура, уязвимая для атаки.",
    "компенсация": "Материальное пожертвование ради позиционных преимуществ."
}

# Подсказки по фигурам
PIECE_HINTS = {
    "пешка": "Пешка ходит вперёд на одну клетку, но на первом ходу может на две. Бьёт по диагонали. Ценность: 1 очко.",
    "ладья": "Ладья ходит по горизонтали и вертикали на любое количество клеток. Ценность: 5 очков.",
    "конь": "Конь ходит буквой 'Г' - две клетки в одном направлении и одну в перпендикулярном. Ценность: 3 очка.",
    "слон": "Слон ходит по диагонали на любое количество клеток. Ценность: 3 очка.",
    "ферзь": "Ферзь объединяет движения ладьи и слона - ходит по горизонтали, вертикали и диагонали. Ценность: 9 очков.",
    "король": "Король ходит на одну клетку в любом направлении. Ценность: бесценен."
}

# Стратегические советы
STRATEGIC_TIPS = [
    "Контролируйте центр доски своими пешками и фигурами.",
    "Развивайте свои фигуры как можно быстрее в начале игры.",
    "Не двигайте одну и ту же фигуру дважды в дебюте.",
    "Сведите к минимуму количество пешечных ходов в дебюте.",
    "Рокируйтесь как можно скорее для безопасности короля.",
    "Слабые пешки (изолированные, сдвоенные) - слабое звено в позиции.",
    "Всегда думайте о последствиях своего хода.",
    "Ищите тактические возможности после каждого хода противника.",
    "Создавайте угрозы, заставляя противника защищаться.",
    "Координируйте действия всех своих фигур.",
    "Создавайте гармоничное взаимодействие между пешками и фигурами.",
    "Избегайте создания слабых клеток в своей позиции.",
    "Планируйте комбинации на несколько ходов вперед.",
    "Используйте открытые линии для активизации ладей.",
    "Создавайте пешечные цепи для контроля пространства.",
    "Не спешите с атакой, сначала развивайте фигуры.",
    "Используйте слабые клетки противника для размещения своих фигур.",
    "Создавайте позиционное давление, а не только тактические удары.",
    "Помните о важности времени в шахматах.",
    "Учитесь распознавать стандартные тактические мотивы."
]

# Исторические факты
HISTORICAL_FACTS = [
    "Современные правила шахмат были сформированы в 15 веке в Европе.",
    "Первый чемпион мира по шахматам был Вильгельм Стейниц в 1886 году.",
    "Самая длинная шахматная партия теоретически может длиться 5949 ходов.",
    "Самая короткая возможная партия - это 'дурацкий мат' за 2 хода.",
    "Гарри Каспаров был самым молодым чемпионом мира в возрасте 22 лет.",
    "Магнус Карлсен стал чемпионом мира в 2013 году в возрасте 22 лет.",
    "Шахматы признаны спортом Международным олимпийским комитетом.",
    "Первая шахматная программа была создана в 1951 году.",
    "Deep Blue от IBM в 1997 году впервые победил действующего чемпиона мира.",
    "AlphaZero от DeepMind научился играть в шахматы за 4 часа и стал сильнее всех программ.",
    "Шахматы возникли в Индии примерно в 6 веке н.э.",
    "Первоначально шахматы назывались 'чатуранга'.",
    "Самая длинная шахматная партия длилась 269 ходов.",
    "В 1984 году матчи за звание чемпиона мира были отменены из-за их продолжительности.",
    "Самый быстрый мат в шахматах - за 2 хода (дурацкий мат).",
    "Существует более 10^120 возможных шахматных партий.",
    "Шахматы включены в школьную программу более чем в 50 странах.",
    "Первый женский чемпион мира по шахматам был Вера Менчик в 1927 году.",
    "Самый старый шахматный клуб в мире - Лондонский шахматный клуб (основан в 1809 году).",
    "Шахматы помогают развивать логическое мышление и память."
]

# Тактические мотивы
TACTICAL_MOTIVS = [
    "Вилка - атака двух фигур одновременно.",
    "Связка - ограничение движения фигуры из-за защиты более ценной фигуры.",
    "Открытая линия - вертикаль или горизонталь без пешек для активизации ладей.",
    "Диагональная атака - использование диагоналей для атаки вражеского короля.",
    "Открытый король - король без достаточной защиты, уязвим для атак.",
    "Пешечный прорыв - продвижение пешек для создания слабостей в позиции противника.",
    "Перекрытие - блокирование линии обороны противника.",
    "Отвлечение - заставление фигуры противника покинуть важную позицию.",
    "Ловушка - создание позиции, в которой фигура противника попадает под атаку.",
    "Жертва - добровольное пожертвование материала ради позиционных преимуществ."
]

# Интерактивные шахматные головоломки
CHESS_PUZZLES = [
    {
        "name": "Мат в 1 ход",
        "fen": "r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 0 1",
        "solution": "f3g5",
        "description": "Белые ставят мат в один ход"
    },
    {
        "name": "Вилка конем",
        "fen": "r1bq1rk1/pp2bppp/2n2n2/2pp4/4P3/2PB1N2/PP3PPP/RNBQ1RK1 w - - 0 1",
        "solution": "d3h7",
        "description": "Белые создают вилку конем, атакуя короля и ладью"
    },
    {
        "name": "Связка",
        "fen": "r1bq1rk1/pp2bppp/2n2n2/2pp4/4P3/2PB1N2/PP3PPP/RNBQ1RK1 b - - 0 1",
        "solution": "c8g4",
        "description": "Черные связывают коня, атакуя ферзя и коня"
    }
]

# Достижения в обучении
ACHIEVEMENTS = {
    "first_game": {"name": "Первая игра", "description": "Сыграйте свою первую партию"},
    "first_win": {"name": "Первая победа", "description": "Выиграйте свою первую партию"},
    "tactical_master": {"name": "Тактический мастер", "description": "Решите 10 тактических задач"},
    "opening_expert": {"name": "Эксперт по дебютам", "description": "Изучите 5 разных дебютов"},
    "endgame_king": {"name": "Король эндшпиля", "description": "Выиграйте 3 партии в эндшпилях"},
    "patience": {"name": "Терпение", "description": "Сыграйте партию дольше 30 ходов"},
    "aggressive": {"name": "Агрессивный игрок", "description": "Сделайте 20 взятий"},
    "defender": {"name": "Защитник", "description": "Спасите партию из проигранной позиции"}
}

class ChessEducator:
    """
    Класс для предоставления образовательных материалов по шахматам.
    """
    
    def __init__(self):
        self.move_counter = 0
        self.last_tip_time = 0
        self.tips_shown = set()
        self.puzzles_solved = 0
        self.openings_learned = set()
        self.achievements_unlocked = set()
        self.learning_progress = {
            "tactics": 0,
            "openings": 0,
            "endgames": 0,
            "strategy": 0
        }
        # Импортируем OpeningBook внутри класса чтобы избежать циклических импортов
        from utils.opening_book import OpeningBook
        self.opening_book = OpeningBook()
    
    def get_random_tip(self) -> str:
        """
        Получить случайный стратегический совет.
        
        Возвращает:
            str: Стратегический совет
        """
        return random.choice(STRATEGIC_TIPS)
    
    def get_piece_hint(self, piece_name: str) -> str:
        """
        Получить подсказку по движению фигуры.
        
        Параметры:
            piece_name (str): Название фигуры
            
        Возвращает:
            str: Подсказка по движению фигуры
        """
        return PIECE_HINTS.get(piece_name.lower(), "Нет подсказки для этой фигуры")
    
    def get_term_explanation(self, term: str) -> str:
        """
        Получить объяснение шахматного термина.
        
        Параметры:
            term (str): Шахматный термин
            
        Возвращает:
            str: Объяснение термина
        """
        return CHESS_TERMS.get(term.lower(), "Нет объяснения для этого термина")
    
    def get_historical_fact(self) -> str:
        """
        Получить исторический факт о шахматах.
        
        Возвращает:
            str: Исторический факт
        """
        return random.choice(HISTORICAL_FACTS)
    
    def get_tactical_motiv(self) -> str:
        """
        Получить тактический мотив.
        
        Возвращает:
            str: Тактический мотив
        """
        return random.choice(TACTICAL_MOTIVS)
    
    def should_show_tip(self, current_time: float) -> bool:
        """
        Определить, следует ли показывать образовательную подсказку.
        
        Параметры:
            current_time (float): Текущее время
            
        Возвращает:
            bool: True если следует показать подсказку
        """
        # Show a tip every 8 moves or every 25 seconds
        return (self.move_counter % 8 == 0 and self.move_counter > 0) or \
               (current_time - self.last_tip_time > 25)
    
    def get_educational_feedback(self, move_count: int, current_time: float) -> Optional[str]:
        """
        Получить образовательную обратную связь для игрока.
        
        Параметры:
            move_count (int): Количество сделанных ходов
            current_time (float): Текущее время
            
        Возвращает:
            str: Образовательная обратная связь или None
        """
        self.move_counter = move_count
        
        if self.should_show_tip(current_time):
            self.last_tip_time = current_time
            
            # Alternate between different types of educational content
            tip_type = move_count % 6  # Добавляем еще один тип контента
            
            if tip_type == 0:
                return f"💡 Совет: {self.get_random_tip()}"
            elif tip_type == 1:
                return f"📚 Факт: {self.get_historical_fact()}"
            elif tip_type == 2:
                # Choose a random piece to explain
                piece = random.choice(list(PIECE_HINTS.keys()))
                return f"♟️ {piece.capitalize()}: {self.get_piece_hint(piece)}"
            elif tip_type == 3:
                # Choose a random term to explain
                term = random.choice(list(CHESS_TERMS.keys()))
                return f"📖 {term.capitalize()}: {self.get_term_explanation(term)}"
            elif tip_type == 4:
                # Дебютная информация
                opening_suggestion = self.opening_book.get_opening_suggestion(move_count)
                if opening_suggestion:
                    opening_info = self.opening_book.get_opening_info(opening_suggestion)
                    if opening_info:
                        return f"🎯 Дебют: {opening_suggestion} - {opening_info['description']}"
                # Если нет дебютной информации, показываем принцип
                principle, explanation = self.opening_book.get_random_principle()
                return f"🎯 Принцип: {principle} {explanation}"
            else:
                # Тактический мотив
                return f"⚔️ Тактика: {self.get_tactical_motiv()}"
        
        return None
    
    def get_random_puzzle(self) -> Dict:
        """
        Получить случайную шахматную головоломку.
        
        Возвращает:
            Dict: Словарь с головоломкой
        """
        return random.choice(CHESS_PUZZLES)
    
    def check_puzzle_solution(self, puzzle: Dict, user_move: str) -> bool:
        """
        Проверить решение головоломки.
        
        Параметры:
            puzzle (Dict): Головоломка
            user_move (str): Ход пользователя
            
        Возвращает:
            bool: True если решение верное
        """
        is_correct = puzzle["solution"] == user_move
        if is_correct:
            self.puzzles_solved += 1
            self.learning_progress["tactics"] += 1
            self._check_achievements()
        return is_correct
    
    def get_learning_progress(self) -> Dict:
        """
        Получить прогресс обучения.
        
        Возвращает:
            Dict: Словарь с прогрессом обучения
        """
        return self.learning_progress.copy()
    
    def get_unlocked_achievements(self) -> List[str]:
        """
        Получить список разблокированных достижений.
        
        Возвращает:
            List[str]: Список разблокированных достижений
        """
        return list(self.achievements_unlocked)
    
    def _check_achievements(self):
        """Проверить и разблокировать достижения."""
        # Проверяем достижения
        if "first_game" not in self.achievements_unlocked:
            self.achievements_unlocked.add("first_game")
            
        if self.puzzles_solved >= 10 and "tactical_master" not in self.achievements_unlocked:
            self.achievements_unlocked.add("tactical_master")
            
        if len(self.openings_learned) >= 5 and "opening_expert" not in self.achievements_unlocked:
            self.achievements_unlocked.add("opening_expert")
    
    def add_learned_opening(self, opening_name: str):
        """
        Добавить изученный дебют.
        
        Параметры:
            opening_name (str): Название дебюта
        """
        self.openings_learned.add(opening_name)
        self.learning_progress["openings"] += 1
        self._check_achievements()
    
    def get_achievement_info(self, achievement_key: str) -> Optional[Dict]:
        """
        Получить информацию о достижении.
        
        Параметры:
            achievement_key (str): Ключ достижения
            
        Возвращает:
            Dict: Информация о достижении или None
        """
        return ACHIEVEMENTS.get(achievement_key)