#!/usr/bin/env python3
"""
Main entry point for the chess game.
"""

import pygame
import sys
import shutil
from typing import Tuple, Union

# Import our game modules
from game.menu import main_menu
from game.chess_game import ChessGame
# Import new game modes
from game.puzzle_mode import PuzzleMode
from game.timed_mode import TimedMode
from game.adaptive_mode import AdaptiveMode

from utils.game_stats import GameStatistics
from utils.performance_monitor import get_performance_monitor  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

def check_dependencies():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True –µ—Å–ª–∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, False –∏–Ω–∞—á–µ
    """
    try:
        import pygame
        import stockfish
        return True
    except ImportError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("\nüí° –†–ï–®–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install pygame stockfish python-chess psutil")
        return False


def show_stats():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä."""
    try:
        stats = GameStatistics()
        summary = stats.get_summary()
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä:")
        print(f"   –í—Å–µ–≥–æ –∏–≥—Ä: {summary['total_games']}")
        print(f"   –ü–æ–±–µ–¥: {summary['total_wins']}")
        print(f"   –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {summary['total_losses']}")
        print(f"   –ù–∏—á—å–∏—Ö: {summary['total_draws']}")
        if summary['total_games'] > 0:
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {summary['win_rate']:.1f}%")
        print()
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")


def check_stockfish_installed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Stockfish –≤ —Å–∏—Å—Ç–µ–º–µ."""
    return shutil.which("stockfish") is not None


def suggest_stockfish_installation():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∞—Ä–∏–∞–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Stockfish."""
    print("\nüí° –í–ù–ò–ú–ê–ù–ò–ï: Stockfish –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
    print("\n–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Stockfish.")
    print("\n–í–∞—Ä–∏–∞–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    print("  1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞:")
    print("     –ó–∞–ø—É—Å—Ç–∏—Ç–µ install_stockfish.bat")
    print("\n  2. –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞:")
    print("     - –°–∫–∞—á–∞–π—Ç–µ —Å https://stockfishchess.org/download/")
    print("     - –†–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ –ø–∞–ø–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, C:\\Program Files\\stockfish)")
    print("     - –î–æ–±–∞–≤—å—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã PATH")
    print("\n  3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    print("     –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python check_installation.py")
    print("\n–ë–µ–∑ Stockfish –∏–≥—Ä–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.")


def cleanup_game(game):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–≥—Ä—ã."""
    try:
        if game and hasattr(game, 'cleanup'):
            game.cleanup()
        elif game and hasattr(game, 'engine') and game.engine:
            if hasattr(game.engine, 'quit'):
                game.engine.quit()
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ
        pass


def run_classic_game(player_color, skill_level, theme):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –∏–≥—Ä—É."""
    game = ChessGame(player_color=player_color, skill_level=skill_level, theme=theme)
    result = game.run()
    return result


def run_puzzle_mode(theme):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫."""
    pygame.init()
    screen = pygame.display.set_mode((512, 612))  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è UI
    pygame.display.set_caption("‚ôüÔ∏è  –®–∞—Ö–º–∞—Ç–Ω—ã–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ ‚Äî Maestro7IT")
    
    puzzle_mode = PuzzleMode(screen, theme)
    result = puzzle_mode.run()
    puzzle_mode.cleanup()
    return result


def run_timed_mode(player_color, theme):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∂–∏–º –∏–≥—Ä—ã –Ω–∞ –≤—Ä–µ–º—è."""
    pygame.init()
    screen = pygame.display.set_mode((512, 612))  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è UI
    pygame.display.set_caption("‚è±Ô∏è  –ò–≥—Ä–∞ –Ω–∞ –≤—Ä–µ–º—è ‚Äî Maestro7IT")
    
    timed_mode = TimedMode(screen, player_color, 'blitz_3_0')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–ª–∏—Ü 3+0
    result = timed_mode.run()
    timed_mode.cleanup()
    return result


def run_adaptive_mode(player_color, theme):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º."""
    pygame.init()
    screen = pygame.display.set_mode((512, 612))  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è UI
    pygame.display.set_caption("üß†  –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å ‚Äî Maestro7IT")
    
    adaptive_mode = AdaptiveMode(screen, player_color, theme)
    result = adaptive_mode.run()
    adaptive_mode.cleanup()
    return result


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Pygame, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö.
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    performance_monitor = get_performance_monitor()
    performance_monitor.start_monitoring(1.0)  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Stockfish
    if not check_stockfish_installed():
        suggest_stockfish_installation()
        # –°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        choice = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ? (y/n): ").strip().lower()
        if choice not in ('y', 'yes', '–¥', '–¥–∞'):
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Stockfish –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.")
            sys.exit(1)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã
    show_stats()
    
    pygame.init()
    
    game = None
    try:
        while True:  # –¶–∏–∫–ª –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            menu_result = main_menu()
            # Handle menu return type (color, skill_level, theme, game_mode)
            if len(menu_result) == 4:
                player_color, skill_level, theme, game_mode = menu_result
            else:
                # Fallback to classic mode for older menu versions
                player_color, skill_level = menu_result
                theme = 'classic'
                game_mode = 'classic'
            
            # –ó–∞–ø—É—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
            if game_mode == 'classic':
                result = run_classic_game(player_color, skill_level, theme)
            elif game_mode == 'puzzle':
                result = run_puzzle_mode(theme)
            elif game_mode == 'timed':
                result = run_timed_mode(player_color, theme)
            elif game_mode == 'adaptive':
                result = run_adaptive_mode(player_color, theme)
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
                result = run_classic_game(player_color, skill_level, theme)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if result == "main_menu":
                print("\n–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...\n")
                # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é
                cleanup_game(game)
                game = None
                continue  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Ü–∏–∫–ª–∞ (–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–∂–∏–º –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫)
            if game_mode != 'puzzle':
                try:
                    stats = GameStatistics()
                    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë
                    if isinstance(result, dict):
                        game_stats = result
                    else:
                        # –ò–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –∏–≥—Ä—ã
                        game_stats = game.get_game_stats() if game else {}
                    stats.save_game(game_stats)
                    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    summary = stats.get_summary()
                    print(f"\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                    print(f"   –í—Å–µ–≥–æ –∏–≥—Ä: {summary['total_games']}")
                    print(f"   –ü–æ–±–µ–¥: {summary['total_wins']}")
                    print(f"   –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {summary['total_losses']}")
                    print(f"   –ù–∏—á—å–∏—Ö: {summary['total_draws']}")
                    if summary['total_games'] > 0:
                        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {summary['win_rate']:.1f}%")
                    print()
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
            
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏–≥—Ä—ã
            cleanup_game(game)
            game = None
            
            # –°–ø—Ä–æ—Å–∏—Ç—å, —Ö–æ—á–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑
            play_again = input("–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (y/n): ").strip().lower()
            if play_again not in ('y', 'yes', '–¥', '–¥–∞'):
                break  # –í—ã—Ö–æ–¥ –∏–∑ —Ü–∏–∫–ª–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        
    except RuntimeError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüí° –†–ï–®–ï–ù–ò–ï: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Stockfish —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É —Å–∏—Å—Ç–µ–º—É:")
        print("\n   Windows:")
        print("      1. –°–∫–∞—á–∞–π—Ç–µ —Å https://stockfishchess.org/download/")
        print("      2. –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–π—Ç–µ stockfish.exe –≤ C:\\Program Files\\stockfish\\")
        print("      3. –î–æ–±–∞–≤—å—Ç–µ –≤ PATH –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –≤ –∫–æ–¥–µ\n")
        print("   Linux/macOS:")
        print("      Linux:  sudo apt-get install stockfish")
        print("      macOS:  brew install stockfish\n")
        
    except KeyboardInterrupt:
        print("\n\nüëã –ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏–≥—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã
        if game:
            cleanup_game(game)
        pygame.quit()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_monitor.stop_monitoring()
        performance_summary = performance_monitor.get_performance_summary()
        if performance_summary:
            print(f"\nüìä –°–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {performance_summary.get('uptime_seconds', 0):.2f} —Å–µ–∫")
            cpu_usage = performance_summary.get('cpu_usage', {})
            print(f"   CPU: —Å—Ä–µ–¥–Ω–µ–µ {cpu_usage.get('average', 0)}%")
            memory_usage = performance_summary.get('memory_usage', {})
            print(f"   –ü–∞–º—è—Ç—å: {memory_usage.get('process_memory_mb', {}).get('average', 0)} MB")
        
        performance_monitor.save_log()
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ\n")


if __name__ == "__main__":
    main()