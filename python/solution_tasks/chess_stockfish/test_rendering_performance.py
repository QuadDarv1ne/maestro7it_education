#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ FPS.
"""

import time
import sys
import os
import pygame

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from game.chess_game import ChessGame
from engine.stockfish_wrapper import StockfishWrapper


def test_rendering_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞."""
    print("–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
    game = ChessGame(player_color='white', skill_level=5)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏
    board_state = game.get_board_state()
    
    # –¢–µ—Å—Ç 1: –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–æ—Å–∫–∏
    print("–¢–µ—Å—Ç 1: –í—Ä–µ–º—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–æ—Å–∫–∏")
    start_time = time.perf_counter()
    
    for i in range(100):
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –¥–æ—Å–∫–∏
        game.renderer.draw(
            board_state,
            evaluation=0.5,
            thinking=False,
            mouse_pos=(256, 256),
            move_count=10,
            capture_count=(3, 2),
            check_count=1
        )
    
    render_time = time.perf_counter() - start_time
    avg_render_time = render_time / 100 * 1000  # –º—Å
    
    print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {render_time:.4f} —Å–µ–∫")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–∞–¥—Ä: {avg_render_time:.2f} –º—Å")
    print(f"  –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π FPS: {1000/avg_render_time:.1f}")
    
    # –¢–µ—Å—Ç 2: –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏
    print("\n–¢–µ—Å—Ç 2: –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏")
    start_time = time.perf_counter()
    
    for i in range(1000):
        board = game.get_board_state()
    
    update_time = time.perf_counter() - start_time
    avg_update_time = update_time / 1000 * 1000  # –º—Å
    
    print(f"  –û–±—â–µ–µ –≤—Ä–µ–º—è: {update_time:.4f} —Å–µ–∫")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {avg_update_time:.4f} –º—Å")
    
    # –¢–µ—Å—Ç 3: –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n–¢–µ—Å—Ç 3: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    start_time = time.perf_counter()
    
    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ –∫—ç—à–∞)
    game.board_state_cache = None
    board1 = game.get_board_state()
    first_call_time = time.perf_counter() - start_time
    
    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (—Å –∫—ç—à–µ–º)
    start_time = time.perf_counter()
    board2 = game.get_board_state()
    second_call_time = time.perf_counter() - start_time
    
    print(f"  –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ –∫—ç—à–∞): {first_call_time*1000:.4f} –º—Å")
    print(f"  –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (—Å –∫—ç—à–µ–º): {second_call_time*1000:.4f} –º—Å")
    print(f"  –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {first_call_time/second_call_time:.2f}x")
    
    # –û—á–∏—Å—Ç–∫–∞
    game.renderer.cleanup()
    
    return {
        'avg_render_time_ms': avg_render_time,
        'fps': 1000/avg_render_time,
        'avg_update_time_ms': avg_update_time,
        'caching_speedup': first_call_time/second_call_time
    }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –†–ï–ù–î–ï–†–ò–ù–ì–ê")
    print("=" * 50)
    print()
    
    try:
        pygame.init()
        
        results = test_rendering_performance()
        
        print("\n" + "=" * 50)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê:")
        print("=" * 50)
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: {results['avg_render_time_ms']:.2f} –º—Å")
        print(f"–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π FPS: {results['fps']:.1f}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {results['avg_update_time_ms']:.4f} –º—Å")
        print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {results['caching_speedup']:.2f}x")
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if results['fps'] >= 60:
            print("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞")
        elif results['fps'] >= 30:
            print("‚ö†Ô∏è  –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞")
        else:
            print("‚ùå –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞")
            
        if results['caching_speedup'] >= 2:
            print("‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
        else:
            print("‚ö†Ô∏è  –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ª—É—á—à–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    finally:
        pygame.quit()


if __name__ == "__main__":
    main()