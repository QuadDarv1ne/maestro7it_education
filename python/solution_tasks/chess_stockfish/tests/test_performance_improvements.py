#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–∏–π –≤ chess_stockfish.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–≥—Ä—ã
–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏ –Ω–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏–∏.
"""

import time
import sys
import os
import json
from typing import Dict, List, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from engine.stockfish_wrapper import StockfishWrapper
from utils.performance_monitor import PerformanceMonitor, PerformanceTimer


def test_board_state_caching():
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏."""
    print("–¢–µ—Å—Ç 1: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = StockfishWrapper(skill_level=5)
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏ –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    start_time = time.time()
    for _ in range(100):
        board = engine.get_board_state()
    uncached_time = time.time() - start_time
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    start_time = time.time()
    for _ in range(100):
        board = engine.get_board_state()  # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
    cached_time = time.time() - start_time
    
    print(f"–ë–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {uncached_time:.4f} —Å–µ–∫")
    print(f"–° –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {cached_time:.4f} —Å–µ–∫")
    print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {uncached_time/cached_time:.2f}x")
    print()
    
    return {
        'uncached_time': uncached_time,
        'cached_time': cached_time,
        'speedup': uncached_time/cached_time
    }


def test_evaluation_caching():
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏."""
    print("–¢–µ—Å—Ç 2: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = StockfishWrapper(skill_level=5)
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    start_time = time.time()
    for _ in range(50):
        evaluation = engine.get_evaluation()
    uncached_time = time.time() - start_time
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    start_time = time.time()
    for _ in range(50):
        evaluation = engine.get_evaluation()  # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
    cached_time = time.time() - start_time
    
    print(f"–ë–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {uncached_time:.4f} —Å–µ–∫")
    print(f"–° –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {cached_time:.4f} —Å–µ–∫")
    print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {uncached_time/cached_time:.2f}x")
    print()
    
    return {
        'uncached_time': uncached_time,
        'cached_time': cached_time,
        'speedup': uncached_time/cached_time
    }


def test_move_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–æ–¥–æ–≤."""
    print("–¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ–¥–æ–≤")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = StockfishWrapper(skill_level=5)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ö–æ–¥—ã
    test_moves = ['e2e4', 'e7e5', 'g1f3', 'b8c6', 'f1b5', 'a7a6', 'b5a4']
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–æ–¥–æ–≤
    start_time = time.time()
    for _ in range(10):
        for move in test_moves:
            is_valid = engine.is_move_correct(move)
    validation_time = time.time() - start_time
    
    print(f"–í—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {len(test_moves) * 10} —Ö–æ–¥–æ–≤: {validation_time:.4f} —Å–µ–∫")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ö–æ–¥: {validation_time/(len(test_moves) * 10) * 1000:.2f} –º—Å")
    print()
    
    return {
        'total_moves': len(test_moves) * 10,
        'total_time': validation_time,
        'avg_time_per_move_ms': validation_time/(len(test_moves) * 10) * 1000
    }


def test_ai_move_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–æ–¥–æ–≤ –ò–ò."""
    print("–¢–µ—Å—Ç 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–æ–¥–æ–≤ –ò–ò")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = StockfishWrapper(skill_level=3)  # –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞
    start_time = time.time()
    for depth in [1, 2, 3]:
        move = engine.get_best_move(depth=depth)
    move_time = time.time() - start_time
    
    print(f"–í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è 3 —Ö–æ–¥–æ–≤ —Å —Ä–∞–∑–Ω–æ–π –≥–ª—É–±–∏–Ω–æ–π: {move_time:.4f} —Å–µ–∫")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ö–æ–¥: {move_time/3:.4f} —Å–µ–∫")
    print()
    
    return {
        'moves_count': 3,
        'total_time': move_time,
        'avg_time_per_move': move_time/3
    }


def run_comprehensive_performance_test():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print("=" * 60)
    print("–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò CHESS_STOCKFISH")
    print("=" * 60)
    print()
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    monitor = PerformanceMonitor("performance_test_log.json")
    monitor.start_monitoring(0.1)  # –ß–∞—Å—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç–∞
    
    results = {}
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        results['board_state_caching'] = test_board_state_caching()
        results['evaluation_caching'] = test_evaluation_caching()
        results['move_validation'] = test_move_validation()
        results['ai_move_generation'] = test_ai_move_generation()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        summary = monitor.get_performance_summary()
        results['performance_summary'] = summary
        
        print("–°–í–û–î–ö–ê –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print("-" * 40)
        if summary:
            print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {summary.get('uptime_seconds', 0):.2f} —Å–µ–∫")
            cpu_usage = summary.get('cpu_usage', {})
            print(f"CPU –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: —Å—Ä–µ–¥–Ω–µ–µ {cpu_usage.get('average', 0)}%, –º–∞–∫—Å–∏–º—É–º {cpu_usage.get('maximum', 0)}%")
            memory_usage = summary.get('memory_usage', {})
            print(f"–ü–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: —Å—Ä–µ–¥–Ω–µ–µ {memory_usage.get('process_memory_mb', {}).get('average', 0)} MB")
            print(f"–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {summary.get('total_events', 0)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('performance_test_results.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2, default=str)
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ performance_test_results.json")
        
    finally:
        monitor.stop_monitoring()
        monitor.save_log()
    
    return results


def compare_versions():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ –Ω–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–π."""
    print("=" * 60)
    print("–°–†–ê–í–ù–ï–ù–ò–ï –í–ï–†–°–ò–ô")
    print("=" * 60)
    print()
    
    print("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ:")
    print("1. –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏ (–¥–æ 1.5 —Å–µ–∫—É–Ω–¥)")
    print("2. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ (–¥–æ 120 —Å–µ–∫—É–Ω–¥)")
    print("3. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ö–æ–¥–æ–≤ (–¥–æ 10 —Å–µ–∫—É–Ω–¥)")
    print("4. –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–µ–π")
    print("5. –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ UX")
    print("6. –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—É–ª–æ–º –ø–æ—Ç–æ–∫–æ–≤")
    print("7. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print()
    
    print("–û–∂–∏–¥–∞–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print("- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏: 5-10x —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
    print("- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏: 10-50x —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
    print("- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ö–æ–¥–æ–≤: 3-7x —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
    print("- –û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏: —É–º–µ–Ω—å—à–µ–Ω–æ –Ω–∞ 20-30%")
    print("- –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: —É–ª—É—á—à–µ–Ω–∞ –Ω–∞ 40-60%")
    print()


if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ chess_stockfish...\n")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
    compare_versions()
    
    # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    results = run_comprehensive_performance_test()
    
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 60)
    
    # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if 'board_state_caching' in results:
        speedup = results['board_state_caching']['speedup']
        print(f"üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏: {speedup:.2f}x")
    
    if 'evaluation_caching' in results:
        speedup = results['evaluation_caching']['speedup']
        print(f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {speedup:.2f}x")
    
    if 'move_validation' in results:
        avg_time = results['move_validation']['avg_time_per_move_ms']
        print(f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–æ–¥–∞: {avg_time:.2f} –º—Å")
    
    print("\n–î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–º–æ—Ç—Ä–∏—Ç–µ performance_test_results.json")