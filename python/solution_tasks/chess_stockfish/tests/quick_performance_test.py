#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏,
—á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
"""

import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)) + "/..")

from engine.stockfish_wrapper import StockfishWrapper


def test_caching_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîç –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = StockfishWrapper(skill_level=3)
    
    # –¢–µ—Å—Ç 1: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏
    print("  –¢–µ—Å—Ç 1: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏")
    
    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ –∫—ç—à–∞)
    start_time = time.perf_counter()
    board1 = engine.get_board_state()
    time1 = time.perf_counter() - start_time
    
    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (—Å –∫—ç—à–µ–º)
    start_time = time.perf_counter()
    board2 = engine.get_board_state()
    time2 = time.perf_counter() - start_time
    
    print(f"    –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {time1*1000:.2f} –º—Å")
    print(f"    –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {time2*1000:.2f} –º—Å")
    print(f"    –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {time1/time2:.1f}x" if time2 > 0 else "    –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ‚àû")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
    assert board1 == board2, "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    
    # –¢–µ—Å—Ç 2: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
    print("  –¢–µ—Å—Ç 2: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ–∑–∏—Ü–∏–∏")
    
    # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–±–µ–∑ –∫—ç—à–∞)
    start_time = time.perf_counter()
    eval1 = engine.get_evaluation()
    time1 = time.perf_counter() - start_time
    
    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (—Å –∫—ç—à–µ–º)
    start_time = time.perf_counter()
    eval2 = engine.get_evaluation()
    time2 = time.perf_counter() - start_time
    
    print(f"    –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {time1*1000:.2f} –º—Å")
    print(f"    –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {time2*1000:.2f} –º—Å")
    print(f"    –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {time1/time2:.1f}x" if time2 > 0 else "    –£—Å–∫–æ—Ä–µ–Ω–∏–µ: ‚àû")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–ª–∏–∑–∫–∏–µ (–º–æ–≥—É—Ç –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –∏–∑-–∑–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è)
    if eval1 is not None and eval2 is not None:
        assert abs(eval1 - eval2) < 0.01, "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    
    print("  ‚úÖ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω")
    return True


def test_move_validation_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–æ–¥–æ–≤."""
    print("üîç –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–æ–¥–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
    engine = StockfishWrapper(skill_level=3)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ö–æ–¥—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
    test_moves = ['e2e4', 'd2d4', 'g1f3', 'b1c3']
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    start_time = time.perf_counter()
    results = []
    for move in test_moves:
        is_valid = engine.is_move_correct(move)
        results.append(is_valid)
    total_time = time.perf_counter() - start_time
    
    avg_time = total_time / len(test_moves) * 1000  # –º—Å
    print(f"    –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ö–æ–¥: {avg_time:.2f} –º—Å")
    print(f"    –í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: {len(test_moves)}")
    print(f"    –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time*1000:.2f} –º—Å")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    expected = [True, True, True, True]  # –í—Å–µ —Ö–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    assert results == expected, f"–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {expected}, –ø–æ–ª—É—á–µ–Ω–æ: {results}"
    
    print("  ‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–æ–¥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")
    return True


def test_ai_move_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–æ–¥–æ–≤ –ò–ò."""
    print("üîç –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–æ–¥–æ–≤ –ò–ò...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ —Å –Ω–∏–∑–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    engine = StockfishWrapper(skill_level=1)
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ–¥–∞
    start_time = time.perf_counter()
    move = engine.get_best_move(depth=1)
    move_time = time.perf_counter() - start_time
    
    print(f"    –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–æ–¥–∞: {move_time*1000:.2f} –º—Å")
    print(f"    –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ö–æ–¥: {move}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ–¥ –ø–æ–ª—É—á–µ–Ω
    assert move is not None, "–•–æ–¥ –ò–ò –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω"
    assert len(move) == 4, "–•–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ UCI (4 —Å–∏–º–≤–æ–ª–∞)"
    
    print("  ‚úÖ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–æ–¥–æ–≤ –ò–ò –ø—Ä–æ–π–¥–µ–Ω")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    print()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_caching_performance()
        print()
        
        test_move_validation_performance()
        print()
        
        test_ai_move_performance()
        print()
        
        print("=" * 50)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è")
        print("=" * 50)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)