#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π chess_stockfish.
"""

import sys
import os
import unittest

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –∏–≥—Ä—ã
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from utils.educational import ChessEducator
from utils.opening_book import OpeningBook

class TestEducationalEnhancements(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    
    def setUp(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º."""
        self.educator = ChessEducator()
        self.opening_book = OpeningBook()
    
    def test_get_random_tip(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞."""
        tip = self.educator.get_random_tip()
        self.assertIsInstance(tip, str)
        self.assertGreater(len(tip), 0)
        print(f"üí° –°–æ–≤–µ—Ç: {tip}")
    
    def test_get_piece_hint(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ–∏–≥—É—Ä–µ."""
        pieces = ["–ø–µ—à–∫–∞", "–ª–∞–¥—å—è", "–∫–æ–Ω—å", "—Å–ª–æ–Ω", "—Ñ–µ—Ä–∑—å", "–∫–æ—Ä–æ–ª—å"]
        for piece in pieces:
            hint = self.educator.get_piece_hint(piece)
            self.assertIsInstance(hint, str)
            self.assertGreater(len(hint), 0)
            print(f"‚ôüÔ∏è {piece.capitalize()}: {hint}")
    
    def test_get_term_explanation(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–∞."""
        terms = ["—à–∞—Ö", "–º–∞—Ç", "—Ä–æ–∫–∏—Ä–æ–≤–∫–∞", "—Ñ–æ—Ä–∫", "–ø–∏–Ω"]
        for term in terms:
            explanation = self.educator.get_term_explanation(term)
            self.assertIsInstance(explanation, str)
            self.assertGreater(len(explanation), 0)
            print(f"üìñ {term.capitalize()}: {explanation}")
    
    def test_get_historical_fact(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–∞."""
        fact = self.educator.get_historical_fact()
        self.assertIsInstance(fact, str)
        self.assertGreater(len(fact), 0)
        print(f"üìö –§–∞–∫—Ç: {fact}")
    
    def test_get_tactical_motiv(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ—Ç–∏–≤–∞."""
        motiv = self.educator.get_tactical_motiv()
        self.assertIsInstance(motiv, str)
        self.assertGreater(len(motiv), 0)
        print(f"‚öîÔ∏è –¢–∞–∫—Ç–∏–∫–∞: {motiv}")
    
    def test_get_random_puzzle(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏."""
        puzzle = self.educator.get_random_puzzle()
        self.assertIsInstance(puzzle, dict)
        self.assertIn("name", puzzle)
        self.assertIn("fen", puzzle)
        self.assertIn("solution", puzzle)
        self.assertIn("description", puzzle)
        print(f"üß© –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞: {puzzle['name']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {puzzle['description']}")
        print(f"   –†–µ—à–µ–Ω–∏–µ: {puzzle['solution']}")
    
    def test_check_puzzle_solution(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏."""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É
        test_puzzle = {
            "name": "–¢–µ—Å—Ç–æ–≤–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞",
            "fen": "r1bqkbnr/pppp1ppp/2n5/4p3/4P3/5N2/PPPP1PPP/RNBQKB1R w KQkq - 0 1",
            "solution": "f3g5",
            "description": "–¢–µ—Å—Ç–æ–≤–∞—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∞"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        is_correct = self.educator.check_puzzle_solution(test_puzzle, "f3g5")
        self.assertTrue(is_correct)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        is_correct = self.educator.check_puzzle_solution(test_puzzle, "e2e4")
        self.assertFalse(is_correct)
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_get_opening_info(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–±—é—Ç–µ."""
        openings = ["–ò—Å–ø–∞–Ω—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è", "–°–∏—Ü–∏–ª–∏–∞–Ω—Å–∫–∞—è –∑–∞—â–∏—Ç–∞", "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è"]
        for opening in openings:
            info = self.opening_book.get_opening_info(opening)
            self.assertIsInstance(info, dict)
            if info:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ info –Ω–µ None
                self.assertIn("description", info)
                self.assertIn("strategy", info)
                self.assertIn("difficulty", info)
                print(f"üéØ {opening}:")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
                print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {info['strategy']}")
                print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {info['difficulty']}")
    
    def test_get_educational_tip(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –ø–æ –¥–µ–±—é—Ç—É."""
        opening_name = "–ò—Å–ø–∞–Ω—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è"
        tip = self.opening_book.get_educational_tip(opening_name)
        if tip:
            self.assertIsInstance(tip, str)
            self.assertGreater(len(tip), 0)
            print(f"üí° –°–æ–≤–µ—Ç –ø–æ {opening_name}: {tip}")
    
    def test_get_opening_lesson(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –ø–æ –¥–µ–±—é—Ç—É."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–∫
        lesson = self.opening_book.get_opening_lesson("–ò—Å–ø–∞–Ω—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è")
        if lesson:
            self.assertIsInstance(lesson, dict)
            self.assertIn("title", lesson)
            self.assertIn("content", lesson)
            self.assertIn("key_moves", lesson)
            self.assertIn("practice_position", lesson)
            self.assertIn("objectives", lesson)
            print(f"üìò –£—Ä–æ–∫: {lesson['title']}")
            print(f"   {lesson['content']}")
    
    def test_learning_progress(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress = self.educator.get_learning_progress()
        self.assertIsInstance(progress, dict)
        self.assertIn("tactics", progress)
        self.assertIn("openings", progress)
        self.assertIn("endgames", progress)
        self.assertIn("strategy", progress)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏
        initial_tactics = progress["tactics"]
        puzzle = self.educator.get_random_puzzle()
        self.educator.check_puzzle_solution(puzzle, puzzle["solution"])
        new_progress = self.educator.get_learning_progress()
        self.assertEqual(new_progress["tactics"], initial_tactics + 1)
        
        print("üìà –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_achievements(self):
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements = self.educator.get_unlocked_achievements()
        self.assertIsInstance(achievements, list)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑—É—á–µ–Ω–∏–µ –¥–µ–±—é—Ç–æ–≤
        self.educator.add_learned_opening("–ò—Å–ø–∞–Ω—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è")
        self.educator.add_learned_opening("–°–∏—Ü–∏–ª–∏–∞–Ω—Å–∫–∞—è –∑–∞—â–∏—Ç–∞")
        self.educator.add_learned_opening("–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è")
        self.educator.add_learned_opening("–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è –∑–∞—â–∏—Ç–∞")
        self.educator.add_learned_opening("–ö–∞—Ä–æ-–ö–∞–Ω–Ω—Å–∫–∞—è –∑–∞—â–∏—Ç–∞")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫
        for i in range(10):
            puzzle = self.educator.get_random_puzzle()
            self.educator.check_puzzle_solution(puzzle, puzzle["solution"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        new_achievements = self.educator.get_unlocked_achievements()
        self.assertGreater(len(new_achievements), len(achievements))
        
        print("üèÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        for achievement in new_achievements:
            info = self.educator.get_achievement_info(achievement)
            if info:
                print(f"   {info['name']}: {info['description']}")

def run_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤."""
    print("üéì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    suite = unittest.TestLoader().loadTestsFromTestCase(TestEducationalEnhancements)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {result.testsRun}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–≤–∞–ª–æ–≤: {len(result.failures)}")
    
    if result.wasSuccessful():
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_tests()
    sys.exit(0 if success else 1)