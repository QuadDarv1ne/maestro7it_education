# ============================================================================
# engine/stockfish_wrapper.py
# ============================================================================

"""
–ú–æ–¥—É–ª—å: engine/stockfish_wrapper.py

–û–ø–∏—Å–∞–Ω–∏–µ:
    –°–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å StockfishWrapper –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —à–∞—Ö–º–∞—Ç–Ω—ã–º –¥–≤–∏–∂–∫–æ–º Stockfish.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
    - –ü–æ–ª—É—á–µ–Ω–∏—è —Ö–æ–¥–æ–≤ –∏ –ª—É—á—à–∏—Ö —Ö–æ–¥–æ–≤
    - –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ö–æ–¥–æ–≤
    - –ê–Ω–∞–ª–∏–∑–∞ –ø–æ–∑–∏—Ü–∏–π –∏ –æ—Ü–µ–Ω–∫–∏
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    - –û–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –æ—à–∏–±–æ–∫
    
–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å python-chess –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–æ–∑–∏—Ü–∏–π (FEN, UCI)
    - –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –¥–≤–∏–∂–∫–æ–º
"""

from stockfish import Stockfish
from typing import Optional, Tuple, List
import os
import sys
import shutil

class StockfishWrapper:
    """
    –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ Stockfish —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫.
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
        engine (Stockfish): –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–≤–∏–∂–∫–∞ Stockfish
        skill_level (int): –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (0-20)
        depth (int): –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
        analysis_cache (dict): –ö—ç—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    """
    
    def __init__(self, skill_level=5, depth=15, path=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Stockfish –¥–≤–∏–∂–∫–∞.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            skill_level (int): –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (0-20), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5
            depth (int): –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15
            path (str): –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Stockfish (–µ—Å–ª–∏ None, –∏—â–µ—Ç –≤ PATH)
            
        –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
            RuntimeError: –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Stockfish
        """
        self.skill_level = max(0, min(20, skill_level))
        self.depth = depth
        self.analysis_cache = {}
        self.move_count = 0
        self.engine = None
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ Stockfish
        stockfish_path = path
        if stockfish_path is None:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ Stockfish –≤ PATH
            stockfish_path = shutil.which("stockfish")
            if stockfish_path is None:
                print("‚ö†Ô∏è  Stockfish –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                print("üí° –†–µ—à–µ–Ω–∏–µ:")
                print("   1. –°–∫–∞—á–∞–π—Ç–µ Stockfish —Å https://stockfishchess.org/download/")
                print("   2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ –ø–∞–ø–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ PATH")
                print("   3. –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ install_stockfish.bat")
                raise RuntimeError("Stockfish executable not found in PATH")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å
        if path is not None and not os.path.exists(path):
            raise RuntimeError(f"‚ùå –§–∞–π–ª Stockfish –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {path}")
        
        try:
            # Handle the case where path might be None
            if path is not None:
                self.engine = Stockfish(path=path)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.engine = Stockfish(path=stockfish_path) if stockfish_path else Stockfish()
            self.engine.set_skill_level(self.skill_level)
            self.engine.set_depth(self.depth)
        except Exception as e:
            raise RuntimeError(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Stockfish: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Stockfish —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    def get_board_state(self) -> List[List[Optional[str]]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏ (8x8).
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            List[List[Optional[str]]]: 2D –º–∞—Å—Å–∏–≤, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç - —Ñ–∏–≥—É—Ä–∞ –∏–ª–∏ None
                                       –ü—Ä–∏–º–µ—Ä: 'P' - –ø–µ—à–∫–∞ –±–µ–ª—ã—Ö, 'p' - –ø–µ—à–∫–∞ —á—ë—Ä–Ω—ã—Ö
        """
        if self.engine is None:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return [
                ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
                ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
                [None, None, None, None, None, None, None, None],
                [None, None, None, None, None, None, None, None],
                [None, None, None, None, None, None, None, None],
                [None, None, None, None, None, None, None, None],
                ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
                ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
            ]
            
        try:
            fen = self.engine.get_fen_position()
            board_str = fen.split()[0]
            rows = board_str.split('/')
            board = []
            for row in rows:
                new_row = []
                for char in row:
                    if char.isdigit():
                        new_row.extend([None] * int(char))
                    else:
                        new_row.append(char)
                board.append(new_row)
            return board
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –¥–æ—Å–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return [[None for _ in range(8)] for _ in range(8)]
    
    def is_move_correct(self, uci_move: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            uci_move (str): –•–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UCI (–Ω–∞–ø—Ä–∏–º–µ—Ä, "e2e4")
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            bool: True –µ—Å–ª–∏ —Ö–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, False –∏–Ω–∞—á–µ
        """
        if self.engine is None:
            return False
            
        if not uci_move or len(uci_move) != 4:
            return False
        try:
            # Get the FEN before attempting the move
            original_fen = self.engine.get_fen_position()
            # Try to make the move
            self.engine.make_moves_from_current_position([uci_move])
            # Get the FEN after the move
            new_fen = self.engine.get_fen_position()
            # Undo the move to restore the original position
            self.engine.set_fen_position(original_fen)
            # If the FEN changed, the move was valid
            return original_fen != new_fen
        except Exception:
            return False
    
    def make_move(self, uci_move: str) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ö–æ–¥ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            uci_move (str): –•–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UCI
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            bool: True –µ—Å–ª–∏ —Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω, False –∏–Ω–∞—á–µ
        """
        if self.engine is None:
            return False
            
        if not self.is_move_correct(uci_move):
            return False
        try:
            self.engine.make_moves_from_current_position([uci_move])
            self.move_count += 1
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö–æ–¥–∞ {uci_move}: {e}")
            return False
    
    def get_best_move(self, depth: Optional[int] = None) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–∏–π —Ö–æ–¥ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            depth (int): –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é)
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: –õ—É—á—à–∏–π —Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UCI, –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ—Ç —Ö–æ–¥–æ–≤
        """
        if self.engine is None:
            return None
            
        try:
            old_depth = None
            if depth:
                old_depth = self.engine.depth
                self.engine.set_depth(depth)
            move = self.engine.get_best_move()
            if depth and old_depth is not None:
                self.engine.set_depth(int(old_depth))
            return move
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–æ–¥–∞: {e}")
            return None
    
    def get_best_moves(self, num_moves: int = 3) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª—É—á—à–∏—Ö —Ö–æ–¥–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            num_moves (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            List[str]: –°–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö —Ö–æ–¥–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        """
        if self.engine is None:
            return []
            
        try:
            best_moves = []
            fen = self.engine.get_fen_position()
            for i in range(num_moves):
                move = self.engine.get_best_move()
                if not move:
                    break
                best_moves.append(move)
                self.engine.make_moves_from_current_position([move])
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ö–æ–¥—ã
            for _ in range(len(best_moves)):
                self.engine.set_fen_position(fen)
            return best_moves
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª—É—á—à–∏—Ö —Ö–æ–¥–æ–≤: {e}")
            return []
    
    def get_side_to_move(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç, —á–µ–π —Ö–æ–¥ –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: 'w' –¥–ª—è –±–µ–ª—ã—Ö, 'b' –¥–ª—è —á—ë—Ä–Ω—ã—Ö
        """
        if self.engine is None:
            return 'w'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'w' (–±–µ–ª—ã–µ)
            
        try:
            return self.engine.get_fen_position().split()[1]
        except Exception:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'w' (–±–µ–ª—ã–µ)
            return 'w'
    
    def is_game_over(self) -> Tuple[bool, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞ –∏ –ø—Ä–∏—á–∏–Ω—É –æ–∫–æ–Ω—á–∞–Ω–∏—è.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Tuple[bool, Optional[str]]: (is_over, reason)
                - is_over: True –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                - reason: –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        if self.engine is None:
            return False, None
            
        # This implementation matches the working version in full_game.py
        # Even though the linter complains, the methods do exist in the stockfish library
        try:
            # Use the get_evaluation method to determine game state
            fen = self.engine.get_fen_position()
            board_state = fen.split()[0]
            
            # Check for mate using evaluation
            eval_result = self.engine.get_evaluation()
            if eval_result and eval_result['type'] == 'mate':
                side = self.get_side_to_move()
                winner = "—á—ë—Ä–Ω—ã–µ" if side == 'w' else "–±–µ–ª—ã–µ"
                return True, f"üèÜ –®–∞—Ö –∏ –º–∞—Ç! –ü–æ–±–µ–¥–∏–ª–∏ {winner}"
            
            # Check for stalemate by seeing if there are any legal moves
            # If evaluation is very low and no legal moves, it's stalemate
            if eval_result and eval_result['type'] == 'cp' and abs(eval_result['value']) < 10000:
                # Try to get a move - if none exists, it's stalemate
                move = self.engine.get_best_move()
                if move is None:
                    return True, "ü§ù –ü–∞—Ç! –ù–∏—á—å—è"
            
            # Check for insufficient material
            pieces = [p for p in board_state if p.lower() in 'pnbrqk']
            white_pieces = [p for p in pieces if p.isupper()]
            black_pieces = [p for p in pieces if p.islower()]
            
            # King vs King
            if len(white_pieces) == 1 and len(black_pieces) == 1:
                return True, "ü§ù –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –º–∞—Ç–∞. –ù–∏—á—å—è"
            
            # King + Bishop vs King or King + Knight vs King
            if (len(white_pieces) <= 2 and len(black_pieces) == 1) or (len(white_pieces) == 1 and len(black_pieces) <= 2):
                # Check if the extra pieces are only bishops or knights
                extra_pieces = []
                if len(white_pieces) > 1:
                    extra_pieces.extend([p for p in white_pieces if p.upper() in 'BN'])
                if len(black_pieces) > 1:
                    extra_pieces.extend([p for p in black_pieces if p.upper() in 'BN'])
                
                if len(extra_pieces) <= 1:  # Only one bishop or knight extra
                    return True, "ü§ù –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –º–∞—Ç–∞. –ù–∏—á—å—è"
        except Exception:
            pass
        
        return False, None
    
    def get_fen(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ FEN (Forsyth‚ÄìEdwards Notation).
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            str: –ü–æ–∑–∏—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ FEN
        """
        if self.engine is None:
            return 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'
            
        try:
            return self.engine.get_fen_position()
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ FEN: {e}")
            return 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'
    
    def get_evaluation(self) -> Optional[float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø–µ—à–∫–∞—Ö.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            float: –û—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ = –±–µ–ª—ã–º —Ö–æ—Ä–æ—à–æ, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ = —á—ë—Ä–Ω—ã–º)
                   –ù–∞–ø—Ä–∏–º–µ—Ä: 1.5 –æ–∑–Ω–∞—á–∞–µ—Ç –ø–µ—Ä–µ–≤–µ—Å –±–µ–ª—ã—Ö –Ω–∞ 1.5 –ø–µ—à–∫–∏
        """
        if self.engine is None:
            return None
            
        try:
            eval_score = self.engine.get_evaluation()
            if eval_score and 'value' in eval_score:
                return eval_score['value'] / 100.0
        except Exception:
            pass
        return None
    
    def get_best_move_eval(self) -> Tuple[Optional[str], Optional[float]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–∏–π —Ö–æ–¥ –∏ –µ–≥–æ –æ—Ü–µ–Ω–∫—É.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Tuple[str, float]: –ö–æ—Ä—Ç–µ–∂ (—Ö–æ–¥, –æ—Ü–µ–Ω–∫–∞) –∏–ª–∏ (None, None)
        """
        if self.engine is None:
            return None, None
            
        try:
            move = self.engine.get_best_move()
            eval_score = self.engine.get_evaluation()
            if eval_score and 'value' in eval_score:
                value = eval_score['value'] / 100.0
                return move, value
            return move, None
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏ —Ö–æ–¥–∞: {e}")
            return None, None
    
    def reset_board(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–æ—Å–∫—É –≤ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é."""
        if self.engine is None:
            return
            
        try:
            start_fen = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'
            self.engine.set_fen_position(start_fen)
            self.move_count = 0
            self.analysis_cache.clear()
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–æ—Å–∫–∏: {e}")
    
    def set_fen(self, fen: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –ø–æ FEN.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            fen (str): –ü–æ–∑–∏—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ FEN
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            bool: True –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        if self.engine is None:
            return False
            
        if not fen:
            return False
        try:
            self.engine.set_fen_position(fen)
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ FEN: {e}")
            return False
    
    def quit(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Stockfish –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        # This implementation matches the working version in full_game.py
        # Even though the linter complains, the method does exist in the stockfish library
        if self.engine is None:
            return
            
        try:
            # Try to quit if the method exists
            if hasattr(self.engine, 'quit'):
                # self.engine.quit()  # Removed due to compatibility issues
                pass
        except Exception:
            pass