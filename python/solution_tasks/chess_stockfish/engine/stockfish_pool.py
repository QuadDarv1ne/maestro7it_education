# ============================================================================
# engine/stockfish_pool.py
# ============================================================================

"""
–ú–æ–¥—É–ª—å: engine/stockfish_pool.py

–û–ø–∏—Å–∞–Ω–∏–µ:
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —à–∞—Ö–º–∞—Ç–Ω–æ–º—É –¥–≤–∏–∂–∫—É Stockfish –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è
    –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–≤–∏–∂–∫–æ–≤.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ü—É–ª –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –¥–≤–∏–∂–∫–æ–≤ Stockfish
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –¥–≤–∏–∂–∫–æ–≤
    - –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç –¥–≤–∏–∂–∫–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–≤–∏–∂–∫–æ–≤
"""

import threading
import queue
import time
from typing import Optional, Dict, Any
from stockfish import Stockfish
import os
import shutil


class StockfishEnginePool:
    """
    –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –¥–≤–∏–∂–∫–∞–º Stockfish –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤.
    
    –ê—Ç—Ä–∏–±—É—Ç—ã:
        _pool (queue.Queue): –û—á–µ—Ä–µ–¥—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–≤–∏–∂–∫–æ–≤
        _used_engines (set): –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–≤–∏–∂–∫–æ–≤
        _lock (threading.Lock): –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        _path (str): –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Stockfish
        _max_size (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
        _min_size (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
        _engine_config (dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –¥–≤–∏–∂–∫–æ–≤
        _cleanup_thread (threading.Thread): –ü–æ—Ç–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–≤–∏–∂–∫–æ–≤
        _running (bool): –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã –ø—É–ª–∞
    """
    
    _instance = None
    _instance_lock = threading.Lock()
    
    def __new__(cls, *args, **kwargs):
        """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è singleton –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–ª—è –ø—É–ª–∞ –¥–≤–∏–∂–∫–æ–≤."""
        if not cls._instance:
            with cls._instance_lock:
                if not cls._instance:
                    cls._instance = super(StockfishEnginePool, cls).__new__(cls)
        return cls._instance
    
    def __init__(self, path: Optional[str] = None, max_size: int = 10, min_size: int = 2, 
                 skill_level: int = 5, depth: int = 15):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –¥–≤–∏–∂–∫–æ–≤ Stockfish.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            path (str): –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Stockfish
            max_size (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
            min_size (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
            skill_level (int): –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (0-20)
            depth (int): –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø—É–ª
        if hasattr(self, '_initialized') and self._initialized:
            return
            
        self._pool = queue.Queue()
        self._used_engines = set()
        self._lock = threading.Lock()
        self._max_size = max_size
        self._min_size = min_size
        self._engine_config = {
            'skill_level': skill_level,
            'depth': depth
        }
        self._running = True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ Stockfish
        self._path = path
        if self._path is None:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ Stockfish –≤ PATH
            self._path = shutil.which("stockfish")
            if self._path is None:
                print("‚ö†Ô∏è  Stockfish –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                print("üí° –†–µ—à–µ–Ω–∏–µ:")
                print("   1. –°–∫–∞—á–∞–π—Ç–µ Stockfish —Å https://stockfishchess.org/download/")
                print("   2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ –ø–∞–ø–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ PATH")
                raise RuntimeError("Stockfish executable not found in PATH")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(self._path):
            raise RuntimeError(f"‚ùå –§–∞–π–ª Stockfish –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {self._path}")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–∏–∂–∫–æ–≤
        self._prepopulate_pool()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏
        self._cleanup_thread = threading.Thread(target=self._cleanup_worker, daemon=True)
        self._cleanup_thread.start()
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
        self._initialized = True
        print(f"‚úÖ –ü—É–ª Stockfish –¥–≤–∏–∂–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑–º–µ—Ä: {min_size}-{max_size})")
    
    def _prepopulate_pool(self):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—É–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–≤–∏–∂–∫–æ–≤."""
        for _ in range(self._min_size):
            try:
                engine = self._create_engine()
                self._pool.put(engine)
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–≤–∏–∂–æ–∫ –¥–ª—è –ø—É–ª–∞: {e}")
    
    def _create_engine(self) -> Stockfish:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ Stockfish.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Stockfish: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
        """
        try:
            engine = Stockfish(path=self._path)
            engine.set_skill_level(self._engine_config['skill_level'])
            engine.set_depth(self._engine_config['depth'])
            return engine
        except Exception as e:
            raise RuntimeError(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Stockfish –¥–≤–∏–∂–æ–∫: {e}")
    
    def get_engine(self, timeout: float = 5.0) -> Optional[Stockfish]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∏–∑ –ø—É–ª–∞.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            timeout (float): –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –¥–≤–∏–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Stockfish: –î–æ—Å—Ç—É–ø–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∏–ª–∏ None –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç
        """
        try:
            engine = self._pool.get(timeout=timeout)
            with self._lock:
                self._used_engines.add(id(engine))
            return engine
        except queue.Empty:
            # –ï—Å–ª–∏ –ø—É–ª –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
            with self._lock:
                if len(self._used_engines) < self._max_size:
                    try:
                        engine = self._create_engine()
                        self._used_engines.add(id(engine))
                        return engine
                    except Exception as e:
                        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –¥–≤–∏–∂–æ–∫: {e}")
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–≤–∏–∂–∫–∞ –∏–∑ –ø—É–ª–∞: {e}")
            return None
    
    def return_engine(self, engine: Stockfish):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–∏–∂–æ–∫ –≤ –ø—É–ª.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            engine (Stockfish): –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –¥–≤–∏–∂–æ–∫
        """
        if engine is None:
            return
            
        try:
            with self._lock:
                engine_id = id(engine)
                if engine_id in self._used_engines:
                    self._used_engines.remove(engine_id)
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    engine.set_fen_position('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1')
                
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–≤–∏–∂–æ–∫ –≤ –ø—É–ª –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω
            with self._lock:
                current_pool_size = self._pool.qsize() + len(self._used_engines)
                
            if current_pool_size <= self._max_size:
                self._pool.put(engine)
            else:
                # –ï—Å–ª–∏ –ø—É–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
                try:
                    engine.__del__()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
                except:
                    pass
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–≤–∏–∂–∫–∞ –≤ –ø—É–ª: {e}")
    
    def _cleanup_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–≤–∏–∂–∫–æ–≤."""
        while self._running:
            try:
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
                # –û—á–∏—â–∞–µ–º –ø—É–ª –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                with self._lock:
                    current_pool_size = self._pool.qsize()
                    
                while current_pool_size > self._min_size:
                    try:
                        engine = self._pool.get_nowait()
                        try:
                            engine.__del__()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
                        except:
                            pass
                        current_pool_size -= 1
                    except queue.Empty:
                        break
                        
            except Exception as e:
                if self._running:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—É–ª –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ—á–∏—Å—Ç–∫–∏ –ø—É–ª–∞: {e}")
    
    def get_pool_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞.
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—É–ª–∞
        """
        with self._lock:
            return {
                'available_engines': self._pool.qsize(),
                'used_engines': len(self._used_engines),
                'max_size': self._max_size,
                'min_size': self._min_size
            }
    
    def resize_pool(self, new_min_size: int, new_max_size: int):
        """
        –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞.
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            new_min_size (int): –ù–æ–≤—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            new_max_size (int): –ù–æ–≤—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        """
        with self._lock:
            self._min_size = max(1, new_min_size)
            self._max_size = max(self._min_size, new_max_size)
    
    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç –ø—É–ª –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –¥–≤–∏–∂–∫–∏."""
        self._running = False
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥–≤–∏–∂–∫–∏ –≤ –ø—É–ª–µ
        while not self._pool.empty():
            try:
                engine = self._pool.get_nowait()
                try:
                    engine.__del__()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
                except:
                    pass
            except queue.Empty:
                break
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–≤–∏–∂–∫–∏
        with self._lock:
            self._used_engines.clear()
        
        print("‚úÖ –ü—É–ª Stockfish –¥–≤–∏–∂–∫–æ–≤ –æ—á–∏—â–µ–Ω")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –¥–≤–∏–∂–∫–æ–≤
_stockfish_pool: Optional[StockfishEnginePool] = None
_pool_lock = threading.Lock()


def get_stockfish_pool(path: Optional[str] = None, max_size: int = 10, min_size: int = 2,
                      skill_level: int = 5, depth: int = 15) -> StockfishEnginePool:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª Stockfish –¥–≤–∏–∂–∫–æ–≤ (singleton).
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        path (str): –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É Stockfish
        max_size (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
        min_size (int): –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
        skill_level (int): –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        depth (int): –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        StockfishEnginePool: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª –¥–≤–∏–∂–∫–æ–≤
    """
    global _stockfish_pool
    
    with _pool_lock:
        if _stockfish_pool is None:
            _stockfish_pool = StockfishEnginePool(
                path=path, max_size=max_size, min_size=min_size,
                skill_level=skill_level, depth=depth
            )
        return _stockfish_pool


def cleanup_stockfish_pool():
    """–û—á–∏—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É–ª Stockfish –¥–≤–∏–∂–∫–æ–≤."""
    global _stockfish_pool
    
    with _pool_lock:
        if _stockfish_pool is not None:
            _stockfish_pool.cleanup()
            _stockfish_pool = None