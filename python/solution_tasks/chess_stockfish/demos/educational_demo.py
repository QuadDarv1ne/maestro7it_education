#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π chess_stockfish.
"""

import sys
import os
import time
import random

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –∏–≥—Ä—ã
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from utils.educational import ChessEducator
from utils.opening_book import OpeningBook

def demonstrate_educational_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π."""
    print("üéì –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π chess_stockfish")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    educator = ChessEducator()
    
    print("\nüìö 1. –°–ª—É—á–∞–π–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã:")
    for i in range(3):
        tip = educator.get_random_tip()
        print(f"   üí° {tip}")
        time.sleep(0.5)
    
    print("\nüìñ 2. –û–±—ä—è—Å–Ω–µ–Ω–∏—è —à–∞—Ö–º–∞—Ç–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤:")
    terms = ["—à–∞—Ö", "–º–∞—Ç", "—Ä–æ–∫–∏—Ä–æ–≤–∫–∞", "—Ñ–æ—Ä–∫", "–ø–∏–Ω"]
    for term in terms:
        explanation = educator.get_term_explanation(term)
        print(f"   {term.capitalize()}: {explanation}")
        time.sleep(0.5)
    
    print("\n‚ôüÔ∏è 3. –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ–∏–≥—É—Ä–∞–º:")
    pieces = ["–ø–µ—à–∫–∞", "–ª–∞–¥—å—è", "–∫–æ–Ω—å", "—Å–ª–æ–Ω", "—Ñ–µ—Ä–∑—å", "–∫–æ—Ä–æ–ª—å"]
    for piece in pieces:
        hint = educator.get_piece_hint(piece)
        print(f"   {piece.capitalize()}: {hint}")
        time.sleep(0.5)
    
    print("\nüìú 4. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã:")
    for i in range(3):
        fact = educator.get_historical_fact()
        print(f"   üìö {fact}")
        time.sleep(0.5)
    
    print("\n‚öîÔ∏è 5. –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –º–æ—Ç–∏–≤—ã:")
    for i in range(3):
        motiv = educator.get_tactical_motiv()
        print(f"   {motiv}")
        time.sleep(0.5)
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–±—é—Ç–Ω—É—é –∫–Ω–∏–≥—É
    opening_book = OpeningBook()
    
    print("\nüéØ 6. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–±—é—Ç–∞—Ö:")
    openings = ["–ò—Å–ø–∞–Ω—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è", "–°–∏—Ü–∏–ª–∏–∞–Ω—Å–∫–∞—è –∑–∞—â–∏—Ç–∞", "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è"]
    for opening in openings:
        info = opening_book.get_opening_info(opening)
        if info:
            print(f"   {opening}:")
            print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
            print(f"     –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {info['strategy']}")
            print(f"     –°–ª–æ–∂–Ω–æ—Å—Ç—å: {info['difficulty']}")
            if 'educational_tips' in info:
                print(f"     –°–æ–≤–µ—Ç—ã: {info['educational_tips'][0]}")
            print()
            time.sleep(1)
    
    print("\nüìò 7. –î–µ–±—é—Ç–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:")
    for i in range(3):
        principle, explanation = opening_book.get_random_principle()
        print(f"   {principle}")
        print(f"   {explanation}")
        print()
        time.sleep(1)
    
    print("\nüß© 8. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏:")
    for i in range(2):
        puzzle = educator.get_random_puzzle()
        print(f"   –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞: {puzzle['name']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {puzzle['description']}")
        print(f"   –†–µ—à–µ–Ω–∏–µ: {puzzle['solution']}")
        print()
        time.sleep(1)
    
    print("\nüèÖ 9. –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:")
    achievements = ["first_game", "tactical_master", "opening_expert"]
    for achievement_key in achievements:
        info = educator.get_achievement_info(achievement_key)
        if info:
            print(f"   {info['name']}: {info['description']}")
            time.sleep(0.5)
    
    print("\nüìà 10. –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:")
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    educator.puzzles_solved = 5
    educator.add_learned_opening("–ò—Å–ø–∞–Ω—Å–∫–∞—è –ø–∞—Ä—Ç–∏—è")
    educator.add_learned_opening("–°–∏—Ü–∏–ª–∏–∞–Ω—Å–∫–∞—è –∑–∞—â–∏—Ç–∞")
    
    progress = educator.get_learning_progress()
    print(f"   –¢–∞–∫—Ç–∏–∫–∞: {progress['tactics']}/10")
    print(f"   –î–µ–±—é—Ç—ã: {progress['openings']}/5")
    print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {progress['strategy']}/8")
    
    unlocked = educator.get_unlocked_achievements()
    if unlocked:
        print(f"   –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(unlocked)}")
    
    print("\n" + "=" * 70)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def interactive_demo():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è."""
    print("\nüéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 50)
    
    educator = ChessEducator()
    opening_book = OpeningBook()
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç")
        print("2. –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç")
        print("3. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–≥—É—Ä–µ")
        print("4. –ü–æ–ª—É—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞")
        print("5. –ü–æ–ª—É—á–∏—Ç—å –¥–µ–±—é—Ç–Ω—ã–π —Å–æ–≤–µ—Ç")
        print("6. –†–µ—à–∏—Ç—å –≥–æ–ª–æ–≤–æ–ª–æ–º–∫—É")
        print("7. –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == "1":
            tip = educator.get_random_tip()
            print(f"\nüí° –°–æ–≤–µ—Ç: {tip}")
        elif choice == "2":
            fact = educator.get_historical_fact()
            print(f"\nüìö –§–∞–∫—Ç: {fact}")
        elif choice == "3":
            piece = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã (–ø–µ—à–∫–∞, –ª–∞–¥—å—è, –∫–æ–Ω—å, —Å–ª–æ–Ω, —Ñ–µ—Ä–∑—å, –∫–æ—Ä–æ–ª—å): ").strip()
            hint = educator.get_piece_hint(piece)
            print(f"\n‚ôüÔ∏è {piece.capitalize()}: {hint}")
        elif choice == "4":
            term = input("–í–≤–µ–¥–∏—Ç–µ —à–∞—Ö–º–∞—Ç–Ω—ã–π —Ç–µ—Ä–º–∏–Ω: ").strip()
            explanation = educator.get_term_explanation(term)
            print(f"\nüìñ {term.capitalize()}: {explanation}")
        elif choice == "5":
            opening = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–±—é—Ç–∞: ").strip()
            info = opening_book.get_opening_info(opening)
            if info:
                print(f"\nüéØ {opening}:")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}")
                tip = opening_book.get_educational_tip(opening)
                if tip:
                    print(f"   üí° –°–æ–≤–µ—Ç: {tip}")
            else:
                print("–î–µ–±—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif choice == "6":
            puzzle = educator.get_random_puzzle()
            print(f"\nüß© –ì–æ–ª–æ–≤–æ–ª–æ–º–∫–∞: {puzzle['name']}")
            print(f"   {puzzle['description']}")
            print(f"   –ü–æ–∑–∏—Ü–∏—è: {puzzle['fen']}")
            user_solution = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ UCI, –Ω–∞–ø—Ä–∏–º–µ—Ä e2e4): ").strip()
            if educator.check_puzzle_solution(puzzle, user_solution):
                print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {puzzle['solution']}")
        elif choice == "7":
            progress = educator.get_learning_progress()
            print(f"\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:")
            print(f"   –¢–∞–∫—Ç–∏–∫–∞: {progress['tactics']} –æ—á–∫–æ–≤")
            print(f"   –î–µ–±—é—Ç—ã: {progress['openings']} –∏–∑—É—á–µ–Ω–æ")
            print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {progress['strategy']} –æ—á–∫–æ–≤")
            unlocked = educator.get_unlocked_achievements()
            if unlocked:
                print(f"   –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {', '.join(unlocked)}")
        elif choice == "0":
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

if __name__ == "__main__":
    demonstrate_educational_features()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    interactive = input("\n–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é? (y/n): ").strip().lower()
    if interactive in ('y', 'yes', '–¥', '–¥–∞'):
        interactive_demo()
    
    print("\nüëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ chess_stockfish!")