#!/usr/bin/env python3
"""
Demonstration of performance improvements in the chess game.
"""

import sys
import os
import time
import pygame

# Add the project root to the Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from game.chess_game import ChessGame

def demonstrate_caching_performance():
    """Demonstrate the performance improvements from caching."""
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 50)
    
    # Initialize pygame for the demo
    pygame.init()
    screen = pygame.display.set_mode((512, 612))
    
    try:
        # Create a game instance
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ —à–∞—Ö–º–∞—Ç–Ω–æ–π –ø–∞—Ä—Ç–∏–∏...")
        game = ChessGame()
        print("   ‚úì –ü–∞—Ä—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # Show initial board
        print("\n2. –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:")
        board = game.get_board_state()
        print_board(board)
        
        # Demonstrate valid moves caching
        print("\n3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ö–æ–¥–æ–≤...")
        
        # First call (no cache)
        start_time = time.time()
        moves1 = game._get_valid_moves(6, 4)  # e2 pawn
        first_call_time = time.time() - start_time
        
        # Second call (should use cache)
        start_time = time.time()
        moves2 = game._get_valid_moves(6, 4)  # Should use cache
        second_call_time = time.time() - start_time
        
        print(f"   –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {first_call_time:.6f} —Å–µ–∫—É–Ω–¥")
        print(f"   –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {second_call_time:.6f} —Å–µ–∫—É–Ω–¥")
        print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {first_call_time/second_call_time:.2f}x" if second_call_time > 0 else "   –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞")
        print(f"   –•–æ–¥—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã: {moves1 == moves2}")
        
        # Demonstrate board state caching
        print("\n4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏...")
        
        # First call (no cache)
        start_time = time.time()
        board1 = game.get_board_state()
        first_call_time = time.time() - start_time
        
        # Second call (should use cache)
        start_time = time.time()
        board2 = game.get_board_state()  # Should use cache
        second_call_time = time.time() - start_time
        
        print(f"   –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {first_call_time:.6f} —Å–µ–∫—É–Ω–¥")
        print(f"   –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {second_call_time:.6f} —Å–µ–∫—É–Ω–¥")
        print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {first_call_time/second_call_time:.2f}x" if second_call_time > 0 else "   –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞")
        
        # Demonstrate AI move caching
        print("\n5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ–¥–æ–≤ –ò–ò...")
        
        # First AI call
        start_time = time.time()
        ai_move1 = game._get_cached_best_move(depth=1)  # Fast AI call
        first_call_time = time.time() - start_time
        
        # Second AI call (same position)
        start_time = time.time()
        ai_move2 = game._get_cached_best_move(depth=1)  # Should use cache
        second_call_time = time.time() - start_time
        
        print(f"   –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –ò–ò: {first_call_time:.6f} —Å–µ–∫—É–Ω–¥")
        print(f"   –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –ò–ò: {second_call_time:.6f} —Å–µ–∫—É–Ω–¥")
        print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {first_call_time/second_call_time:.2f}x" if second_call_time > 0 else "   –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞")
        
        # Make a move and test cache invalidation
        if ai_move1:
            print(f"\n6. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞ –ò–ò: {ai_move1}")
            game.engine.make_move(ai_move1)
            
            # Now test that cache is invalidated properly
            start_time = time.time()
            ai_move3 = game._get_cached_best_move(depth=1)  # New position
            new_position_time = time.time() - start_time
            
            print(f"   –í—ã–∑–æ–≤ –ò–ò –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏: {new_position_time:.6f} —Å–µ–∫—É–Ω–¥")
            print(f"   –•–æ–¥—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è: {ai_move1 != ai_move3}")
        
        print("\n" + "=" * 50)
        print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print("  üöÄ –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ö–æ–¥–æ–≤ (1 —Å–µ–∫—É–Ω–¥–∞)")
        print("  üöÄ –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –¥–æ—Å–∫–µ")
        print("  üöÄ –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ—Å–∫–∏ (200 –º—Å)")
        print("  üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–æ –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ–¥–æ–≤ –ò–ò (10 —Å–µ–∫—É–Ω–¥)")
        print("  üöÄ –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ –ò–ò (30 —Å–µ–∫—É–Ω–¥)")
        print("  üöÄ –£–≤–µ–ª–∏—á–µ–Ω—ã —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (60 FPS –¥–ª—è –¥–æ—Å–∫–∏, 30 FPS –¥–ª—è UI)")
        print("  üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("  üöÄ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ FPS –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ—è")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        pygame.quit()
    
    return True

def print_board(board):
    """Print the board to console."""
    print("  a b c d e f g h")
    for i, row in enumerate(board):
        print(f"{8-i} ", end="")
        for cell in row:
            if cell is None:
                print(". ", end="")
            else:
                print(f"{cell} ", end="")
        print(f" {8-i}")
    print("  a b c d e f g h")

def main():
    """Main demonstration function."""
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ chess_stockfish")
    print("=" * 60)
    
    success = demonstrate_caching_performance()
    
    if success:
        print("\nüéâ –í—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:")
        print("  ‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä–µ–Ω–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–æ—Å–∫–∏")
        print("  ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∞ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä")
        print("  ‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        print("  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        print("  ‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∞ –ø–ª–∞–≤–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–π")
        print("  ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º")
    else:
        print("\n‚ùå –í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

if __name__ == "__main__":
    main()