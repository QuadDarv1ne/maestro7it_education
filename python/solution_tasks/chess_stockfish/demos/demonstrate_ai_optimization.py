#!/usr/bin/env python3
"""
Demonstration of AI optimization improvements in the chess game.
"""

import sys
import os
import time
import pygame

# Add the project root to the Python path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from game.chess_game import ChessGame

def demonstrate_ai_performance():
    """Demonstrate the AI performance improvements."""
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ò–ò")
    print("=" * 50)
    
    # Initialize pygame for the demo
    pygame.init()
    screen = pygame.display.set_mode((512, 612))
    
    try:
        # Create a game instance
        print("1. –°–æ–∑–¥–∞–Ω–∏–µ —à–∞—Ö–º–∞—Ç–Ω–æ–π –ø–∞—Ä—Ç–∏–∏...")
        game = ChessGame()
        print("   ‚úì –ü–∞—Ä—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # Show initial board
        print("\n2. –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è:")
        board = game.get_board_state()
        print_board(board)
        
        # Demonstrate AI move caching performance
        print("\n3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ–¥–æ–≤ –ò–ò...")
        
        # First AI call (no cache)
        start_time = time.time()
        ai_move1 = game._get_cached_best_move(depth=1)  # Fast AI call
        first_call_time = time.time() - start_time
        
        # Second AI call (should use cache)
        start_time = time.time()
        ai_move2 = game._get_cached_best_move(depth=1)  # Should use cache
        second_call_time = time.time() - start_time
        
        print(f"   –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –ò–ò: {first_call_time:.6f} —Å–µ–∫—É–Ω–¥")
        print(f"   –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –ò–ò: {second_call_time:.6f} —Å–µ–∫—É–Ω–¥")
        print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {first_call_time/second_call_time:.2f}x" if second_call_time > 0 else "   –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞")
        
        # Demonstrate AI with different depths
        print("\n4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ò–ò —Å —Ä–∞–∑–Ω–æ–π –≥–ª—É–±–∏–Ω–æ–π –∞–Ω–∞–ª–∏–∑–∞...")
        depths = [1, 2, 3, 5]
        times = []
        
        for depth in depths:
            start_time = time.time()
            move = game._get_cached_best_move(depth=depth)
            elapsed = time.time() - start_time
            times.append(elapsed)
            print(f"   –ì–ª—É–±–∏–Ω–∞ {depth}: {elapsed:.6f} —Å–µ–∫—É–Ω–¥")
        
        # Demonstrate AI move cooldown
        print("\n5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –ò–ò...")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏ –ò–ò: {game.ai_move_cooldown} —Å–µ–∫—É–Ω–¥")
        
        # Demonstrate game loop optimization
        print("\n6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
        print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ò–ò: {1/game.board_update_interval:.0f} FPS")
        print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏: {1/game.board_update_interval:.0f} FPS")
        print(f"   –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI: {1/game.ui_update_interval:.0f} FPS")
        
        print("\n" + "=" * 50)
        print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ò–ò:")
        print("  üöÄ –£–º–µ–Ω—å—à–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ —Ö–æ–¥–∞ –ò–ò —Å 0.3—Å –¥–æ 0.1—Å")
        print("  üöÄ –°–Ω–∏–∂–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ò–ò —Å 0.05—Å –¥–æ 0.01—Å")
        print("  üöÄ –ü–æ–≤—ã—à–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ò–ò –¥–æ 20 FPS")
        print("  üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≥–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ (–º–∞–∫—Å. 10)")
        print("  üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–æ –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò –¥–æ 15 —Å–µ–∫—É–Ω–¥")
        print("  üöÄ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("  üöÄ –£–≤–µ–ª–∏—á–µ–Ω—ã —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (60 FPS –¥–æ—Å–∫–∞, 30 FPS UI)")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        pygame.quit()
    
    return True

def print_board(board):
    """Print the board to console."""
    print("  a b c d e f g h")
    for i, row in enumerate(board):
        print(f"{8-i} ", end="")
        for cell in row:
            if cell is None:
                print(". ", end="")
            else:
                print(f"{cell} ", end="")
        print(f" {8-i}")
    print("  a b c d e f g h")

def main():
    """Main demonstration function."""
    print("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ò–ò chess_stockfish")
    print("=" * 60)
    
    success = demonstrate_ai_performance()
    
    if success:
        print("\nüéâ –í—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ò–ò —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:")
        print("  ‚Ä¢ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä–µ–Ω—ã —Ö–æ–¥—ã –ò–ò")
        print("  ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∞ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä")
        print("  ‚Ä¢ –£–ª—É—á—à–µ–Ω–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        print("  ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        print("  ‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∞ –ø–ª–∞–≤–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–π")
        print("  ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º –ò–ò")
    else:
        print("\n‚ùå –í–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

if __name__ == "__main__":
    main()