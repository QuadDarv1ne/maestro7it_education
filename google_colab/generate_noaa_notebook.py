import nbformat as nbf
import os

# –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –Ω–æ—É—Ç–±—É–∫
nb = nbf.v4.new_notebook()

# –Ø—á–µ–π–∫–∞ 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫ (Markdown)
nb["cells"].append(nbf.v4.new_markdown_cell("""
# üõ∞Ô∏è –ü—Ä–∏—ë–º –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ —Å–ø—É—Ç–Ω–∏–∫–æ–≤ NOAA

–≠—Ç–æ—Ç –Ω–æ—É—Ç–±—É–∫ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
1. –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ–ª—ë—Ç—ã —Å–ø—É—Ç–Ω–∏–∫–æ–≤ NOAA
2. –ó–∞–ø–∏—Å–∞—Ç—å —Ä–∞–¥–∏–æ—Å–∏–≥–Ω–∞–ª –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–ª—ë—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è RTL-SDR)
3. –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è SatDump)

> üí° **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è**:
> - RTL-SDR —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
> - –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π [SatDump](https://github.com/SatDump/SatDump)
> - –ó–∞–ø—É—Å–∫ **–ª–æ–∫–∞–ª—å–Ω–æ** (–Ω–µ –≤ Colab!)
"""))

# –Ø—á–µ–π–∫–∞ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—ã
nb["cells"].append(nbf.v4.new_code_cell("""
import sys
import os

if 'google.colab' in sys.modules:
    print("‚ùå –≠—Ç–æ—Ç –Ω–æ—É—Ç–±—É–∫ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –≤ Google Colab ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —Å RTL-SDR.")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞—á–∞–π—Ç–µ –Ω–æ—É—Ç–±—É–∫ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–≤–æ—ë–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ.")
else:
    print("‚úÖ –ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
"""))

# –Ø—á–µ–π–∫–∞ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
nb["cells"].append(nbf.v4.new_code_cell("""
import subprocess
import sys

def install_packages():
    packages = ["pyorbital", "ephem", "pyrtlsdr", "numpy"]
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--no-cache-dir"] + packages)

try:
    import pyorbital, ephem, rtlsdr, numpy
    print("‚úÖ –í—Å–µ Python-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
except ImportError:
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")
    install_packages()
    print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
"""))

# –Ø—á–µ–π–∫–∞ 4: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–ª—ë—Ç–∞
nb["cells"].append(nbf.v4.new_code_cell("""
from pyorbital.orbital import Orbital
from datetime import datetime, timedelta

def get_next_pass(sat_name="NOAA 19", location=(55.75, 37.62, 144), hours=24):
    orb = Orbital(sat_name)
    now = datetime.utcnow()
    end_time = now + timedelta(hours=hours)
    current = now
    
    while current < end_time:
        az, el = orb.get_observer_look(current, location[1], location[0], location[2])
        if el > 10:
            start = current
            while el > 10 and current < end_time:
                current += timedelta(seconds=30)
                az, el = orb.get_observer_look(current, location[1], location[0], location[2])
            end = current
            duration = (end - start).seconds // 60
            return {
                'satellite': sat_name,
                'start': start,
                'end': end,
                'duration_min': duration,
                'frequency_mhz': 137.62  # NOAA 19
            }
        current += timedelta(minutes=1)
    return None

LOCATION = (55.75, 37.62, 144)  # –ú–æ—Å–∫–≤–∞
next_pass = get_next_pass(location=LOCATION)

if next_pass:
    print(f"üõ∞Ô∏è  –ë–ª–∏–∂–∞–π—à–∏–π –ø—Ä–æ–ª—ë—Ç: {next_pass['satellite']}")
    print(f"‚è∞ –ù–∞—á–∞–ª–æ: {next_pass['start'].strftime('%Y-%m-%d %H:%M UTC')}")
    print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {next_pass['duration_min']} –º–∏–Ω—É—Ç")
else:
    print("‚ùå –ü—Ä–æ–ª—ë—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞.")
"""))

# –Ø—á–µ–π–∫–∞ 5: –ó–∞–ø–∏—Å—å —Å–∏–≥–Ω–∞–ª–∞
nb["cells"].append(nbf.v4.new_code_cell("""
import time
import numpy as np
import os
from rtlsdr import RtlSdr
from datetime import datetime

def record_pass(pass_info, output_dir="recordings"):
    os.makedirs(output_dir, exist_ok=True)
    
    now = datetime.utcnow()
    wait_sec = (pass_info['start'] - now).total_seconds()
    if wait_sec > 0:
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–ª—ë—Ç–∞... ({int(wait_sec)} —Å–µ–∫)")
        time.sleep(wait_sec)
    
    sdr = RtlSdr()
    sdr.sample_rate = 2.4e6
    sdr.center_freq = pass_info['frequency_mhz'] * 1e6
    sdr.gain = 'auto'
    
    duration = (pass_info['end'] - pass_info['start']).seconds
    total_samples = int(sdr.sample_rate * duration)
    chunk = 256 * 1024
    
    filename = f"{output_dir}/{pass_info['satellite'].replace(' ', '_')}_{pass_info['start'].strftime('%Y%m%d_%H%M%S')}.cu8"
    print(f"üì° –ó–∞–ø–∏—Å—å —Å–∏–≥–Ω–∞–ª–∞... ({duration} —Å–µ–∫)")
    
    with open(filename, 'wb') as f:
        collected = 0
        while collected < total_samples:
            samples = sdr.read_samples(min(chunk, total_samples - collected))
            np.array(samples.view(np.float32)).astype(np.int8).tofile(f)
            collected += len(samples)
            print(f"   –ó–∞–ø–∏—Å–∞–Ω–æ: {collected / sdr.sample_rate:.1f} / {duration} —Å–µ–∫", end='\\r')
    
    sdr.close()
    print(f"\\n‚úÖ –°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
    return filename

# –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å:
# if 'next_pass' in locals() and next_pass:
#     iq_file = record_pass(next_pass)
"""))

# –Ø—á–µ–π–∫–∞ 6: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ SatDump
nb["cells"].append(nbf.v4.new_code_cell("""
import subprocess
import os

def decode_with_satdump(iq_file, satellite="NOAA-19"):
    base = os.path.splitext(iq_file)[0]
    cmd = [
        "satdump", "generic",
        "--input_file", iq_file,
        "--output_file", base,
        "--satellite", satellite,
        "--baseband_type", "iq",
        "--baseband_format", "cu8"
    ]
    
    print("üîÑ –ó–∞–ø—É—Å–∫ SatDump...")
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        if result.returncode == 0:
            png_files = [f for f in os.listdir('.') if f.startswith(os.path.basename(base)) and f.endswith('.png')]
            if png_files:
                print("‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                for f in png_files:
                    print(f"  - {f}")
                return png_files
        else:
            print("‚ùå –û—à–∏–±–∫–∞ SatDump:", result.stderr)
    except FileNotFoundError:
        print("‚ùå SatDump –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: https://github.com/SatDump/SatDump")
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è  –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω).")
    return []

# –ü—Ä–∏–º–µ—Ä:
# decoded_images = decode_with_satdump("recordings/NOAA_19_20251028_190145.cu8")
"""))

# –Ø—á–µ–π–∫–∞ 7: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
nb["cells"].append(nbf.v4.new_markdown_cell("""
## üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

1. **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SatDump**: https://github.com/SatDump/SatDump  
2. **–ü–æ–¥–∫–ª—é—á–∏—Ç–µ RTL-SDR** –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É.  
3. **–ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–æ—É—Ç–±—É–∫ –ª–æ–∫–∞–ª—å–Ω–æ** (–Ω–µ –≤ –æ–±–ª–∞–∫–µ!).  
4. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —è—á–µ–π–∫—É –∑–∞–ø–∏—Å–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ—ë **–∑–∞ 1‚Äì2 –º–∏–Ω—É—Ç—ã –¥–æ –ø—Ä–æ–ª—ë—Ç–∞**.  
5. –ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ.

## üì° –ß–∞—Å—Ç–æ—Ç—ã NOAA
- NOAA 15: 137.620 MHz  
- NOAA 18: 137.9125 MHz  
- NOAA 19: 137.100 MHz  

## üåê –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
- [N2YO.com](https://www.n2yo.com) ‚Äî –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏  
- [SatNOGS](https://satnogs.org) ‚Äî —Å–µ—Ç—å –ø—Ä–∏—ë–º–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π  
- [RTL-SDR Blog Guide](https://www.rtl-sdr.com/rtl-sdr-tutorial-receiving-noaa-weather-satellite-images/) ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
"""))

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
output_file = "NOAA_Satellite_Reception.ipynb"
with open(output_file, "w", encoding="utf-8") as f:
    nbf.write(nb, f)

print(f"‚úÖ –ù–æ—É—Ç–±—É–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {os.path.abspath(output_file)}")