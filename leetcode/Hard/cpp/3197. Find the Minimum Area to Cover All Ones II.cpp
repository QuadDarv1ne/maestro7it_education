/**
 * https://leetcode.com/problems/find-the-minimum-area-to-cover-all-ones-ii/description/?envType=daily-question&envId=2025-08-23
 */

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º–∞—Ä–Ω—É—é –ø–ª–æ—â–∞–¥—å —Ç—Ä—ë—Ö –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤,
     * –ø–æ–∫—Ä—ã–≤–∞—é—â–∏—Ö –≤—Å–µ –µ–¥–∏–Ω–∏—Ü—ã –≤ –±–∏–Ω–∞—Ä–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ.
     *
     * –ü–æ–¥—Ö–æ–¥: –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ
     * –ø–æ–∫—Ä—ã–≤–∞—é—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ —Ç—Ä—ë—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤:
     *  - —Ç—Ä–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–æ—Å—ã
     *  - —Ç—Ä–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–æ—Å—ã
     *  - –æ–¥–Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ + –Ω–∏–∂–Ω—è—è/–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ (–¥–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
     *  - –æ–¥–Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ + –ª–µ–≤–∞—è/–ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ (–¥–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
     *
     * –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—á–∏—Ç–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, –ø–æ–∫—Ä—ã–≤–∞—é—â–∏—Ö –µ–¥–∏–Ω–∏—Ü—ã
     * –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞—Ö.
     */
    int minimumSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        int INF = m * n + 5;
        int ans = INF;

        auto area = [&](int r1, int r2, int c1, int c2)->int {
            // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–æ—â–∞–¥—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞, –ø–æ–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –≤—Å–µ 1 –≤–Ω—É—Ç—Ä–∏ [r1..r2] x [c1..c2]
            // –µ—Å–ª–∏ –µ–¥–∏–Ω–∏—Ü –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0
            int rmin = INT_MAX, rmax = INT_MIN, cmin = INT_MAX, cmax = INT_MIN;
            for (int r = r1; r <= r2; ++r) {
                for (int c = c1; c <= c2; ++c) {
                    if (grid[r][c]) {
                        rmin = min(rmin, r);
                        rmax = max(rmax, r);
                        cmin = min(cmin, c);
                        cmax = max(cmax, c);
                    }
                }
            }
            if (rmin == INT_MAX) return 0;
            return (rmax - rmin + 1) * (cmax - cmin + 1);
        };

        // 1) –¢—Ä–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–æ—Å—ã: [0..i-1], [i..j-1], [j..m-1]
        for (int i = 1; i < m; ++i) {
            for (int j = i+1; j < m; ++j) {
                int a = area(0, i-1, 0, n-1);
                int b = area(i, j-1, 0, n-1);
                int c = area(j, m-1, 0, n-1);
                ans = min(ans, a + b + c);
            }
        }

        // 2) –¢—Ä–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª–æ—Å—ã: [0..i-1], [i..j-1], [j..n-1]
        for (int i = 1; i < n; ++i) {
            for (int j = i+1; j < n; ++j) {
                int a = area(0, m-1, 0, i-1);
                int b = area(0, m-1, i, j-1);
                int c = area(0, m-1, j, n-1);
                ans = min(ans, a + b + c);
            }
        }

        // 3) –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ–∑ + –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ–∑ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
        // –†–∞–∑—Ä–µ–∑ –ø–æ —Å—Ç—Ä–æ–∫–µ i: –≤–µ—Ä—Ö [0..i], –Ω–∏–∑ [i+1..m-1]
        // –í–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç—å –¥–µ–ª–∏–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –Ω–∞ (0..j) –∏ (j+1..n-1)
        for (int i = 0; i < m-1; ++i) {
            // –¥–µ–ª–∏–º –≤–µ—Ä—Ö (0..i) –Ω–∞ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
            for (int j = 0; j < n-1; ++j) {
                int topLeft = area(0, i, 0, j);
                int topRight = area(0, i, j+1, n-1);
                int bottom = area(i+1, m-1, 0, n-1);
                ans = min(ans, topLeft + topRight + bottom);
            }
            // –¥–µ–ª–∏–º –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å (i+1..m-1) –Ω–∞ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
            for (int j = 0; j < n-1; ++j) {
                int top = area(0, i, 0, n-1);
                int bottomLeft = area(i+1, m-1, 0, j);
                int bottomRight = area(i+1, m-1, j+1, n-1);
                ans = min(ans, top + bottomLeft + bottomRight);
            }
        }

        // 4) –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ–∑ + –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä–µ–∑ –≤ –ª–µ–≤–æ–π/–ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ (—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ)
        for (int i = 0; i < n-1; ++i) {
            // –¥–µ–ª–∏–º –ª–µ–≤—É—é —á–∞—Å—Ç—å (0..i) –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            for (int j = 0; j < m-1; ++j) {
                int leftTop = area(0, j, 0, i);
                int leftBottom = area(j+1, m-1, 0, i);
                int right = area(0, m-1, i+1, n-1);
                ans = min(ans, leftTop + leftBottom + right);
            }
            // –¥–µ–ª–∏–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å (i+1..n-1) –ø–æ —Å—Ç—Ä–æ–∫–∞–º
            for (int j = 0; j < m-1; ++j) {
                int left = area(0, m-1, 0, i);
                int rightTop = area(0, j, i+1, n-1);
                int rightBottom = area(j+1, m-1, i+1, n-1);
                ans = min(ans, left + rightTop + rightBottom);
            }
        }

        return ans;
    }
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/