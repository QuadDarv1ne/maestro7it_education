/**
 * https://leetcode.com/problems/median-of-two-sorted-arrays/description/
 */

/**
 * @brief –ù–∞—Ö–æ–¥–∏—Ç –º–µ–¥–∏–∞–Ω—É –¥–≤—É—Ö –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ –∑–∞ O(log(min(m,n))).
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * - –ë–µ—Ä—ë–º –º–µ–Ω—å—à–∏–π –º–∞—Å—Å–∏–≤ –¥–ª—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (nums1 –¥–ª–∏–Ω—ã n1, nums2 –¥–ª–∏–Ω—ã n2).
 * - –ò—â–µ–º partition –≤ nums1, –≤—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ partition –≤–æ –≤—Ç–æ—Ä–æ–º –º–∞—Å—Å–∏–≤–µ.
 * - –û–ø—Ä–µ–¥–µ–ª—è–µ–º maxLeft –∏ minRight –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ.
 * - –ï—Å–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ (maxLeft1 ‚â§ minRight2 && maxLeft2 ‚â§ minRight1),
 *   –≤—ã—á–∏—Å–ª—è–µ–º –º–µ–¥–∏–∞–Ω—É (—Å —É—á—ë—Ç–æ–º —á—ë—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã –¥–ª–∏–Ω).
 * - –ò–Ω–∞—á–µ —Å–¥–≤–∏–≥–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
 *
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å:
 * - –í—Ä–µ–º—è: O(log(min(m, n)))  
 * - –ü–∞–º—è—Ç—å: O(1)
 *
 * @param nums1 –ø–µ—Ä–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
 * @param nums2 –≤—Ç–æ—Ä–æ–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤
 * @return –º–µ–¥–∏–∞–Ω–∞ –∫–∞–∫ double
 */
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int n1 = nums1.size();
        int n2 = nums2.size();
        // –í—Å–µ–≥–¥–∞ –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –º–µ–Ω—å—à–µ–º—É –º–∞—Å—Å–∏–≤—É
        if (n1 > n2) return findMedianSortedArrays(nums2, nums1);

        int left = 0, right = n1;
        while (left <= right) {
            int part1 = (left + right) / 2;
            int part2 = (n1 + n2 + 1) / 2 - part1;

            int maxLeft1 = part1 == 0 ? INT_MIN : nums1[part1 - 1];
            int minRight1 = part1 == n1 ? INT_MAX : nums1[part1];

            int maxLeft2 = part2 == 0 ? INT_MIN : nums2[part2 - 1];
            int minRight2 = part2 == n2 ? INT_MAX : nums2[part2];

            if (maxLeft1 <= minRight2 && maxLeft2 <= minRight1) {
                if ((n1 + n2) % 2 == 0) {
                    return (max(maxLeft1, maxLeft2) + min(minRight1, minRight2)) / 2.0;
                } else {
                    return static_cast<double>(max(maxLeft1, maxLeft2));
                }
            } else if (maxLeft1 > minRight2) {
                right = part1 - 1;
            } else {
                left = part1 + 1;
            }
        }
        return 0.0; // –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ —Å—é–¥–∞ –Ω–µ –¥–æ–π–¥—ë–º
    }
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/