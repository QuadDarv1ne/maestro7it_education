/**
 * https://leetcode.com/problems/course-schedule/description/
 */

#include <vector>
#include <unordered_map>
#include <unordered_set>
using namespace std;

class Solution {
public:
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –∫—É—Ä—Å—ã —Å —É—á—ë—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DFS –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤.
     * @param numCourses –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤
     * @param prerequisites –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π [course, prereq]
     * @return true, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –∫—É—Ä—Å—ã, –∏–Ω–∞—á–µ false
     */
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        unordered_map<int, unordered_set<int>> graph;
        for (auto& prereq : prerequisites) {
            graph[prereq[0]].insert(prereq[1]);
        }

        vector<int> visited(numCourses, 0); // 0: unvisited, 1: visiting, 2: visited
        for (int i = 0; i < numCourses; ++i) {
            if (hasCycle(i, graph, visited)) return false;
        }
        return true;
    }

private:
    bool hasCycle(int node, unordered_map<int, unordered_set<int>>& graph, vector<int>& visited) {
        if (visited[node] == 1) return true;
        if (visited[node] == 2) return false;

        visited[node] = 1;
        for (int neighbor : graph[node]) {
            if (hasCycle(neighbor, graph, visited)) return true;
        }
        visited[node] = 2;
        return false;
    }
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/