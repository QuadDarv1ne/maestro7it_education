/**
 * https://leetcode.com/problems/course-schedule/description/
 */

import java.util.*;

public class Solution {
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –∫—É—Ä—Å—ã —Å —É—á—ë—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DFS –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤.
     *
     * @param numCourses –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤
     * @param prerequisites –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π [course, prereq]
     * @return true, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –∫—É—Ä—Å—ã, –∏–Ω–∞—á–µ false
     */
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int[] prereq : prerequisites) {
            graph.computeIfAbsent(prereq[0], k -> new ArrayList<>()).add(prereq[1]);
        }

        int[] visited = new int[numCourses]; // 0: unvisited, 1: visiting, 2: visited

        for (int i = 0; i < numCourses; i++) {
            if (visited[i] == 0 && !dfs(i, graph, visited)) return false;
        }
        return true;
    }

    private boolean dfs(int course, Map<Integer, List<Integer>> graph, int[] visited) {
        if (visited[course] == 1) return false;
        if (visited[course] == 2) return true;

        visited[course] = 1;
        for (int prereq : graph.getOrDefault(course, new ArrayList<>())) {
            if (!dfs(prereq, graph, visited)) return false;
        }
        visited[course] = 2;
        return true;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/