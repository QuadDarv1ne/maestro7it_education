/**
 * https://leetcode.com/problems/reverse-nodes-in-k-group/description/
 */

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

/**
 * –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ k —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
 */
class Solution {
    /**
     * @param head –ì–æ–ª–æ–≤–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
     * @param k –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞.
     * @return ListNode –ì–æ–ª–æ–≤–∞ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞.
     */
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode node = head;
        int count = 0;
        while (node != null && count < k) {
            node = node.next;
            count++;
        }
        if (count < k) return head; // —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—å—à–µ k

        // –†–∞–∑–≤–æ—Ä–æ—Ç —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
        ListNode prev = null;
        ListNode curr = head;
        for (int i = 0; i < k; i++) {
            ListNode nextNode = curr.next;
            curr.next = prev;
            prev = curr;
            curr = nextNode;
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –æ—Å—Ç–∞–≤—à–µ–π—Å—è —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞
        head.next = reverseKGroup(curr, k);
        return prev;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/