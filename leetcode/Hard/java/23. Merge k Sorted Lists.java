/**
 * https://leetcode.com/problems/merge-k-sorted-lists/description/
 */

/**
 * ListNode ‚Äî —ç—Ç–æ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —É–∑–ª–∞ –≤ –æ–¥–Ω–æ—Å–≤—è–∑–Ω–æ–º —Å–ø–∏—Å–∫–µ (singly linked list).
 * 
 * –§–∏–∫—Ç–∏–≤–Ω–∞—è –≥–æ–ª–æ–≤–∞ (Dummy Head) ‚Äî —ç—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–∏—ë–º –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å–æ —Å–≤—è–∑–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–æ—â–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
 * 
 * Deque (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å) ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–∫ –≤ –Ω–∞—á–∞–ª–µ, —Ç–∞–∫ –∏ –≤ –∫–æ–Ω—Ü–µ –∑–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –≤—Ä–µ–º—è O(1).
 * –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç—Å—è –∫–∞–∫ "–¥–µ–∫" (–æ—Ç –∞–Ω–≥–ª. "deck") –∏ —è–≤–ª—è–µ—Ç—Å—è –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç Double-Ended Queue.
 * 
 * –ö–æ–º–ø–∞—Ä–∞—Ç–æ—Ä ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
 * –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∑–∞–¥–∞—á–∏ —Å–æ —Å–ª–∏—è–Ω–∏–µ–º —Å–ø–∏—Å–∫–æ–≤ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ (min-heap).
 */

/**
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç k –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
 * 
 * <p>–ê–ª–≥–æ—Ä–∏—Ç–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫—É—á—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å) –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ
 * –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É–∑–ª–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ. –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã:
 * 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π (–ø—É—Å—Ç–æ–π –≤–≤–æ–¥)
 * 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ —Å –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —É–∑–ª–æ–≤
 * 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ–≤ –≤—Å–µ—Ö –Ω–µ–ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å
 * 4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ —É–∑–ª–∞
 * 5. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
 * 6. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–∑–ª–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
 * 
 * <p><b>–°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞:</b>
 * - –í—Ä–µ–º–µ–Ω–Ω–∞—è: O(N log K), –≥–¥–µ:
 *      N = –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö,
 *      K = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
 * - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è: O(K) (–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏)
 *
 * <p><b>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
 * {@code
 * ListNode list1 = new ListNode(1, new ListNode(4, new ListNode(5)));
 * ListNode list2 = new ListNode(1, new ListNode(3, new ListNode(4)));
 * ListNode list3 = new ListNode(2, new ListNode(6));
 * 
 * ListNode[] lists = {list1, list2, list3};
 * ListNode result = new Solution().mergeKLists(lists);
 * // –†–µ–∑—É–ª—å—Ç–∞—Ç: 1->1->2->3->4->4->5->6
 * }
 *
 * @param lists –ú–∞—Å—Å–∏–≤ –≥–æ–ª–æ–≤ —Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.
 *             –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ (null —ç–ª–µ–º–µ–Ω—Ç—ã).
 * @return –ì–æ–ª–æ–≤–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. 
 *         –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –µ—Å–ª–∏ –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –ø—É—Å—Ç—ã.
 *
 * @implNote –î–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
 * 1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –≥–æ–ª–æ–≤–Ω–æ–π —É–∑–µ–ª (dummy head) –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–¥–∞
 * 2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∑–∞ O(1)
 * 3. –ö–∞–∂–¥–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ O(log K)
 * 4. –ê–ª–≥–æ—Ä–∏—Ç–º —É—Å—Ç–æ–π—á–∏–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –∏ null –∑–Ω–∞—á–µ–Ω–∏—è–º
 */

import java.util.PriorityQueue;
import java.util.Comparator;

class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode(int val, ListNode next) { this.val = val; this.next = next; }
}

class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
        if (lists == null || lists.length == 0) return null;
        
        // –ö–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É–∑–ª–æ–≤ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
        Comparator<ListNode> comparator = (a, b) -> a.val - b.val;
        
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫—É—á–∞)
        PriorityQueue<ListNode> minHeap = new PriorityQueue<>(comparator);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —É–∑–ª—ã –≤—Å–µ—Ö –Ω–µ–ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤
        for (ListNode node : lists) {
            if (node != null) {
                minHeap.offer(node);
            }
        }
        
        // –§–∏–∫—Ç–∏–≤–Ω—ã–π —É–∑–µ–ª –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        
        while (!minHeap.isEmpty()) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–∑–µ–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
            ListNode minNode = minHeap.poll();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫
            current.next = minNode;
            current = current.next;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫—É—á—É
            if (minNode.next != null) {
                minHeap.offer(minNode.next);
            }
        }
        
        return dummy.next;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/
