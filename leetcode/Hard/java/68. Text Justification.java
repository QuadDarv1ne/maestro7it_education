/**
 * https://leetcode.com/problems/text-justification/description/?envType=study-plan-v2&envId=top-interview-150
 */

import java.util.ArrayList;
import java.util.List;

public class Solution {
    /**
     * –ú–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ —à–∏—Ä–∏–Ω–µ maxWidth.
     *
     * @param words –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤
     * @param maxWidth –¥–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
     * @return —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã—Ö –ø–æ —à–∏—Ä–∏–Ω–µ
     */
    public List<String> fullJustify(String[] words, int maxWidth) {
        List<String> res = new ArrayList<>();
        int n = words.length;
        int i = 0;

        while (i < n) {
            int length = words[i].length();
            int j = i + 1;

            // –ü–æ–¥–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
            while (j < n && length + 1 + words[j].length() <= maxWidth) {
                length += 1 + words[j].length();
                j++;
            }

            int numWords = j - i;
            StringBuilder line = new StringBuilder();

            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ ‚Äî –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–ª–µ–≤–æ
            if (j == n || numWords == 1) {
                for (int k = i; k < j; k++) {
                    line.append(words[k]);
                    if (k != j - 1) {
                        line.append(" ");
                    }
                }
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã —Å–ø—Ä–∞–≤–∞
                int remaining = maxWidth - line.length();
                for (int k = 0; k < remaining; k++) {
                    line.append(" ");
                }
            } else {
                // –ü–æ–ª–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
                int totalSpaces = maxWidth;
                for (int k = i; k < j; k++) {
                    totalSpaces -= words[k].length();
                }
                int spaceBetween = totalSpaces / (numWords - 1);
                int extraSpaces = totalSpaces % (numWords - 1);

                for (int k = i; k < j - 1; k++) {
                    line.append(words[k]);
                    for (int s = 0; s < spaceBetween; s++) {
                        line.append(" ");
                    }
                    if (k - i < extraSpaces) {
                        line.append(" ");
                    }
                }
                line.append(words[j - 1]);
            }

            res.add(line.toString());
            i = j;
        }

        return res;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/