'''
https://leetcode.com/problems/find-the-maximum-number-of-fruits-collected/description/?envType=daily-question&envId=2025-08-16
'''

class Solution:
    def maxCollectedFruits(self, fruits):
        """
        –î–µ–ª–∞–µ–º DP –¥–ª—è –¥–≤—É—Ö –¥–µ—Ç–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä—É–∫—Ç—ã –ø–æ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏.
        """
        n = len(fruits)
        inf = float('-inf')

        # DP –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ 2 (—Å–≤–µ—Ä—Ö—É-—Å–ø—Ä–∞–≤–∞)
        f2 = [[inf]*n for _ in range(n)]
        f2[0][n-1] = fruits[0][n-1]
        for i in range(1, n):
            for j in range(i+1, n):
                best_prev = max(f2[i-1][j], f2[i-1][j-1])
                if j+1 < n:
                    best_prev = max(best_prev, f2[i-1][j+1])
                f2[i][j] = best_prev + fruits[i][j]

        # DP –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞ 3 (—Å–Ω–∏–∑—É-—Å–ª–µ–≤–∞)
        f3 = [[inf]*n for _ in range(n)]
        f3[n-1][0] = fruits[n-1][0]
        for j in range(1, n):
            for i in range(j+1, n):
                best_prev = max(f3[i][j-1], f3[i-1][j-1])
                if i+1 < n:
                    best_prev = max(best_prev, f3[i+1][j-1])
                f3[i][j] = best_prev + fruits[i][j]

        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –ø–æ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        diag_sum = sum(fruits[i][i] for i in range(n))
        return diag_sum + f2[n-2][n-1] + f3[n-1][n-2]

''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks