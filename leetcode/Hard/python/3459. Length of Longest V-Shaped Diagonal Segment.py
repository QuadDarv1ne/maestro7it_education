'''
https://leetcode.com/problems/length-of-longest-v-shaped-diagonal-segment/description/?envType=daily-question&envId=2025-08-27
'''

class Solution(object):
    def lenOfVDiagonal(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int

        –ó–∞–¥–∞—á–∞:
        -----------------
        –í –º–∞—Ç—Ä–∏—Ü–µ grid –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –¥–ª–∏–Ω—É —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ "V-–æ–±—Ä–∞–∑–Ω–æ–≥–æ"
        –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞.

        –ü—Ä–∞–≤–∏–ª–∞ —Å–µ–≥–º–µ–Ω—Ç–∞:
        1. –°–µ–≥–º–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —á–∏—Å–ª–∞ 1.
        2. –î–∞–ª–µ–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —á–µ—Ä–µ–¥–æ–≤–∞—Ç—å—Å—è —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É:
           2, 0, 2, 0, ...
        3. –°–µ–≥–º–µ–Ω—Ç –∏–¥—ë—Ç –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
           ‚Üò, ‚Üó, ‚Üô, ‚Üñ.
        4. –†–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–∞ 90¬∞ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
           (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ ‚Üò –º–æ–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –≤ ‚Üô).
        5. –ù—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–∞–∫–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ (–≤ –∫–ª–µ—Ç–∫–∞—Ö).
        –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å 0.

        –ü—Ä–∏–º–µ—Ä:
        -----------------
        –í—Ö–æ–¥:
        [[2,2,1,2,2],
         [2,0,2,2,0],
         [2,0,1,1,0],
         [1,0,2,2,2],
         [2,0,0,2,2]]

        –í—ã—Ö–æ–¥: 5
        (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º).
        """
        n, m = len(grid), len(grid[0])
        nxt = {1: 2, 2: 0, 0: 2}

        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (dx, dy): 0:‚Üò, 1:‚Üó, 2:‚Üô, 3:‚Üñ
        dirs = [(1, 1), (-1, 1), (1, -1), (-1, -1)]
        cw = {0: 2, 1: 0, 2: 3, 3: 1}  # –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞ –ø–æ —á–∞—Å–æ–≤–æ–π

        def ok(a, b):
            return nxt.get(a) == b

        # end[d][i][j]: –¥–ª–∏–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–µ–π—Å—è –≤ (i,j) –ø–æ d,
        # –ø—Ä–∏—á—ë–º –≤—Å—è —Ü–µ–ø–æ—á–∫–∞ —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å 1.
        end = [[[0] * m for _ in range(n)] for _ in range(4)]

        for d, (dx, dy) in enumerate(dirs):
            xs = range(n) if dx == 1 else range(n - 1, -1, -1)
            ys = range(m) if dy == 1 else range(m - 1, -1, -1)
            for i in xs:
                for j in ys:
                    val = grid[i][j]
                    pi, pj = i - dx, j - dy
                    if 0 <= pi < n and 0 <= pj < m and ok(grid[pi][pj], val) and end[d][pi][pj] > 0:
                        end[d][i][j] = end[d][pi][pj] + 1
                    else:
                        end[d][i][j] = 1 if val == 1 else 0

        # go[d][i][j]: –¥–ª–∏–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è –≤ (i,j) –∏ –∏–¥—É—â–µ–π –≤–ø–µ—Ä—ë–¥ –ø–æ d
        # (–ù–ï —Ç—Ä–µ–±—É–µ–º, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—Ç –±—ã–ª 1).
        go = [[[1] * m for _ in range(n)] for _ in range(4)]

        for d, (dx, dy) in enumerate(dirs):
            xs = range(n - 1, -1, -1) if dx == 1 else range(n)
            ys = range(m - 1, -1, -1) if dy == 1 else range(m)
            for i in xs:
                for j in ys:
                    ni, nj = i + dx, j + dy
                    if 0 <= ni < n and 0 <= nj < m and ok(grid[i][j], grid[ni][nj]):
                        go[d][i][j] = 1 + go[d][ni][nj]
                    else:
                        go[d][i][j] = 1

        ans = 0
        # –ü—Ä—è–º—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã (–±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞)
        for d in range(4):
            for i in range(n):
                for j in range(m):
                    ans = max(ans, end[d][i][j])

        # V-—Å–µ–≥–º–µ–Ω—Ç—ã —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        for i in range(n):
            for j in range(m):
                for a in range(4):
                    b = cw[a]
                    if end[a][i][j] > 0:  # –ø–µ—Ä–≤–∞—è –Ω–æ–∂–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
                        cur = end[a][i][j] + go[b][i][j] - 1
                        ans = max(ans, cur)

        return ans

''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks