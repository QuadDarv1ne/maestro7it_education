'''
https://leetcode.com/problems/course-schedule/description/
'''

# from typing import List
# from collections import defaultdict

class Solution:
    # def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
    def canFinish(self, numCourses, prerequisites):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –∫—É—Ä—Å—ã —Å —É—á—ë—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DFS –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤.

        :param numCourses: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É—Ä—Å–æ–≤
        :param prerequisites: –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π [course, prereq]
        :return: True, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –∫—É—Ä—Å—ã, –∏–Ω–∞—á–µ False
        """
        graph = defaultdict(list)
        for dest, src in prerequisites:
            graph[dest].append(src)

        visited = [0] * numCourses  # 0: unvisited, 1: visiting, 2: visited

        def dfs(course):
            if visited[course] == 1:
                return False
            if visited[course] == 2:
                return True

            visited[course] = 1
            for prereq in graph[course]:
                if not dfs(prereq):
                    return False
            visited[course] = 2
            return True

        for i in range(numCourses):
            if visited[i] == 0 and not dfs(i):
                return False
        return True

''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks