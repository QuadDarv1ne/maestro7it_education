/**
 * [ –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—è–Ω–∏–µ–º –¥–ª—è —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ]
 * –î–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é O(n log n) –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–π –ø–∞–º—è—Ç—å—é O(1) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (bottom-up merge sort).
 * –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ –±–ª–æ–∫–∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–µ–≥–æ—Å—è —Ä–∞–∑–º–µ—Ä–∞, –ø–æ–ø–∞—Ä–Ω–æ —Å–ª–∏–≤–∞–µ—Ç –∏—Ö –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
 */

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–∞ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    /**
     * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.
     * 
     * –ê–ª–≥–æ—Ä–∏—Ç–º:
     * 1. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –¥–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞.
     * 2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —É–∑–µ–ª (dummy) –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
     * 3. –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ (step) –æ—Ç 1 –¥–æ n/2:
     *    - –ù–∞—á–∏–Ω–∞–µ–º —Å –±–ª–æ–∫–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º 1
     *    - –ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ —É–¥–≤–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–æ–≤
     * 4. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–æ–∫–∞–º–∏:
     *    - –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ –±–ª–æ–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
     *    - –ü–æ–ø–∞—Ä–Ω–æ —Å–ª–∏–≤–∞–µ—Ç —Å–æ—Å–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏
     *    - –°–æ–µ–¥–∏–Ω—è–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –≤ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
     * 5. –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–æ –ø–æ–ª–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞.
     * 
     * –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * - –í—Ä–µ–º—è: O(n log n)
     * - –ü–∞–º—è—Ç—å: O(1)
     * 
     * @param head –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –≥–æ–ª–æ–≤—É —Å–ø–∏—Å–∫–∞
     * @return –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –≥–æ–ª–æ–≤—É –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
     */
    ListNode* sortList(ListNode* head) {
        if (!head || !head->next) return head;
        
        // –ü–æ–¥—Å—á–µ—Ç –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–∞
        int n = 0;
        ListNode* node = head;
        while (node) {
            n++;
            node = node->next;
        }
        
        ListNode dummy(0);
        dummy.next = head;
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ step = 1, 2, 4, 8...
        for (int step = 1; step < n; step <<= 1) {
            ListNode* prev = &dummy;
            ListNode* curr = dummy.next;
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            while (curr) {
                // –ü–æ–ª—É—á–∞–µ–º –ª–µ–≤—ã–π –±–ª–æ–∫
                ListNode* left = curr;
                // –û—Ç—Ä–µ–∑–∞–µ–º –ø—Ä–∞–≤—ã–π –±–ª–æ–∫ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞
                ListNode* right = split(left, step);
                // –û–±–Ω–æ–≤–ª—è–µ–º curr –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
                curr = split(right, step);
                
                // –°–ª–∏–≤–∞–µ–º –¥–≤–∞ –±–ª–æ–∫–∞
                ListNode* merged = merge(left, right);
                // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º —Å–ª–∏—Ç—ã–π –±–ª–æ–∫ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
                prev->next = merged;
                
                // –ü–µ—Ä–µ–º–µ—â–∞–µ–º prev –≤ –∫–æ–Ω–µ—Ü —Å–ª–∏—Ç–æ–≥–æ –±–ª–æ–∫–∞
                while (prev->next) {
                    prev = prev->next;
                }
            }
        }
        
        return dummy.next;
    }
    
private:
    /**
     * –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ –±–ª–æ–∫ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
     * 
     * –û—Ç—Ä–µ–∑–∞–µ—Ç –ø–µ—Ä–≤—ã–µ `step` —É–∑–ª–æ–≤ –æ—Ç —Å–ø–∏—Å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞.
     * 
     * @param head –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
     * @param step –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –±–ª–æ–∫–µ
     * @return –ù–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞ (nullptr –µ—Å–ª–∏ –±–ª–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
     */
    ListNode* split(ListNode* head, int step) {
        if (!head) return nullptr;
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º (step-1) —É–∑–ª–æ–≤ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ –±–ª–æ–∫–∞
        ListNode* cur = head;
        for (int i = 1; i < step && cur->next; i++) {
            cur = cur->next;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞
        ListNode* next_block = cur->next;
        // –û—Ç—Ä–µ–∑–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–ª–æ–∫
        cur->next = nullptr;
        
        return next_block;
    }
    
    /**
     * –°–ª–∏–≤–∞–µ—Ç –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ –≤ –æ–¥–∏–Ω.
     * 
     * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–ª–∏—è–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ —É–∑–ª–∞.
     * –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —É–∑–ª—ã –∏–∑ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Å–æ–µ–¥–∏–Ω—è–µ—Ç –∏—Ö.
     * 
     * @param l1 –ü–µ—Ä–≤—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
     * @param l2 –í—Ç–æ—Ä–æ–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
     * @return –ù–∞—á–∞–ª–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
     */
    ListNode* merge(ListNode* l1, ListNode* l2) {
        ListNode dummy(0);
        ListNode* tail = &dummy;
        
        // –°–ª–∏—è–Ω–∏–µ –ø–æ–∫–∞ –æ–±–∞ —Å–ø–∏—Å–∫–∞ –Ω–µ –ø—É—Å—Ç—ã
        while (l1 && l2) {
            if (l1->val <= l2->val) {
                tail->next = l1;
                l1 = l1->next;
            } else {
                tail->next = l2;
                l2 = l2->next;
            }
            tail = tail->next;
        }
        
        // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
        tail->next = l1 ? l1 : l2;
        
        return dummy.next;
    }
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/
