/**
 * https://leetcode.com/problems/substring-with-concatenation-of-all-words/
 */

#include <vector>
#include <string>
#include <unordered_map>

using namespace std;

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –ø–æ–¥—Å—Ç—Ä–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ `s`, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–µ–π 
 * –≤—Å–µ—Ö —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ `words` –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ. –í—Å–µ —Å–ª–æ–≤–∞ –≤ `words` –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É.
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ `s` –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ `words`.
 * 2. –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é –¥–ª–∏–Ω—É –≤—Å–µ—Ö —Å–ª–æ–≤ (`totalLen`) –∏ –¥–ª–∏–Ω—É –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (`wordLen`).
 * 3. –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ `s` –º–µ–Ω—å—à–µ `totalLen`, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 * 4. –°–æ–∑–¥–∞–µ—Ç —á–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å `wordCount` –¥–ª—è —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ `words`.
 * 5. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è (0, 1, ..., wordLen-1):
 *    a. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å `currCount` –∏ —É–∫–∞–∑–∞—Ç–µ–ª—å `left`.
 *    b. –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å `right` —Å —à–∞–≥–æ–º `wordLen` –ø–æ —Å—Ç—Ä–æ–∫–µ:
 *       - –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ.
 *       - –ï—Å–ª–∏ —Å–ª–æ–≤–æ –µ—Å—Ç—å –≤ `wordCount`:
 *           * –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å–ª–æ–≤–∞ –≤ `currCount`.
 *           * –ï—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ —Å–ª–æ–≤–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ `wordCount`, —Å–¥–≤–∏–≥–∞–µ—Ç `left` –¥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è.
 *           * –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ –æ–∫–Ω–µ —Ä–∞–≤–Ω–æ —Ä–∞–∑–º–µ—Ä—É —Å–ø–∏—Å–∫–∞ `words`, –¥–æ–±–∞–≤–ª—è–µ—Ç `left` –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
 *       - –ï—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ `wordCount`, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–∫–Ω–æ (–æ—á–∏—â–∞–µ—Ç `currCount` –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç `left` –∑–∞ —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ).
 * 6. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤.
 *
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å:
 * - –í—Ä–µ–º–µ–Ω–Ω–∞—è: O(n * wordLen), –≥–¥–µ n ‚Äî –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ `s`.
 * - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è: O(m * wordLen), –≥–¥–µ m ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ `words`.
 *
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
 *   s: –°—Ç—Ä–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫.
 *   words: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏.
 *
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
 *   –í–µ–∫—Ç–æ—Ä –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ–¥—Å—Ç—Ä–æ–∫, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—é.
 */

class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> result;
        if (words.empty() || s.empty()) return result;
        int n = s.size();
        int m = words.size();
        int wordLen = words[0].size();
        int totalLen = m * wordLen;

        if (n < totalLen) return result;

        unordered_map<string, int> wordCount;
        for (string& word : words) {
            wordCount[word]++;
        }

        for (int start = 0; start < wordLen; start++) {
            unordered_map<string, int> currCount;
            int left = start;
            int count = 0;

            for (int right = start; right <= n - wordLen; right += wordLen) {
                string word = s.substr(right, wordLen);

                if (wordCount.find(word) != wordCount.end()) {
                    currCount[word]++;
                    count++;

                    while (currCount[word] > wordCount[word]) {
                        string leftWord = s.substr(left, wordLen);
                        currCount[leftWord]--;
                        count--;
                        left += wordLen;
                    }

                    if (count == m) {
                        result.push_back(left);
                        string leftWord = s.substr(left, wordLen);
                        currCount[leftWord]--;
                        count--;
                        left += wordLen;
                    }
                } else {
                    currCount.clear();
                    count = 0;
                    left = right + wordLen;
                }
            }
        }

        return result;
    }
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/