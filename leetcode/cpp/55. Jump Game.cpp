/**
 * https://leetcode.com/problems/jump-game/description/?envType=study-plan-v2&envId=top-interview-150
 */

class Solution {
public:
    /**
     * canJump:
     * @param nums ‚Äî –≤–µ–∫—Ç–æ—Ä –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª, nums[i] ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä—ã–∂–æ–∫ –∏–∑ i
     * @return true, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞, –∏–Ω–∞—á–µ false
     *
     * –ü–æ–¥—Ö–æ–¥:
     * - –ñ–∞–¥–Ω—ã–π: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è maxReach ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç–∏–∂–∏–º—ã–π –∏–Ω–¥–µ–∫—Å
     * - –ü—Ä–æ—Ö–æ–¥–∏–º, –ø–æ–∫–∞ i ‚â§ maxReach
     * - –û–±–Ω–æ–≤–ª—è–µ–º maxReach = max(maxReach, i + nums[i])
     * - –ï—Å–ª–∏ maxReach ‚â• –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω–¥–µ–∫—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true
     * –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) –≤—Ä–µ–º–µ–Ω–∏, O(1) –ø–∞–º—è—Ç–∏
     */
    bool canJump(vector<int>& nums) {
        int maxReach = 0;
        int n = nums.size();
        for (int i = 0; i <= maxReach && i < n; ++i) {
            maxReach = max(maxReach, i + nums[i]);
            if (maxReach >= n - 1) {
                return true;
            }
        }
        return false;
    }
};


/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/