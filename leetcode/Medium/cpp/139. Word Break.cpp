/**
 * https://leetcode.com/problems/word-break/description/?envType=study-plan-v2&envId=top-interview-150
 */

#include <string>
#include <vector>
#include <unordered_set>

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Å—Ç—Ä–æ–∫—É s —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è wordDict.
 *
 * @param s –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
 * @param wordDict –í–µ–∫—Ç–æ—Ä —Å–ª–æ–≤ —Å–ª–æ–≤–∞—Ä—è
 * @return true, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫—É –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å, –∏–Ω–∞—á–µ false
 */
class Solution {
public:
    bool wordBreak(std::string s, std::vector<std::string>& wordDict) {
        std::unordered_set<std::string> wordSet(wordDict.begin(), wordDict.end());
        std::vector<bool> dp(s.size() + 1, false);
        dp[0] = true;

        for (size_t i = 1; i <= s.size(); ++i) {
            for (size_t j = 0; j < i; ++j) {
                if (dp[j] && wordSet.find(s.substr(j, i - j)) != wordSet.end()) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.size()];
    }
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/