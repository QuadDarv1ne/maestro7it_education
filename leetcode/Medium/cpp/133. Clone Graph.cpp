/**
 * https://leetcode.com/problems/clone-graph/description/
 */

#include <vector>
#include <unordered_map>
using namespace std;

/*
// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–∞ –≥—Ä–∞—Ñ–∞.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() : val(0), neighbors(vector<Node*>()) {}
    Node(int _val) : val(_val), neighbors(vector<Node*>()) {}
    Node(int _val, vector<Node*> _neighbors) : val(_val), neighbors(_neighbors) {}
};
*/

class Solution {
public:
    /**
     * –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—ã–π –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DFS —Å —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤.
     * @param node ‚Äî —É–∑–µ–ª –≥—Ä–∞—Ñ–∞
     * @return –≥–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è –≥—Ä–∞—Ñ–∞
     */
    Node* cloneGraph(Node* node) {
        if (!node) return nullptr;
        unordered_map<int, Node*> map;
        return clone(node, map);
    }

private:
    Node* clone(Node* node, unordered_map<int, Node*>& map) {
        if (map.count(node->val)) return map[node->val];

        Node* cloneNode = new Node(node->val);
        map[node->val] = cloneNode;

        for (auto neighbor : node->neighbors) {
            cloneNode->neighbors.push_back(clone(neighbor, map));
        }

        return cloneNode;
    }
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/