'''
https://leetcode.com/problems/fruits-into-baskets-iii/description/?envType=daily-question&envId=2025-08-06
'''

# from typing import List

class Solution:
    # def numOfUnplacedFruits(self, fruits: List[int], baskets: List[int]) -> int:
    def numOfUnplacedFruits(self, fruits, baskets):
        """
        –°—á–∏—Ç–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Ñ—Ä—É–∫—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å.

        –ü–æ—á–µ–º—É –ø—Ä–æ—Å—Ç–æ–π –¥–≤—É—Ö—É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –∂–∞–¥–Ω—ã–π –º–µ—Ç–æ–¥ –¥–∞—ë—Ç WA:
        - –ï—Å–ª–∏ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —Å–ª–µ–≤–∞,
          –æ–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ—Ä—É–∫—Ç–æ–≤.
        - –õ–∏–Ω–µ–π–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å —Ç–µ—Ä—è–µ—Ç —ç—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞.

        –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–¥–µ—è:
        - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ –º–∞—Å—Å–∏–≤—É baskets, —Ö—Ä–∞–Ω—è –º–∞–∫—Å–∏–º—É–º –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ.
        - –î–ª—è –∫–∞–∂–¥–æ–≥–æ fruit –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å: –Ω–∞–π—Ç–∏ —Å–∞–º—ã–π –ª–µ–≤—ã–π –∏–Ω–¥–µ–∫—Å i,
          –≥–¥–µ baskets[i] >= fruit (–µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç ‚Äî —Ñ—Ä—É–∫—Ç ¬´–Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω¬ª).
        - –ü–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É: baskets[i] = -1 (–æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–Ω—è—Ç—É—é).

        –°–ª–æ–∂–Ω–æ—Å—Ç—å:
        - –í—Ä–µ–º—è: O(n log n), n ‚Äî —á–∏—Å–ª–æ —Ñ—Ä—É–∫—Ç–æ–≤/–∫–æ—Ä–∑–∏–Ω.
        - –ü–∞–º—è—Ç—å: O(n) –Ω–∞ –¥–µ—Ä–µ–≤–æ.
        """
        n = len(baskets)
        if n == 0:
            return 0

        size = 1
        while size < n:
            size <<= 1
        # –°–µ–≥–¥–µ—Ä–µ–≤–æ –Ω–∞ –º–∞–∫—Å–∏–º—É–º—ã
        seg = [ -1 ] * (2 * size)

        # build
        for i in range(n):
            seg[size + i] = baskets[i]
        for i in range(size - 1, 0, -1):
            seg[i] = max(seg[i << 1], seg[i << 1 | 1])

        def query_first_ge(x):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–π –ª–µ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º >= x, –ª–∏–±–æ -1, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
            idx = 1
            if seg[idx] < x:
                return -1
            l, r = 0, size - 1
            while l != r:
                mid = (l + r) // 2
                left = idx << 1
                if seg[left] >= x:
                    idx = left
                    r = mid
                else:
                    idx = left | 1
                    l = mid + 1
            # l –º–æ–∂–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –∏—Å—Ö–æ–¥–Ω—ã–π n (–ø—É—Å—Ç—ã–µ —Ö–≤–æ—Å—Ç—ã = -1)
            return l if l < n else -1

        def update(pos, val):
            """a[pos] = val"""
            i = pos + size
            seg[i] = val
            i >>= 1
            while i:
                seg[i] = max(seg[i << 1], seg[i << 1 | 1])
                i >>= 1

        unplaced = 0
        for f in fruits:
            i = query_first_ge(f)
            if i == -1:
                unplaced += 1
            else:
                update(i, -1)  # –∑–∞–Ω—è–ª–∏ –∫–æ—Ä–∑–∏–Ω—É
        return unplaced

''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks