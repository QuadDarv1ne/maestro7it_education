'''
# –§—É–Ω–∫—Ü–∏—è productQueries:
# @param n ‚Äî –∏—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ, —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏.
# @param queries ‚Äî –≤–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ [l, r].
# @return –≤–µ–∫—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å—Ç–µ–ø–µ–Ω–µ–π –¥–≤–æ–π–∫–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø–æ –º–æ–¥—É–ª—é 1e9+7.

# –ü–æ–¥—Ö–æ–¥:
# 1. –ò–∑–≤–ª–µ–∫–∞–µ–º set-–±–∏—Ç—ã n, —Ñ–æ—Ä–º–∏—Ä—É—è –º–∞—Å—Å–∏–≤ —Å—Ç–µ–ø–µ–Ω–µ–π –¥–≤–æ–π–∫–∏.
# 2. –°—Ç—Ä–æ–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –º–∞—Å—Å–∏–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π mod.
# 3. –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º modular inverse (–±—ã—Å—Ç—Ä–æ–µ –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å).
'''

MOD = 10**9 + 7

class Solution:
    def productQueries(self, n, queries):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏, –≤—Ö–æ–¥—è—â–∏–µ –≤ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–ª–∞ n
        powers = []
        for i in range(32):
            if n & (1 << i):
                powers.append(1 << i)

        # –°—Ç—Ä–æ–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π —Å—Ç–µ–ø–µ–Ω–µ–π –¥–≤–æ–π–∫–∏ –ø–æ –º–æ–¥—É–ª—é
        prefix = [1]
        for p in powers:
            prefix.append((prefix[-1] * p) % MOD)

        result = []
        for l, r in queries:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ: –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Ç l –¥–æ r
            # = prefix[r+1] * modular_inverse(prefix[l]) mod MOD
            inv = pow(prefix[l], MOD - 2, MOD)
            product = (prefix[r + 1] * inv) % MOD
            result.append(product)

        return result

''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks