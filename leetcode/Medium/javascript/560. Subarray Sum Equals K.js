/**
 * https://leetcode.com/problems/subarray-sum-equals-k/description/
 */

/**
 * –ó–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–º–∞—Å—Å–∏–≤–æ–≤, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ k.
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å—É–º–º—ã.
 * 2. Map —Ö—Ä–∞–Ω–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π –∫–∞–∂–¥–æ–π —Å—É–º–º—ã.
 * 3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è –ª–∏ prefixSum - k.
 *
 * –°–ª–æ–∂–Ω–æ—Å—Ç—å:
 * - –í—Ä–µ–º—è: O(n)
 * - –ü–∞–º—è—Ç—å: O(n)
 *
 * @param {number[]} nums - –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª
 * @param {number} k - —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã
 * @return {number} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–º–∞—Å—Å–∏–≤–æ–≤
 */
var subarraySum = function(nums, k) {
    let prefixCounts = new Map();
    prefixCounts.set(0, 1);

    let currentSum = 0, count = 0;
    for (let num of nums) {
        currentSum += num;
        if (prefixCounts.has(currentSum - k)) {
            count += prefixCounts.get(currentSum - k);
        }
        prefixCounts.set(currentSum, (prefixCounts.get(currentSum) || 0) + 1);
    }
    return count;
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/