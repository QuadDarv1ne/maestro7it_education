/**
 * https://leetcode.com/problems/clone-graph/description/
 */

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–∞ –≥—Ä–∞—Ñ–∞.
 * function Node(val, neighbors) {
 *     this.val = val === undefined ? 0 : val;
 *     this.neighbors = neighbors === undefined ? [] : neighbors;
 * }
 */

/**
 * –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—ã–π –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DFS —Å Map –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤.
 *
 * @param {Node} node - —É–∑–µ–ª –≥—Ä–∞—Ñ–∞
 * @return {Node} –≥–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è –≥—Ä–∞—Ñ–∞
 */
var cloneGraph = function(node) {
    if (!node) return null;
    const map = new Map();

    function dfs(n) {
        if (map.has(n.val)) return map.get(n.val);

        const cloneNode = new Node(n.val);
        map.set(n.val, cloneNode);

        for (const neighbor of n.neighbors) {
            cloneNode.neighbors.push(dfs(neighbor));
        }

        return cloneNode;
    }

    return dfs(node);
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/