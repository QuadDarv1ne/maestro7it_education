/**
 * https://leetcode.com/problems/longest-palindromic-substring/description/
 */

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É –≤ —Å—Ç—Ä–æ–∫–µ s.
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * - –†–∞—Å—à–∏—Ä—è–µ–º –ø–∞–ª–∏–Ω–¥—Ä–æ–º –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞.
 * - –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –Ω–µ—á—ë—Ç–Ω–∞—è –∏ —á—ë—Ç–Ω–∞—è –¥–ª–∏–Ω–∞.
 * - –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é –ø–∞–ª–∏–Ω–¥—Ä–æ–º–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É.
 */
class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";
        String longest = "";
        for (int i = 0; i < s.length(); i++) {
            String odd = expandAroundCenter(s, i, i);
            if (odd.length() > longest.length()) longest = odd;
            String even = expandAroundCenter(s, i, i + 1);
            if (even.length() > longest.length()) longest = even;
        }
        return longest;
    }

    private String expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return s.substring(left + 1, right);
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/