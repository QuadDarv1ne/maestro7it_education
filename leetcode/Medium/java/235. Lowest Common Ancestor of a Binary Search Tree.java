/**
 * https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/
 */

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
 */
// public class TreeNode {
//     int val;
//     TreeNode left;
//     TreeNode right;
//     TreeNode(int x) { val = x; }
// }

class Solution {
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ –æ–±—â–µ–≥–æ –ø—Ä–µ–¥–∫–∞ –¥–≤—É—Ö —É–∑–ª–æ–≤ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –¥–µ—Ä–µ–≤–µ –ø–æ–∏—Å–∫–∞.
     *
     * @param root ‚Äî –∫–æ—Ä–µ–Ω—å –¥–µ—Ä–µ–≤–∞
     * @param p ‚Äî –ø–µ—Ä–≤—ã–π —É–∑–µ–ª
     * @param q ‚Äî –≤—Ç–æ—Ä–æ–π —É–∑–µ–ª
     * @return —É–∑–µ–ª –Ω–∞–∏–º–µ–Ω—å—à–µ–≥–æ –æ–±—â–µ–≥–æ –ø—Ä–µ–¥–∫–∞
     */
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while (root != null) {
            if (p.val < root.val && q.val < root.val)
                root = root.left;
            else if (p.val > root.val && q.val > root.val)
                root = root.right;
            else
                return root;
        }
        return null;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/