/**
 * –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–µ—Ç–æ–¥–æ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–ª–∏—è–Ω–∏—è (bottom-up merge sort).
 * <p>
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –¥–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞.
 * 2. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Ç–∏–≤–Ω–∞—è –≥–æ–ª–æ–≤–∞ (dummy node) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
 * 3. –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª –ø–æ —à–∞–≥–∞–º (step), –Ω–∞—á–∏–Ω–∞—è —Å 1, —É–¥–≤–∞–∏–≤–∞—è step –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏, –ø–æ–∫–∞ step < n.
 * 4. –í–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –±–ª–æ–∫–∏ –¥–ª–∏–Ω–æ–π step, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–µ–º –ø–æ–ø–∞—Ä–Ω–æ —Å–ª–∏–≤–∞—é—Ç—Å—è.
 * 5. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ –ø–æ –≤—Å–µ–º—É —Å–ø–∏—Å–∫—É –ø–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ —Å —É–¥–≤–æ–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –±–ª–æ–∫–∞.
 * 6. –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –Ω–µ —Å—Ç–∞–Ω–µ—Ç –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –¥–ª–∏–Ω–µ —Å–ø–∏—Å–∫–∞.
 * <p>
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n log n)
 * - –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–∫—É—Ä—Å–∏–∏, –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
 */
class Solution {
    /**
     * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.
     *
     * @param head –≥–æ–ª–æ–≤–Ω–æ–π —É–∑–µ–ª —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
     * @return –≥–æ–ª–æ–≤–Ω–æ–π —É–∑–µ–ª –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
     */
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        
        int n = 0;
        ListNode node = head;
        while (node != null) {
            n++;
            node = node.next;
        }
        
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        
        for (int step = 1; step < n; step *= 2) {
            ListNode prev = dummy;
            ListNode curr = dummy.next;
            
            while (curr != null) {
                ListNode left = curr;
                ListNode right = split(left, step);
                curr = split(right, step);
                
                ListNode merged = merge(left, right);
                prev.next = merged;
                
                while (prev.next != null) {
                    prev = prev.next;
                }
            }
        }
        
        return dummy.next;
    }
    
    /**
     * –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –¥–≤–∞ –±–ª–æ–∫–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.
     * –ü–µ—Ä–≤—ã–π –±–ª–æ–∫ –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –ø–µ—Ä–≤—ã—Ö `step` —É–∑–ª–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–æ—á–µ).
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ–ª–æ–≤—É –≤—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∞ (—Ç.–µ. —É–∑–µ–ª, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º —É–∑–ª–æ–º –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞).
     * –ü—Ä–∏ —ç—Ç–æ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ –æ—Ç—Ä–µ–∑–∞–µ—Ç—Å—è –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.
     *
     * @param head –≥–æ–ª–æ–≤–Ω–æ–π —É–∑–µ–ª —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å
     * @param step —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–∫–∞
     * @return –≥–æ–ª–æ–≤–∞ –≤—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∞ (–∏–ª–∏ null, –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ –±–ª–æ–∫–∞ –Ω–µ—Ç)
     */
    private ListNode split(ListNode head, int step) {
        if (head == null) {
            return null;
        }
        
        ListNode cur = head;
        for (int i = 1; i < step && cur.next != null; i++) {
            cur = cur.next;
        }
        
        ListNode nextBlock = cur.next;
        cur.next = null;
        return nextBlock;
    }
    
    /**
     * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ –≤ –æ–¥–∏–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
     * –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–ª–∏—è–Ω–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —É–∑–µ–ª, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
     * –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è —É–∑–ª—ã –∏–∑ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è.
     *
     * @param l1 –≥–æ–ª–æ–≤–Ω–æ–π —É–∑–µ–ª –ø–µ—Ä–≤–æ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
     * @param l2 –≥–æ–ª–æ–≤–Ω–æ–π —É–∑–µ–ª –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
     * @return –≥–æ–ª–æ–≤–Ω–æ–π —É–∑–µ–ª –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
     */
    private ListNode merge(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode tail = dummy;
        
        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                tail.next = l1;
                l1 = l1.next;
            } else {
                tail.next = l2;
                l2 = l2.next;
            }
            tail = tail.next;
        }
        
        if (l1 != null) {
            tail.next = l1;
        }
        if (l2 != null) {
            tail.next = l2;
        }
        
        return dummy.next;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/