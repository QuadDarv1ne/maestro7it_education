/**
 * https://leetcode.com/problems/container-with-most-water/description/
 */

class Solution {
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –≤–æ–¥—ã.
     *
     * @param height –º–∞—Å—Å–∏–≤ –≤—ã—Å–æ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
     * @return –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     *
     * –ê–ª–≥–æ—Ä–∏—Ç–º:
     * - –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ —É–∫–∞–∑–∞—Ç–µ–ª—è: —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞.
     * - –ü–ª–æ—â–∞–¥—å = (—à–∏—Ä–∏–Ω–∞) * min(–≤—ã—Å–æ—Ç—ã).
     * - –î–≤–∏–≥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Å –º–µ–Ω—å—à–µ–π –≤—ã—Å–æ—Ç–æ–π.
     * - –°–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), –ø–∞–º—è—Ç—å: O(1).
     */
    public int maxArea(int[] height) {
        int left = 0, right = height.length - 1;
        int maxArea = 0;
        while (left < right) {
            int area = (right - left) * Math.min(height[left], height[right]);
            maxArea = Math.max(maxArea, area);
            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }
        return maxArea;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/