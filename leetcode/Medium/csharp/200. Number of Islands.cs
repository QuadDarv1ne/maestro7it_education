/**
 * https://leetcode.com/problems/number-of-islands/description/
 */

public class Solution {
    /// <summary>
    /// –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç—Ä–æ–≤–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ.
    /// 
    /// –ê–ª–≥–æ—Ä–∏—Ç–º:
    /// 1. –ü—Ä–æ–±–µ–≥–∞–µ–º –ø–æ –≤—Å–µ–º –∫–ª–µ—Ç–∫–∞–º –º–∞—Ç—Ä–∏—Ü—ã grid.
    /// 2. –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º '1' (–∑–µ–º–ª—è), —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Å—Ç—Ä–æ–≤–æ–≤.
    /// 3. –ó–∞–ø—É—Å–∫–∞–µ–º DFS –æ—Ç —ç—Ç–æ–π –∫–ª–µ—Ç–∫–∏, —á—Ç–æ–±—ã –ø–æ–º–µ—Ç–∏—Ç—å –≤—Å–µ —Å–º–µ–∂–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –∫–∞–∫ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ ('0').
    /// 4. DFS —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ –∏ –≤–ø—Ä–∞–≤–æ.
    ///
    /// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(m * n), –≥–¥–µ m ‚Äî —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫, n ‚Äî —á–∏—Å–ª–æ —Å—Ç–æ–ª–±—Ü–æ–≤.
    /// –ü–∞–º—è—Ç—å: O(m * n) –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –∏–∑-–∑–∞ —Ä–µ–∫—É—Ä—Å–∏–∏.
    /// </summary>
    /// <param name="grid">–î–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–∏–º–≤–æ–ª–æ–≤ '1' –∏ '0'</param>
    /// <returns>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç—Ä–æ–≤–æ–≤</returns>
    public int NumIslands(char[][] grid) {
        if (grid == null || grid.Length == 0) return 0;
        
        int count = 0;
        int rows = grid.Length;
        int cols = grid[0].Length;
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    DFS(grid, i, j, rows, cols);
                }
            }
        }
        return count;
    }

    /// <summary>
    /// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π DFS –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —Å–º–µ–∂–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ –æ—Å—Ç—Ä–æ–≤–∞ –∫–∞–∫ –ø–æ—Å–µ—â—ë–Ω–Ω—ã–µ.
    /// </summary>
    /// <param name="grid">–ö–∞—Ä—Ç–∞ –æ—Å—Ç—Ä–æ–≤–æ–≤</param>
    /// <param name="i">–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞</param>
    /// <param name="j">–¢–µ–∫—É—â–∏–π —Å—Ç–æ–ª–±–µ—Ü</param>
    /// <param name="rows">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫</param>
    /// <param name="cols">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤</param>
    private void DFS(char[][] grid, int i, int j, int rows, int cols) {
        if (i < 0 || i >= rows || j < 0 || j >= cols || grid[i][j] == '0') return;

        grid[i][j] = '0'; // –ü–æ–º–µ—á–∞–µ–º –∫–ª–µ—Ç–∫—É –∫–∞–∫ –ø–æ—Å–µ—â—ë–Ω–Ω—É—é

        DFS(grid, i + 1, j, rows, cols);
        DFS(grid, i - 1, j, rows, cols);
        DFS(grid, i, j + 1, rows, cols);
        DFS(grid, i, j - 1, rows, cols);
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/