/**
 * https://leetcode.com/problems/merge-intervals/description/
 */

using System;
using System.Collections.Generic;

public class Solution {
    /// <summary>
    /// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –º–∞—Å—Å–∏–≤–µ intervals.
    /// </summary>
    /// <param name="intervals">–ú–∞—Å—Å–∏–≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤, –∫–∞–∂–¥—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø–∞—Ä–æ–π [start, end].</param>
    /// <returns>–ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.</returns>
    public int[][] Merge(int[][] intervals) {
        if (intervals.Length == 0) return new int[0][];

        Array.Sort(intervals, (a, b) => a[0].CompareTo(b[0]));
        var merged = new List<int[]>();
        merged.Add(new int[] { intervals[0][0], intervals[0][1] });

        foreach (var current in intervals) {
            var last = merged[merged.Count - 1];
            if (current[0] <= last[1]) {
                last[1] = Math.Max(last[1], current[1]);
            } else {
                merged.Add(new int[] { current[0], current[1] });
            }
        }

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º List<int[]> –≤ int[][]
        return merged.ToArray();
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/