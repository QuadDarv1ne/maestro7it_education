/**
 * https://leetcode.com/problems/clone-graph/description/
 */

/// <summary>
/// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–∞ –≥—Ä–∞—Ñ–∞.
/// </summary>
/*
public class Node
{
    public int val;
    public IList<Node> neighbors;
    public Node()
    {
        val = 0;
        neighbors = new List<Node>();
    }
    public Node(int _val)
    {
        val = _val;
        neighbors = new List<Node>();
    }
    public Node(int _val, IList<Node> _neighbors)
    {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

public class Solution
{
    /// <summary>
    /// –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—ã–π –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ.
    /// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è DFS —Å —Ö—ç—à-—Ç–∞–±–ª–∏—Ü–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤.
    /// </summary>
    /// <param name="node">–£–∑–µ–ª –≥—Ä–∞—Ñ–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</param>
    /// <returns>–ì–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è –≥—Ä–∞—Ñ–∞</returns>
    public Node CloneGraph(Node node)
    {
        if (node == null) return null;
        var map = new Dictionary<int, Node>();
        return Clone(node, map);
    }

    private Node Clone(Node node, Dictionary<int, Node> map)
    {
        if (map.ContainsKey(node.val)) return map[node.val];

        var clone = new Node(node.val);
        map[node.val] = clone;

        foreach (var neighbor in node.neighbors)
        {
            clone.neighbors.Add(Clone(neighbor, map));
        }

        return clone;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/