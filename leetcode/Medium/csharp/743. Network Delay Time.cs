/**
 * https://leetcode.com/problems/network-delay-time/description/
 */

using System;
using System.Collections.Generic;

public class Solution {
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç —É–∑–ª–∞ k –∫–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º —É–∑–ª–∞–º —Å–µ—Ç–∏.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π.
     *
     * @param times –°–ø–∏—Å–æ–∫ —Ä—ë–±–µ—Ä —Å–µ—Ç–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç [u, v, w] –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–∏–≥–Ω–∞–ª –æ—Ç —É–∑–ª–∞ u –¥–æ —É–∑–ª–∞ v –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∑–∞ w –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏.
     * @param n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ —Å–µ—Ç–∏.
     * @param k –ò–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞ (1-based).
     * @return –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –∫–æ –≤—Å–µ–º —É–∑–ª–∞–º —Å–µ—Ç–∏ –∏–ª–∏ -1, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
     */
    public int NetworkDelayTime(int[][] times, int n, int k) {
        // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
        var graph = new Dictionary<int, List<Tuple<int, int>>>();
        foreach (var time in times) {
            if (!graph.ContainsKey(time[0])) {
                graph[time[0]] = new List<Tuple<int, int>>();
            }
            graph[time[0]].Add(new Tuple<int, int>(time[1], time[2]));
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        var dist = new int[n + 1];
        Array.Fill(dist, int.MaxValue);
        dist[k] = 0;

        // –û—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º (SortedSet –∏–º–∏—Ç–∏—Ä—É–µ—Ç min-heap)
        var pq = new SortedSet<Tuple<int, int>>(Comparer<Tuple<int, int>>.Create((a, b) => {
            int cmp = a.Item1.CompareTo(b.Item1);
            return cmp != 0 ? cmp : a.Item2.CompareTo(b.Item2);
        }));
        pq.Add(new Tuple<int, int>(0, k));

        while (pq.Count > 0) {
            var curr = pq.Min;
            pq.Remove(curr);

            int d = curr.Item1;
            int node = curr.Item2;

            if (d > dist[node]) continue;

            if (graph.ContainsKey(node)) {
                foreach (var neighbor in graph[node]) {
                    int nextNode = neighbor.Item1;
                    int time = neighbor.Item2;
                    int newDist = d + time;
                    if (newDist < dist[nextNode]) {
                        dist[nextNode] = newDist;
                        pq.Add(new Tuple<int, int>(newDist, nextNode));
                    }
                }
            }
        }

        int maxDist = int.MinValue;
        for (int i = 1; i <= n; i++) {
            if (dist[i] == int.MaxValue) return -1;
            maxDist = Math.Max(maxDist, dist[i]);
        }

        return maxDist;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/