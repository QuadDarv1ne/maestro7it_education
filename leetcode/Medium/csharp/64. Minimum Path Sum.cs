/**
 * https://leetcode.com/problems/minimum-path-sum/description/
 */
public class Solution {
    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –ø—É—Ç–∏ –∏–∑ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ
     * –≤ –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª —Å–µ—Ç–∫–∏, –¥–≤–∏–≥–∞—è—Å—å —Ç–æ–ª—å–∫–æ –≤–ø—Ä–∞–≤–æ –∏–ª–∏ –≤–Ω–∏–∑.
     *
     * @param grid m √ó n —Å–µ—Ç–∫–∞ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
     * @return –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø—É—Ç–∏
     *
     * –ê–ª–≥–æ—Ä–∏—Ç–º:
     * dp[i][j] = grid[i][j] + Math.Min(dp[i-1][j], dp[i][j-1])
     *
     * –í—Ä–µ–º—è: O(m * n)
     * –ü–∞–º—è—Ç—å: O(m * n)
     */
    public int MinPathSum(int[][] grid) {
        int m = grid.Length, n = grid[0].Length;
        int[,] dp = new int[m, n];

        dp[0, 0] = grid[0][0];

        for (int j = 1; j < n; j++) {
            dp[0, j] = dp[0, j - 1] + grid[0][j];
        }
        for (int i = 1; i < m; i++) {
            dp[i, 0] = dp[i - 1, 0] + grid[i][0];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i, j] = grid[i][j] + Math.Min(dp[i - 1, j], dp[i, j - 1]);
            }
        }

        return dp[m - 1, n - 1];
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/