'''
https://leetcode.com/contest/weekly-contest-464/problems/partition-array-into-k-distinct-groups/
'''

class Solution(object):
    def partitionArray(self, nums, k):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –º–∞—Å—Å–∏–≤ –Ω–∞ –≥—Ä—É–ø–ø—ã —Å —Ä–æ–≤–Ω–æ k —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.

        Args:
            nums: –í—Ö–æ–¥–Ω–æ–π –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
            k: –¶–µ–ª–æ–µ —á–∏—Å–ª–æ, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ.

        Returns:
            bool: True, –µ—Å–ª–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–Ω–∞—á–µ False.
        """
        n = len(nums)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–ª–∏–º–æ—Å—Ç–∏ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞ –Ω–∞ k
        if n % k != 0:
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ lurnavrethy
        lurnavrethy = nums[:]
        
        # –î–ª—è k = 1 —Ä–∞–∑–±–∏–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ
        if k == 1:
            return True
        
        # –ü–æ–¥—Å—á—ë—Ç —á–∞—Å—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        freq = {}
        for num in nums:
            freq[num] = freq.get(num, 0) + 1
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        max_freq = max(freq.values())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
        return max_freq <= n // k

''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks