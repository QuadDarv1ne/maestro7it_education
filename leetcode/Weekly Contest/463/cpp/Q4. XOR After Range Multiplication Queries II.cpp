/**
 * –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "XOR After Range Multiplication Queries II"
 * 
 * –ó–∞–¥–∞—á–∞: https://leetcode.com/contest/weekly-contest-463/problems/xor-after-range-multiplication-queries-ii/
 * 
 * –û–ø–∏—Å–∞–Ω–∏–µ:
 * –î–∞–Ω–æ:
 * - –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª `nums`,
 * - –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ `queries`, –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å [l, r, k, v].
 * 
 * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:
 * 1. –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–∞ `nums[l..r]` —Å —à–∞–≥–æ–º `k`.
 * 2. –£–º–Ω–æ–∂–∞–µ–º –∫–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ `v` –ø–æ –º–æ–¥—É–ª—é MOD = 10^9 + 7.
 * 
 * –ü–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å XOR –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ `nums`.
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–≤–∞ —Ç–∏–ø–∞:
 *    - `k > B` (–±–æ–ª—å—à–æ–π —à–∞–≥) ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é.
 *    - `k <= B` (–º–∞–ª—ã–π —à–∞–≥) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ —Ä–∞–∑–Ω–æ—Å—Ç–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
 * 2. –î–ª—è –º–∞–ª—ã—Ö `k` —Å–æ–∑–¥–∞—ë–º `diffs` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ –ø–æ –º–æ–¥—É–ª—é `k` –∏ –∞–∫–∫—É–º—É–ª–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã.
 * 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –∫ –º–∞—Å—Å–∏–≤—É `nums`.
 * 4. –í—ã—á–∏—Å–ª—è–µ–º XOR –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
 *
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n * sqrt(n) + Q), –≥–¥–µ n ‚Äî —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞, Q ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.
 * –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω–æ—Å—Ç–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤.
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * vector<int> nums = {1, 2, 3, 4};
 * vector<vector<int>> queries = {{0, 3, 1, 2}, {1, 2, 2, 3}};
 * Solution sol;
 * int result = sol.xorAfterQueries(nums, queries);
 * 
 * @param nums ‚Äî –≤–µ–∫—Ç–æ—Ä —á–∏—Å–µ–ª.
 * @param queries ‚Äî –≤–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ [l, r, k, v].
 * @return XOR –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
 */

#define LL long long
#define VECI vector<int>
#define VECVI vector<vector<int>>
#define MOD 1000000007

class Solution {
public:
    LL power(LL base, LL exp) {
    LL res = 1;
    base %= MOD;
    while (exp > 0) {
        if (exp % 2 == 1) res = (res * base) % MOD;
        base = (base * base) % MOD;
        exp /= 2;
    }
    return res;
}

LL modInverse(LL n) {
    return power(n, MOD - 2);
}

int xorAfterQueries(VECI& nums, VECVI& queries) {
    int n = nums.size();
    int B = 450; 

    vector<VECI> queries_by_k[B + 1];

    for (const auto& q : queries) {
        int k = q[2];
        if (k > B) {
            int l = q[0], r = q[1], v = q[3];
            for (int i = l; i <= r; i += k) {
                nums[i] = (int)(((LL)nums[i] * v) % MOD);
            }
        } else {
            queries_by_k[k].push_back(q);
        }
    }

    for (int k = 1; k <= B; ++k) {
        if (queries_by_k[k].empty()) {
            continue;
        }

        VECVI diffs(k);
        for(int rem = 0; rem < k; ++rem) {
            int prog_len = (n > rem) ? (n - 1 - rem) / k + 1 : 0;
            if (prog_len > 0) {
                diffs[rem].assign(prog_len + 1, 1);
            }
        }

        for (const auto& q : queries_by_k[k]) {
            int l = q[0], r = q[1], v = q[3];
            int rem = l % k;

            if (diffs[rem].empty()) continue;

            int start_idx = (l - rem) / k;
            int r_prime = r - (r - rem + k) % k;
            int end_idx = (r_prime - rem) / k;

            diffs[rem][start_idx] = (int)(((LL)diffs[rem][start_idx] * v) % MOD);
            if (end_idx + 1 < diffs[rem].size()) {
                LL inv_v = modInverse(v);
                diffs[rem][end_idx + 1] = (int)(((LL)diffs[rem][end_idx + 1] * inv_v) % MOD);
            }
        }

        for (int rem = 0; rem < k; ++rem) {
            if (diffs[rem].empty()) continue;

            LL current_mult = 1;
            for (int j = 0; j < diffs[rem].size() - 1; ++j) {
                current_mult = (current_mult * diffs[rem][j]) % MOD;
                if (current_mult != 1) {
                    int original_idx = rem + j * k;
                    nums[original_idx] = (int)(((LL)nums[original_idx] * current_mult) % MOD);
                }
            }
        }
    }

    int xorSum = 0;
    for (int num : nums) {
        xorSum ^= num;
    }
    return xorSum;
}
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/