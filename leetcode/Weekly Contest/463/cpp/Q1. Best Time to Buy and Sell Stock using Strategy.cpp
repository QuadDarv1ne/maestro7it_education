/**
 * –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "Best Time to Buy and Sell Stock Using Strategy"
 * 
 * –ó–∞–¥–∞—á–∞: https://leetcode.com/contest/weekly-contest-463/problems/best-time-to-buy-and-sell-stock-using-strategy/
 * 
 * –û–ø–∏—Å–∞–Ω–∏–µ:
 * –î–∞–Ω–æ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã: `prices` –∏ `strategy`, –∞ —Ç–∞–∫–∂–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ `k`.
 * - `prices[i]` ‚Äî —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å `i`.
 * - `strategy[i]` ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –¥–µ–Ω—å `i` (0 –∏–ª–∏ 1).
 * - `k` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–Ω–µ–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
 *
 * –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –∏–∑–º–µ–Ω—è—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ 
 * –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–µ –¥–ª–∏–Ω—ã `k`.
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –°—á–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
 * 2. –ï—Å–ª–∏ `k == 0` –∏–ª–∏ `k > n`, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å.
 * 3. –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–∞ –¥–ª–∏–Ω—ã `k` —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
 * 4. –° –ø–æ–º–æ—â—å—é —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ –∏–¥—ë–º –ø–æ –º–∞—Å—Å–∏–≤—É, –æ–±–Ω–æ–≤–ª—è—è –ø—Ä–∏–±—ã–ª—å, –∏ –∏—â–µ–º –º–∞–∫—Å–∏–º—É–º.
 * 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Ä–æ—Å—Ç–∞ (–µ—Å–ª–∏ –æ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª–µ–Ω).
 *
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), –≥–¥–µ n ‚Äî –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ `prices`.
 * –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1).
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * vector<int> prices = {3, 2, 5, 1};
 * vector<int> strategy = {0, 1, 0, 1};
 * int k = 2;
 * Solution sol;
 * long long result = sol.maxProfit(prices, strategy, k);
 * 
 * @param prices ‚Äî –≤–µ–∫—Ç–æ—Ä —Ü–µ–Ω –∞–∫—Ü–∏–π.
 * @param strategy ‚Äî –≤–µ–∫—Ç–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (0 –∏–ª–∏ 1).
 * @param k ‚Äî –¥–ª–∏–Ω–∞ –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
 * @return –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏–±—ã–ª—å.
 */

#define LL long long
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define MAX(a, b) ((a) > (b) ? (a) : (b))

class Solution {
public:
    long long maxProfit(vector<int>& prices, vector<int>& strategy, int k) {
        int n = prices.size();
    LL initialProfit = 0;
    FOR(i, 0, n) {
        initialProfit += (LL)prices[i] * strategy[i];
    }

    if (k == 0 || k > n) {
        return initialProfit;
    }

    int h = k / 2;
    LL currentGain = 0;

    FOR(i, 0, h) {
        currentGain -= (LL)strategy[i] * prices[i];
    }
    FOR(i, h, k) {
        currentGain += (LL)(1 - strategy[i]) * prices[i];
    }

    LL maxGain = currentGain;

    FOR(i, 1, n - k + 1) {
        currentGain += (LL)strategy[i - 1] * prices[i - 1];
        currentGain -= (LL)prices[i + h - 1];
        currentGain += (LL)(1 - strategy[i + k - 1]) * prices[i + k - 1];
        maxGain = MAX(maxGain, currentGain);
    }

    return initialProfit + MAX(0LL, maxGain);
    }
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/