/**
 * –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "XOR After Range Multiplication Queries I"
 * 
 * –ó–∞–¥–∞—á–∞: https://leetcode.com/contest/weekly-contest-463/problems/xor-after-range-multiplication-queries-i/
 * 
 * –û–ø–∏—Å–∞–Ω–∏–µ:
 * –î–∞–Ω–æ:
 * - –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª `nums`,
 * - –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ `queries`, –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª [l, r, k, v].
 * 
 * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:
 * 1. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –ø–æ–¥–æ—Ç—Ä–µ–∑–∫—É nums[l..r] —Å —à–∞–≥–æ–º k.
 * 2. –£–º–Ω–æ–∂–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–∞ –Ω–∞ v –∏ –±–µ—Ä—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –º–æ–¥—É–ª—é MOD = 10^9 + 7.
 * 
 * –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å XOR –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ `nums`.
 * 
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ.
 * 2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —É–º–Ω–æ–∂–µ–Ω–∏—è —Å –º–æ–¥—É–ª–µ–º.
 * 3. –ü–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã—á–∏—Å–ª—è–µ–º XOR –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞.
 *
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(Q * ((R-L)/K)), –≥–¥–µ Q ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, 
 * R-L ‚Äî –¥–ª–∏–Ω–∞ –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–∞, K ‚Äî —à–∞–≥.
 * –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏.
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * vector<int> nums = {1, 2, 3};
 * vector<vector<int>> queries = {{0, 2, 1, 2}};
 * Solution sol;
 * int result = sol.xorAfterQueries(nums, queries);
 * 
 * @param nums ‚Äî –≤–µ–∫—Ç–æ—Ä —á–∏—Å–µ–ª.
 * @param queries ‚Äî –≤–µ–∫—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å [l, r, k, v].
 * @return –†–µ–∑—É–ª—å—Ç–∞—Ç XOR –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
 */

#define LL long long
#define VECI vector<int>
#define VECVI vector<vector<int>>
#define MOD 1000000007
#define FOR_EACH_Q(q, queries) for (const auto& q : queries)
#define FOR_STEP(i, l, r, k) for (int i = (l); i <= (r); i += (k))

class Solution {
public:
    int xorAfterQueries(vector<int>& nums, vector<vector<int>>& queries) {
        FOR_EACH_Q(q, queries) {
        int l = q[0];
        int r = q[1];
        int k = q[2];
        int v = q[3];
        FOR_STEP(idx, l, r, k) {
            nums[idx] = (int)(((LL)nums[idx] * v) % MOD);
        }
    }

    int xorSum = 0;
    for (int num : nums) {
        xorSum ^= num;
    }

    return xorSum;
    }
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/