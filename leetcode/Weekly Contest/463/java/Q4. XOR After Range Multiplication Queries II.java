/**
 * –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "XOR After Range Multiplication Queries II"
 * 
 * –ó–∞–¥–∞—á–∞: https://leetcode.com/contest/weekly-contest-463/problems/xor-after-range-multiplication-queries-ii/
 * 
 * –û–ø–∏—Å–∞–Ω–∏–µ:
 * –î–∞–Ω–æ:
 * - –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª `nums`,
 * - –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ `queries`, –≥–¥–µ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å [l, r, k, v].
 * 
 * –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:
 * 1. –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–∞ nums[l..r] —Å —à–∞–≥–æ–º k.
 * 2. –£–º–Ω–æ–∂–∞–µ–º –∫–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ v –ø–æ –º–æ–¥—É–ª—é MOD = 10^9 + 7.
 * 
 * –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å XOR –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ `nums`.
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –†–∞–∑–±–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–≤–∞ —Ç–∏–ø–∞:
 *    - `k > sqrt(n)` (–±–æ–ª—å—à–æ–π —à–∞–≥) ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é.
 *    - `k <= sqrt(n)` (–º–∞–ª—ã–π —à–∞–≥) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω–æ—Å—Ç–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã —Å TreeMap –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
 * 2. –î–ª—è –º–∞–ª—ã—Ö `k` –∞–∫–∫—É–º—É–ª–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ `diff` –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö –∫–æ –≤—Å–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞.
 * 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä—ã –∫ –º–∞—Å—Å–∏–≤—É `nums`.
 * 4. –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã—á–∏—Å–ª—è–µ–º XOR –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞.
 *
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n * sqrt(n) + Q), –≥–¥–µ n ‚Äî —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞, Q ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤.
 * –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω–æ—Å—Ç–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤.
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * int[] nums = {1, 2, 3, 4};
 * int[][] queries = {{0, 3, 1, 2}, {1, 2, 2, 3}};
 * Solution sol = new Solution();
 * int result = sol.xorAfterQueries(nums, queries);
 * 
 * @param nums ‚Äî –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª.
 * @param queries ‚Äî –º–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ [l, r, k, v].
 * @return XOR –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
 */

import java.math.BigInteger;
class Solution {
    public int xorAfterQueries(int[] nums, int[][] queries) {
        long[] mul = new long[nums.length];
        for (int i = 0; i < nums.length; i++) {
            mul[i] = 1;
        }
        HashMap<Integer, HashMap<Integer, TreeMap<Integer, Long>>> diff = new HashMap<>();
        for (int[] query : queries) {
            if (query[2] > Math.sqrt(nums.length)) {
                for (int i = query[0]; i <= query[1]; i += query[2]) {
                    mul[i] = mul[i] * query[3] % 1000000007;
                }
            } else {
                diff.computeIfAbsent(query[2], t -> new HashMap<>()).computeIfAbsent(query[0] % query[2], t -> new TreeMap<>()).put(query[0] / query[2], diff.get(query[2]).get(query[0] % query[2]).getOrDefault(query[0] / query[2], 1L) * query[3] % 1000000007);
                diff.get(query[2]).get(query[0] % query[2]).put((query[1] - query[0] % query[2]) / query[2] + 1, diff.get(query[2]).get(query[0] % query[2]).getOrDefault((query[1] - query[0] % query[2]) / query[2] + 1, 1L) * BigInteger.valueOf(query[3]).modInverse(BigInteger.valueOf(1000000007)).intValue() % 1000000007);
            }
        }
        for (int i = 1; i <= Math.sqrt(nums.length); i++) {
            for (int j = 0, prev = 0; j < i; j++) {
                long cur = 1;
                for (Map.Entry<Integer, Long> entry : diff.getOrDefault(i, new HashMap<>()).getOrDefault(j, new TreeMap<>()).entrySet()) {
                    for (int p = prev; p < entry.getKey() && j + p * i < nums.length; p++) {
                        mul[j + p * i] = mul[j + p * i] * cur % 1000000007;
                    }
                    cur = cur * entry.getValue() % 1000000007;
                    prev = entry.getKey();
                }
                for (int k = prev; j + k * i < nums.length; k++) {
                    mul[j + k * i] = mul[j + k * i] * cur % 1000000007;
                }
            }
        }
        int result = 0;
        for (int i = 0; i < nums.length; i++) {
            result ^= nums[i] * mul[i] % 1000000007;
        }
        return result;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/