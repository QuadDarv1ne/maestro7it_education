/**
 * –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "Minimum Sum After Divisible Sum Deletions"
 * 
 * –ó–∞–¥–∞—á–∞: https://leetcode.com/contest/weekly-contest-463/problems/minimum-sum-after-divisible-sum-deletions/
 * 
 * –û–ø–∏—Å–∞–Ω–∏–µ:
 * –î–∞–Ω–æ:
 * - –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª `nums`,
 * - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ `k`.
 * 
 * –ó–∞–¥–∞—á–∞:
 * –ù–∞–π—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω—É—é —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
 * –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–æ–≤ —Å —Å—É–º–º–æ–π, –∫—Ä–∞—Ç–Ω–æ–π `k`.
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–∞—Å—Å–∏–≤–æ–º `dp` –¥–ª–∏–Ω—ã k, –≥–¥–µ dp[rem] —Ö—Ä–∞–Ω–∏—Ç
 *    –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Å—É–º–º–æ–π –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–æ–≤ –∏ –ø—Ä–µ—Ñ–∏–∫—Å–Ω–æ–π —Å—É–º–º–æ–π –¥–ª—è –æ—Å—Ç–∞—Ç–∫–∞ rem –ø–æ –º–æ–¥—É–ª—é k.
 * 2. –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É `nums`, –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–Ω—É—é —Å—É–º–º—É `sum`.
 * 3. –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ `sum % k` –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω—É—é —É–¥–∞–ª—ë–Ω–Ω—É—é —Å—É–º–º—É `max`.
 * 4. –û–±–Ω–æ–≤–ª—è–µ–º dp[rem] –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞.
 * 5. –í –∫–æ–Ω—Ü–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É: total_sum - max.
 *
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), –≥–¥–µ n ‚Äî –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ `nums`.
 * –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(k) –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ dp.
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * int[] nums = {3, 7, 2, 5};
 * int k = 3;
 * Solution sol = new Solution();
 * long result = sol.minArraySum(nums, k);
 * 
 * @param nums ‚Äî –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª.
 * @param k ‚Äî —á–∏—Å–ª–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –¥–µ–ª–∏–º–æ—Å—Ç—å —Å—É–º–º—ã —É–¥–∞–ª—è–µ–º—ã—Ö –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–æ–≤.
 * @return –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–∞—è —Å—É–º–º–∞ –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–æ–≤.
 */

class Solution {
    public long minArraySum(int[] nums, int k) {
        long dp[] = new long[k], sum = 0, max = 0;
        for (int i = 1; i < k; i++) {
            dp[i] = Long.MIN_VALUE;
        }
        for (int num : nums) {
            sum += num;
            max = Math.max(max, dp[(int) (sum % k)] + sum);
            dp[(int) (sum % k)] = Math.max(dp[(int) (sum % k)], max - sum);
        }
        return sum - max;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/