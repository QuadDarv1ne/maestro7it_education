/**
 * –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ "Best Time to Buy and Sell Stock Using Strategy"
 * 
 * –ó–∞–¥–∞—á–∞: https://leetcode.com/contest/weekly-contest-463/problems/best-time-to-buy-and-sell-stock-using-strategy/
 * 
 * –û–ø–∏—Å–∞–Ω–∏–µ:
 * –î–∞–Ω–æ:
 * - –º–∞—Å—Å–∏–≤ `prices`, –≥–¥–µ prices[i] ‚Äî —Ü–µ–Ω–∞ –∞–∫—Ü–∏–∏ –≤ –¥–µ–Ω—å i,
 * - –º–∞—Å—Å–∏–≤ `strategy`, –≥–¥–µ strategy[i] = 0 –∏–ª–∏ 1,
 * - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ `k`, –¥–ª–∏–Ω–∞ –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
 *
 * –ó–∞–¥–∞—á–∞:
 * –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –∏–∑–º–µ–Ω—è—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–µ –¥–ª–∏–Ω—ã k.
 * 
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–µ —Å—É–º–º—ã —Ü–µ–Ω `sum` –∏ —Å—É–º–º –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ `dp`.
 * 2. –°–∫–æ–ª—å–∑—è—â–∏–º –æ–∫–Ω–æ–º –¥–ª–∏–Ω—ã k –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Å—Å–∏–≤—É –∏ –≤—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä–∏–±—ã–ª–∏.
 * 3. –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏—Ä–æ—Å—Ç–∞ `max`.
 * 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É–º–º—É –∏—Å—Ö–æ–¥–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Ä–æ—Å—Ç–∞.
 *
 * –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), –≥–¥–µ n ‚Äî –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ `prices`.
 * –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n) –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã—Ö —Å—É–º–º.
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * int[] prices = {3, 2, 5, 1};
 * int[] strategy = {0, 1, 0, 1};
 * int k = 2;
 * Solution sol = new Solution();
 * long result = sol.maxProfit(prices, strategy, k);
 * 
 * @param prices ‚Äî –º–∞—Å—Å–∏–≤ —Ü–µ–Ω –∞–∫—Ü–∏–π.
 * @param strategy ‚Äî –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (0 –∏–ª–∏ 1).
 * @param k ‚Äî –¥–ª–∏–Ω–∞ –ø–æ–¥–æ—Ç—Ä–µ–∑–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
 * @return –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏–±—ã–ª—å.
 */

class Solution {
    public long maxProfit(int[] prices, int[] strategy, int k) {
        long sum[] = new long[prices.length + 1], dp[] = new long[prices.length + 1], max = 0;
        for (int i = 0; i < prices.length; i++) {
            sum[i + 1] = sum[i] + prices[i];
            dp[i + 1] = dp[i] + strategy[i] * prices[i];
        }
        for (int i = k; i <= prices.length; i++) {
            max = Math.max(max, sum[i] - sum[i - k / 2] - dp[i] + dp[i - k]);
        }
        return max + dp[prices.length];
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/