/**
 * https://leetcode.com/problems/maximum-depth-of-binary-tree/description/
 */

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    /**
     * –ó–∞–¥–∞—á–∞: –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
     *
     * –ê–ª–≥–æ—Ä–∏—Ç–º:
     * - –ï—Å–ª–∏ root == null ‚Üí –≤–µ—Ä–Ω—É—Ç—å 0.
     * - –ò–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å 1 + –º–∞–∫—Å–∏–º—É–º –≥–ª—É–±–∏–Ω –ø–æ–¥–¥–µ—Ä–µ–≤—å–µ–≤.
     *
     * –°–ª–æ–∂–Ω–æ—Å—Ç—å:
     * - –í—Ä–µ–º—è: O(n)
     * - –ü–∞–º—è—Ç—å: O(h)
     */
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;
        return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/