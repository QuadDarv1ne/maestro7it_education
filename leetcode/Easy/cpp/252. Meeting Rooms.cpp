/**
 * https://leetcode.com/problems/meeting-rooms/description/
 */

#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ –æ–¥–Ω–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏.
     *
     * –ê–ª–≥–æ—Ä–∏—Ç–º:
     * 1. –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞.
     * 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏.
     *
     * @param intervals –í–µ–∫—Ç–æ—Ä –≤—Å—Ç—Ä–µ—á [start, end]
     * @return true, –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è, –∏–Ω–∞—á–µ false
     */
    bool canAttendMeetings(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b){
            return a[0] < b[0];
        });

        for (int i = 1; i < intervals.size(); ++i) {
            if (intervals[i][0] < intervals[i-1][1])
                return false;
        }
        return true;
    }
};

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/