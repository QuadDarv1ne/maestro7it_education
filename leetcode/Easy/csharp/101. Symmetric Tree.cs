/**
 * https://leetcode.com/problems/symmetric-tree/description/
 */

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —É–∑–ª–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val = 0, TreeNode left = null, TreeNode right = null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

public class Solution {
    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –∑–µ—Ä–∫–∞–ª—å–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–≤–æ–µ–≥–æ –∫–æ—Ä–Ω—è.
    ///
    /// –ê–ª–≥–æ—Ä–∏—Ç–º:
    /// 1. –°–∏–º–º–µ—Ç—Ä–∏—è –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ª–µ–≤–æ–µ –∏ –ø—Ä–∞–≤–æ–µ –ø–æ–¥–¥–µ—Ä–µ–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–µ—Ä–∫–∞–ª—å–Ω—ã–º–∏.
    /// 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ IsMirror –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
    ///    - –ï—Å–ª–∏ –æ–±–∞ —É–∑–ª–∞ —Ä–∞–≤–Ω—ã null ‚Üí —Å–∏–º–º–µ—Ç—Ä–∏—è.
    ///    - –ï—Å–ª–∏ –æ–¥–∏–Ω —Ä–∞–≤–µ–Ω null, –∞ –≤—Ç–æ—Ä–æ–π –Ω–µ—Ç ‚Üí –∞—Å–∏–º–º–µ—Ç—Ä–∏—è.
    ///    - –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è —É–∑–ª–æ–≤ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è ‚Üí –∞—Å–∏–º–º–µ—Ç—Ä–∏—è.
    ///    - –ò–Ω–∞—á–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º:
    ///         ‚Ä¢ –ª–µ–≤—ã–π –ø–æ—Ç–æ–º–æ–∫ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø—Ä–∞–≤—ã–π –ø–æ—Ç–æ–º–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ
    ///         ‚Ä¢ –ø—Ä–∞–≤—ã–π –ø–æ—Ç–æ–º–æ–∫ –ø–µ—Ä–≤–æ–≥–æ –∏ –ª–µ–≤—ã–π –ø–æ—Ç–æ–º–æ–∫ –≤—Ç–æ—Ä–æ–≥–æ
    ///
    /// –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(n), –≥–¥–µ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ.
    /// –ü–∞–º—è—Ç—å: O(h), –≥–¥–µ h ‚Äî –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (–∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Å—Ç–µ–∫ —Ä–µ–∫—É—Ä—Å–∏–∏).
    /// </summary>
    public bool IsSymmetric(TreeNode root) {
        return IsMirror(root, root);
    }

    /// <summary>
    /// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–π —Å–∏–º–º–µ—Ç—Ä–∏–∏ –¥–≤—É—Ö –ø–æ–¥–¥–µ—Ä–µ–≤—å–µ–≤.
    /// </summary>
    private bool IsMirror(TreeNode t1, TreeNode t2) {
        if (t1 == null && t2 == null) return true;
        if (t1 == null || t2 == null) return false;
        if (t1.val != t2.val) return false;

        return IsMirror(t1.left, t2.right) && IsMirror(t1.right, t2.left);
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/