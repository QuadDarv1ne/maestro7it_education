/**
 * https://leetcode.com/problems/merge-two-sorted-lists/description/
 */

/// <summary>
/// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–¥–Ω–æ—Å–≤—è–∑–Ω—ã—Ö —Å–ø–∏—Å–∫–∞ –≤ –æ–¥–∏–Ω.
/// </summary>
/// <param name="l1">–ì–æ–ª–æ–≤–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞.</param>
/// <param name="l2">–ì–æ–ª–æ–≤–∞ –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞.</param>
/// <returns>–ì–æ–ª–æ–≤–∞ –Ω–æ–≤–æ–≥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.</returns>
/// <remarks>
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —É–∑–µ–ª (dummy) –∏ tail –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
/// –í—Ä–µ–º—è: O(m + n), –ø–∞–º—è—Ç—å: O(1).
/// </remarks>

public class Solution {
    public ListNode MergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode();
        ListNode tail = dummy;

        while (list1 != null && list2 != null) {
            if (list1.val < list2.val) {
                tail.next = list1;
                list1 = list1.next;
            } else {
                tail.next = list2;
                list2 = list2.next;
            }
            tail = tail.next;
        }

        if (list1 != null) tail.next = list1;
        if (list2 != null) tail.next = list2;

        return dummy.next;
    }
}

/*
''' –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏: '''
# 1. üí†Telegramüí†‚ùÉ –•–∏–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ √Ü: https://t.me/hut_programmer_07
# 2. üí†Telegram ‚Ññ1üí† @quadd4rv1n7
# 3. üí†Telegram ‚Ññ2üí† @dupley_maxim_1999
# 4. Rutube –∫–∞–Ω–∞–ª: https://rutube.ru/channel/4218729/
# 5. Plvideo –∫–∞–Ω–∞–ª: https://plvideo.ru/channel/AUPv_p1r5AQJ
# 6. YouTube –∫–∞–Ω–∞–ª: https://www.youtube.com/@it-coders
# 7. –í–ö –≥—Ä—É–ø–ø–∞: https://vk.com/science_geeks
*/