; ========================================================
; Алгоритм CRC32 на ассемблере (x86, NASM)
; Уровень: Средний
; Цель: Расчет контрольной суммы CRC32 для строки
; Особенности:
;   - Использование предвычисленной таблицы
;   - Оптимизация через битовые операции
; Пример вызова: 
;   Вход: ESI -> строка, ECX = длина строки
;   Выход: EAX = CRC32
; ========================================================

section .data
; Таблица CRC32 (предвычисленные значения)
crc32_table:
    dd 0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3
    ; ... (остальные 248 элементов таблицы)
    ; Полную таблицу можно сгенерировать или найти в документации

section .text
global _start

_start:
    ; Пример использования
    mov esi, test_string    ; Указатель на строку
    mov ecx, test_string_len ; Длина строки
    call compute_crc32
    ; Результат в EAX
    ; Завершение программы (для DOS/Linux)
    mov eax, 1
    int 0x80

;---------------------------------------
; Вычисление CRC32
; Вход: ESI = указатель на данные, ECX = длина
; Выход: EAX = CRC32
;---------------------------------------
compute_crc32:
    push ebx
    push edi
    xor eax, eax
    not eax                 ; Инициализация CRC = 0xFFFFFFFF
    mov edi, crc32_table    ; Таблица CRC

.process_byte:
    movzx ebx, byte [esi]   ; Текущий байт данных
    xor bl, al              ; XOR с младшим байтом CRC
    shr eax, 8              ; Сдвиг CRC на 8 бит вправо
    xor eax, [edi + ebx*4]  ; Обновление CRC через таблицу
    inc esi
    loop .process_byte

    not eax                 ; Инвертирование битов (финальный шаг)
    pop edi
    pop ebx
    ret

;---------------------------------------
; Тестовые данные:
;  test_string db "Hello, World!", 0
;  test_string_len equ $ - test_string
;