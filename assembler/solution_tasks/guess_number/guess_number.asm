; --------------------------------------------------------------------------------;
; Программа для игры "Угадай число" на языке ассемблера x86.                      ;
;                                                                                 ;
; Описание:                                                                       ;
; Эта программа генерирует случайное число в заданном диапазоне, и пользователь   ;
; должен угадать его, получая подсказки "больше" или "меньше".                    ;
;                                                                                 ;
; Использование:                                                                  ;
; - Компилируйте программу с помощью NASM.                                        ;
; - Запустите скомпилированный файл для начала игры.                              ;
;                                                                                 ;
; Автор: [Дуплей Максим Игоревич]                                                 ;
; Дата: [15.03.2025]                                                              ;
; ---------------------------------------------------------------------------------

section .data
    prompt db 'Guess the number (1-100): ', 0     ; Строка для вывода приглашения
    higher db 'Higher!', 0xA, 0                   ; Строка для подсказки "больше"
    lower db 'Lower!', 0xA, 0                     ; Строка для подсказки "меньше"
    correct db 'Correct! You guessed it!', 0xA, 0 ; Строка для успешного угадывания
    newline db 0xA, 0                             ; Символ новой строки

section .bss
    input resb 10  ; Буфер для хранения введенного числа
    num resb 10    ; Буфер для хранения числа в виде строки

section .text
    global _start

_start:
    ; Генерация случайного числа (для простоты возьмем фиксированное число, например, 42)
    mov ebx, 42         ; Заданное число для угадывания

guess_loop:
    ; Вывод приглашения для ввода
    mov eax, 4          ; системный вызов для sys_write
    mov ebx, 1          ; файловый дескриптор 1 - стандартный вывод
    mov ecx, prompt     ; адрес строки
    mov edx, 24         ; длина строки
    int 0x80            ; вызов ядра

    ; Чтение ввода пользователя
    mov eax, 3          ; системный вызов для sys_read
    mov ebx, 0          ; файловый дескриптор 0 - стандартный ввод
    mov ecx, input      ; адрес буфера для ввода
    mov edx, 10         ; максимальная длина ввода
    int 0x80            ; вызов ядра

    ; Преобразование введенной строки в число
    mov esi, input      ; указатель на начало строки
    xor eax, eax        ; очистка eax

convert_loop:
    mov cl, [esi]       ; чтение символа из строки
    cmp cl, 0xA         ; проверка на конец строки
    je check_guess      ; если конец строки, проверить угаданное число
    sub cl, '0'         ; преобразование символа в число
    imul eax, eax, 10   ; умножение eax на 10
    add eax, ecx        ; добавление числа к eax
    inc esi             ; увеличение указателя
    jmp convert_loop    ; повторение

check_guess:
    cmp eax, ebx        ; сравнение угаданного числа с заданным
    jl print_higher     ; если меньше, вывести "Higher!"
    jg print_lower      ; если больше, вывести "Lower!"
    jmp print_correct   ; если равно, вывести "Correct!"

print_higher:
    ; Вывод подсказки "Higher!"
    mov eax, 4
    mov ebx, 1
    mov ecx, higher
    mov edx, 8
    int 0x80
    jmp guess_loop

print_lower:
    ; Вывод подсказки "Lower!"
    mov eax, 4
    mov ebx, 1
    mov ecx, lower
    mov edx, 7
    int 0x80
    jmp guess_loop

print_correct:
    ; Вывод сообщения об успешном угадывании
    mov eax, 4
    mov ebx, 1
    mov ecx, correct
    mov edx, 25
    int 0x80

    ; Завершение программы
    mov eax, 1          ; системный вызов для sys_exit
    xor ebx, ebx        ; код возврата 0
    int 0x80            ; вызов ядра
